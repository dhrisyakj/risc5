$date
   Thu Jun 12 07:20:35 2025
$end

$version
  2024.1
  $dumpfile ("tinyriscv_soc_tb.vcd") 
$end

$timescale
  1ps
$end

$scope module tinyriscv_soc_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$var wire 32 # if_inst_i [31:0] $end
$var wire 32 $ id_inst_d [31:0] $end
$var wire 32 % ex_inst_o [31:0] $end
$var wire 1 & hold $end
$var wire 32 ' product [31:0] $end
$var wire 32 ( acc [31:0] $end
$var wire 32 ) S [31:0] $end
$var wire 3 * state [2:0] $end
$var wire 32 + dest_reg [31:0] $end
$var wire 32 , exec_wdata [31:0] $end
$var wire 32 - reg_wdata [31:0] $end
$var wire 1 . reg_we $end
$var wire 5 / reg_waddr [4:0] $end
$var wire 32 0 mem_data_in [31:0] $end
$var wire 32 1 mem_data [31:0] $end
$var wire 32 2 avg_out [31:0] $end
$var wire 32 3 mem_addr [31:0] $end
$var wire 32 4 r2_wdata [31:0] $end
$var wire 32 5 fixed_inv [31:0] $end
$var wire 1 6 avg_start $end
$var wire 1 7 avg_ready $end
$var wire 1 8 avg_busy $end
$var wire 1 9 mem_req $end
$var wire 32 : x3 [31:0] $end
$var wire 32 ; x26 [31:0] $end
$var wire 32 < x25 [31:0] $end
$var wire 32 = x27 [31:0] $end
$var integer 32 > r [31:0] $end
$var integer 32 ? i [31:0] $end
$scope module tinyriscv_soc_top_0 $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var reg 1 B over $end
$var reg 1 C succ $end
$var wire 1 D halted_ind $end
$var wire 1 E uart_debug_pin $end
$var wire 1 F uart_tx_pin $end
$var wire 1 G uart_rx_pin $end
$var wire 2 H gpio [1:0] $end
$var wire 1 I jtag_TCK $end
$var wire 1 J jtag_TMS $end
$var wire 1 K jtag_TDI $end
$var wire 1 L jtag_TDO $end
$var wire 1 M spi_miso $end
$var wire 1 N spi_mosi $end
$var wire 1 O spi_ss $end
$var wire 1 P spi_clk $end
$var wire 32 Q m0_addr_i [31:0] $end
$var wire 32 R m0_data_i [31:0] $end
$var wire 32 S m0_data_o [31:0] $end
$var wire 1 T m0_req_i $end
$var wire 1 U m0_we_i $end
$var wire 32 V m1_addr_i [31:0] $end
$var wire 32 W m1_data_i [31:0] $end
$var wire 32 X m1_data_o [31:0] $end
$var wire 1 Y m1_req_i $end
$var wire 1 Z m1_we_i $end
$var wire 32 [ m2_addr_i [31:0] $end
$var wire 32 \ m2_data_i [31:0] $end
$var wire 32 ] m2_data_o [31:0] $end
$var wire 1 ^ m2_req_i $end
$var wire 1 _ m2_we_i $end
$var wire 32 ` m3_addr_i [31:0] $end
$var wire 32 a m3_data_i [31:0] $end
$var wire 32 b m3_data_o [31:0] $end
$var wire 1 c m3_req_i $end
$var wire 1 d m3_we_i $end
$var wire 32 e s0_addr_o [31:0] $end
$var wire 32 f s0_data_o [31:0] $end
$var wire 32 g s0_data_i [31:0] $end
$var wire 1 h s0_we_o $end
$var wire 32 i s1_addr_o [31:0] $end
$var wire 32 j s1_data_o [31:0] $end
$var wire 32 k s1_data_i [31:0] $end
$var wire 1 l s1_we_o $end
$var wire 32 m s2_addr_o [31:0] $end
$var wire 32 n s2_data_o [31:0] $end
$var wire 32 o s2_data_i [31:0] $end
$var wire 1 p s2_we_o $end
$var wire 32 q s3_addr_o [31:0] $end
$var wire 32 r s3_data_o [31:0] $end
$var wire 32 s s3_data_i [31:0] $end
$var wire 1 t s3_we_o $end
$var wire 32 u s4_addr_o [31:0] $end
$var wire 32 v s4_data_o [31:0] $end
$var wire 32 w s4_data_i [31:0] $end
$var wire 1 x s4_we_o $end
$var wire 32 y s5_addr_o [31:0] $end
$var wire 32 z s5_data_o [31:0] $end
$var wire 32 { s5_data_i [31:0] $end
$var wire 1 | s5_we_o $end
$var wire 1 } rib_hold_flag_o $end
$var wire 1 ~ jtag_halt_req_o $end
$var wire 1 !! jtag_reset_req_o $end
$var wire 5 "! jtag_reg_addr_o [4:0] $end
$var wire 32 #! jtag_reg_data_o [31:0] $end
$var wire 1 $! jtag_reg_we_o $end
$var wire 32 %! jtag_reg_data_i [31:0] $end
$var wire 8 &! int_flag [7:0] $end
$var wire 1 '! timer0_int $end
$var wire 2 (! io_in [1:0] $end
$var wire 32 )! gpio_ctrl [31:0] $end
$var wire 32 *! gpio_data [31:0] $end
$scope module u_tinyriscv $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 32 Q rib_ex_addr_o [31:0] $end
$var wire 32 S rib_ex_data_i [31:0] $end
$var wire 32 R rib_ex_data_o [31:0] $end
$var wire 1 T rib_ex_req_o $end
$var wire 1 U rib_ex_we_o $end
$var wire 32 V rib_pc_addr_o [31:0] $end
$var wire 32 X rib_pc_data_i [31:0] $end
$var wire 5 "! jtag_reg_addr_i [4:0] $end
$var wire 32 #! jtag_reg_data_i [31:0] $end
$var wire 1 $! jtag_reg_we_i $end
$var wire 32 %! jtag_reg_data_o [31:0] $end
$var wire 1 } rib_hold_flag_i $end
$var wire 1 ~ jtag_halt_flag_i $end
$var wire 1 !! jtag_reset_flag_i $end
$var wire 8 &! int_i [7:0] $end
$var wire 32 +! mac_acc_out_o [31:0] $end
$var wire 32 ,! ie_acc_out_o [31:0] $end
$var wire 32 -! pc_pc_o [31:0] $end
$var wire 32 .! if_inst_o [31:0] $end
$var wire 32 /! if_inst_addr_o [31:0] $end
$var wire 8 0! if_int_flag_o [7:0] $end
$var wire 5 1! id_reg1_raddr_o [4:0] $end
$var wire 5 2! id_reg2_raddr_o [4:0] $end
$var wire 5 3! id_reg3_raddr_o [4:0] $end
$var wire 32 4! id_inst_o [31:0] $end
$var wire 32 5! id_inst_addr_o [31:0] $end
$var wire 32 6! id_reg1_rdata_o [31:0] $end
$var wire 32 7! id_reg2_rdata_o [31:0] $end
$var wire 32 8! id_reg3_rdata_o [31:0] $end
$var wire 1 9! id_reg_we_o $end
$var wire 5 :! id_reg_waddr_o [4:0] $end
$var wire 32 ;! id_csr_raddr_o [31:0] $end
$var wire 1 <! id_csr_we_o $end
$var wire 32 =! id_csr_rdata_o [31:0] $end
$var wire 32 >! id_csr_waddr_o [31:0] $end
$var wire 32 ?! id_op1_o [31:0] $end
$var wire 32 @! id_op2_o [31:0] $end
$var wire 32 A! id_op1_jump_o [31:0] $end
$var wire 32 B! id_op2_jump_o [31:0] $end
$var wire 1 C! id_is_mac_o $end
$var wire 1 D! id_is_macl_o $end
$var wire 1 E! id_is_avg_filter_o $end
$var wire 1 F! mac_done $end
$var wire 32 G! ie_inst_o [31:0] $end
$var wire 32 H! ie_inst_addr_o [31:0] $end
$var wire 1 I! ie_reg_we_o $end
$var wire 5 J! ie_reg_waddr_o [4:0] $end
$var wire 32 K! ie_reg1_rdata_o [31:0] $end
$var wire 32 L! ie_reg2_rdata_o [31:0] $end
$var wire 32 M! ie_reg3_rdata_o [31:0] $end
$var wire 1 N! ie_csr_we_o $end
$var wire 32 O! ie_csr_waddr_o [31:0] $end
$var wire 32 P! ie_csr_rdata_o [31:0] $end
$var wire 32 Q! ie_op1_o [31:0] $end
$var wire 32 R! ie_op2_o [31:0] $end
$var wire 32 S! ie_op1_jump_o [31:0] $end
$var wire 32 T! ie_op2_jump_o [31:0] $end
$var wire 1 U! ie_is_mac_o $end
$var wire 1 V! ie_is_macl_o $end
$var wire 32 W! ex_mem_wdata_o [31:0] $end
$var wire 32 X! ex_mem_raddr_o [31:0] $end
$var wire 32 Y! ex_mem_waddr_o [31:0] $end
$var wire 1 Z! ex_mem_we_o $end
$var wire 1 [! ex_mem_req_o $end
$var wire 32 \! ex_reg_wdata_o [31:0] $end
$var wire 1 ]! ex_reg_we_o $end
$var wire 5 ^! ex_reg_waddr_o [4:0] $end
$var wire 1 _! ex_hold_flag_o $end
$var wire 1 `! ex_jump_flag_o $end
$var wire 32 a! ex_jump_addr_o [31:0] $end
$var wire 1 b! ex_div_start_o $end
$var wire 32 c! ex_div_dividend_o [31:0] $end
$var wire 32 d! ex_div_divisor_o [31:0] $end
$var wire 3 e! ex_div_op_o [2:0] $end
$var wire 5 f! ex_div_reg_waddr_o [4:0] $end
$var wire 32 g! ex_csr_wdata_o [31:0] $end
$var wire 1 h! ex_csr_we_o $end
$var wire 32 i! ex_csr_waddr_o [31:0] $end
$var wire 32 j! regs_rdata1_o [31:0] $end
$var wire 32 k! regs_rdata2_o [31:0] $end
$var wire 32 l! regs_rdata3_o [31:0] $end
$var wire 32 m! csr_data_o [31:0] $end
$var wire 32 n! csr_clint_data_o [31:0] $end
$var wire 1 o! csr_global_int_en_o $end
$var wire 32 p! csr_clint_csr_mtvec [31:0] $end
$var wire 32 q! csr_clint_csr_mepc [31:0] $end
$var wire 32 r! csr_clint_csr_mstatus [31:0] $end
$var wire 3 s! ctrl_hold_flag_o [2:0] $end
$var wire 1 t! ctrl_jump_flag_o $end
$var wire 32 u! ctrl_jump_addr_o [31:0] $end
$var wire 32 v! div_result_o [31:0] $end
$var wire 1 w! div_ready_o $end
$var wire 1 x! div_busy_o $end
$var wire 5 y! div_reg_waddr_o [4:0] $end
$var wire 1 z! clint_we_o $end
$var wire 32 {! clint_waddr_o [31:0] $end
$var wire 32 |! clint_raddr_o [31:0] $end
$var wire 32 }! clint_data_o [31:0] $end
$var wire 32 ~! clint_int_addr_o [31:0] $end
$var wire 1 !" clint_int_assert_o $end
$var wire 1 "" clint_hold_flag_o $end
$var wire 1 #" mac_load_done $end
$var wire 1 $" mac_load_busy $end
$var wire 32 %" mac_mem_addr [31:0] $end
$var wire 1 &" mac_mem_req_o $end
$var wire 32 '" macl_acc_out [31:0] $end
$var wire 5 (" macl_reg_waddr_o [4:0] $end
$var wire 5 )" ex_mac_reg_waddr_o [4:0] $end
$var wire 1 *" exec_avg_done $end
$var wire 1 +" exec_avg_busy $end
$var wire 32 ," avg_mem_addr [31:0] $end
$var wire 1 -" avg_mem_req_o $end
$var wire 32 ." exec_avg_out_o [31:0] $end
$var wire 5 /" avg_reg_waddr_o [4:0] $end
$var wire 5 0" ex_avg_reg_waddr_o [4:0] $end
$var wire 1 1" exec_power_done $end
$var wire 1 2" exec_power_busy $end
$var wire 32 3" exec_power_out_o [31:0] $end
$var wire 5 4" power_reg_waddr_o [4:0] $end
$var wire 1 5" power_mem_req_o $end
$var wire 32 6" power_mem_addr [31:0] $end
$var wire 1 7" id_is_mac_config_o $end
$var wire 1 8" ie_is_mac_config_o $end
$var wire 1 9" ie_is_avg_filter_o $end
$var wire 1 :" id_is_power_est_o $end
$var wire 1 ;" ie_is_power_est_o $end
$var wire 1 <" ex_mac_config_o $end
$var wire 32 =" ex_count_wdata_o [31:0] $end
$var wire 32 >" macreg_count_o [31:0] $end
$var wire 32 ?" rib_mem_addr_exec [31:0] $end
$var wire 32 @" rib_mem_addr_mac [31:0] $end
$var wire 32 A" rib_mem_addr_avg [31:0] $end
$var wire 1 B" rib_mem_req_mac $end
$var wire 1 C" rib_mem_req_avg $end
$scope module u_config $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 1 <" we1_i $end
$var wire 32 =" w1data_i [31:0] $end
$var reg 32 D" mac_count_o [31:0] $end
$var reg 32 E" mac_count [31:0] $end
$upscope $end
$scope module u_mac $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 1 V! start $end
$var wire 32 K! base_addr1 [31:0] $end
$var wire 32 L! base_addr2 [31:0] $end
$var wire 32 >" count [31:0] $end
$var wire 5 )" mac_dst_reg_addr_i [4:0] $end
$var wire 32 S mem_data [31:0] $end
$var reg 5 F" mac_dst_reg_addr_o [4:0] $end
$var reg 32 G" mem_addr [31:0] $end
$var reg 1 H" mem_req $end
$var reg 1 I" busy $end
$var reg 1 J" done $end
$var reg 32 K" acc_out [31:0] $end
$var reg 32 L" rf1_wdata [31:0] $end
$var reg 32 M" rf2_wdata [31:0] $end
$var reg 32 N" final_count [31:0] $end
$var reg 32 O" addr1 [31:0] $end
$var reg 32 P" addr2 [31:0] $end
$var reg 3 Q" state [2:0] $end
$var reg 32 R" acc [31:0] $end
$upscope $end
$scope module u_power $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 1 ;" start $end
$var wire 32 K! base_addr [31:0] $end
$var wire 32 L! fixed_inv_N [31:0] $end
$var wire 32 S" count [31:0] $end
$var wire 5 0" mac_dst_reg_addr_i [4:0] $end
$var wire 32 S mem_data [31:0] $end
$var reg 5 T" mac_dst_reg_addr_o [4:0] $end
$var reg 32 U" mem_addr [31:0] $end
$var reg 1 V" mem_req $end
$var reg 1 W" busy $end
$var reg 1 X" done $end
$var reg 32 Y" avg_out [31:0] $end
$var reg 64 Z" product [63:0] $end
$var reg 64 [" power [63:0] $end
$var reg 32 \" mdata [31:0] $end
$var reg 32 ]" final_count [31:0] $end
$var reg 32 ^" addr [31:0] $end
$var reg 32 _" fixed_inv [31:0] $end
$var reg 3 `" state [2:0] $end
$var reg 32 a" acc [31:0] $end
$upscope $end
$scope module u_avg $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 1 9" start $end
$var wire 32 K! base_addr [31:0] $end
$var wire 32 L! fixed_inv_N [31:0] $end
$var wire 32 S" count [31:0] $end
$var wire 5 0" mac_dst_reg_addr_i [4:0] $end
$var wire 32 S mem_data [31:0] $end
$var reg 5 b" mac_dst_reg_addr_o [4:0] $end
$var reg 32 c" mem_addr [31:0] $end
$var reg 1 d" mem_req $end
$var reg 1 e" busy $end
$var reg 1 f" done $end
$var reg 32 g" avg_out [31:0] $end
$var reg 64 h" product [63:0] $end
$var reg 32 i" memr_wdata [31:0] $end
$var reg 32 j" final_count [31:0] $end
$var reg 32 k" addr [31:0] $end
$var reg 32 l" fixed_inv [31:0] $end
$var reg 3 m" state [2:0] $end
$var reg 32 n" acc [31:0] $end
$var reg 32 o" S [31:0] $end
$var integer 32 p" i [31:0] $end
$upscope $end
$scope module u_pc_reg $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 1 t! jump_flag_i $end
$var wire 32 u! jump_addr_i [31:0] $end
$var wire 3 s! hold_flag_i [2:0] $end
$var wire 1 !! jtag_reset_flag_i $end
$var reg 32 q" pc_o [31:0] $end
$upscope $end
$scope module u_ctrl $end
$var wire 1 A rst $end
$var wire 1 `! jump_flag_i $end
$var wire 32 a! jump_addr_i [31:0] $end
$var wire 1 _! hold_flag_ex_i $end
$var wire 1 } hold_flag_rib_i $end
$var wire 1 ~ jtag_halt_flag_i $end
$var wire 1 "" hold_flag_clint_i $end
$var reg 3 r" hold_flag_o [2:0] $end
$var reg 1 s" jump_flag_o $end
$var reg 32 t" jump_addr_o [31:0] $end
$upscope $end
$scope module u_regs $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 1 ]! we_i $end
$var wire 5 ^! waddr_i [4:0] $end
$var wire 32 \! wdata_i [31:0] $end
$var wire 1 $! jtag_we_i $end
$var wire 5 "! jtag_addr_i [4:0] $end
$var wire 32 #! jtag_data_i [31:0] $end
$var wire 5 1! raddr1_i [4:0] $end
$var reg 32 u" rdata1_o [31:0] $end
$var wire 5 2! raddr2_i [4:0] $end
$var wire 5 3! raddr3_i [4:0] $end
$var reg 32 v" rdata2_o [31:0] $end
$var reg 32 w" rdata3_o [31:0] $end
$var reg 32 x" jtag_data_o [31:0] $end
$upscope $end
$scope module u_csr_reg $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 1 h! we_i $end
$var wire 32 ;! raddr_i [31:0] $end
$var wire 32 i! waddr_i [31:0] $end
$var wire 32 g! data_i [31:0] $end
$var wire 1 z! clint_we_i $end
$var wire 32 |! clint_raddr_i [31:0] $end
$var wire 32 {! clint_waddr_i [31:0] $end
$var wire 32 }! clint_data_i [31:0] $end
$var wire 1 o! global_int_en_o $end
$var reg 32 y" clint_data_o [31:0] $end
$var wire 32 p! clint_csr_mtvec [31:0] $end
$var wire 32 q! clint_csr_mepc [31:0] $end
$var wire 32 r! clint_csr_mstatus [31:0] $end
$var reg 32 z" data_o [31:0] $end
$var reg 64 {" cycle [63:0] $end
$var reg 32 |" mtvec [31:0] $end
$var reg 32 }" mcause [31:0] $end
$var reg 32 ~" mepc [31:0] $end
$var reg 32 !# mie [31:0] $end
$var reg 32 "# mstatus [31:0] $end
$var reg 32 ## mscratch [31:0] $end
$upscope $end
$scope module u_if_id $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 32 X inst_i [31:0] $end
$var wire 32 -! inst_addr_i [31:0] $end
$var wire 3 s! hold_flag_i [2:0] $end
$var wire 8 &! int_flag_i [7:0] $end
$var wire 8 0! int_flag_o [7:0] $end
$var wire 32 .! inst_o [31:0] $end
$var wire 32 /! inst_addr_o [31:0] $end
$var wire 1 $# hold_en $end
$var wire 32 %# inst [31:0] $end
$var wire 32 &# inst_addr [31:0] $end
$var wire 8 '# int_flag [7:0] $end
$scope module inst_ff $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 1 $# hold_en $end
$var wire 32 (# def_val [31:0] $end
$var wire 32 X din [31:0] $end
$var wire 32 %# qout [31:0] $end
$var reg 32 )# qout_r [31:0] $end
$upscope $end
$scope module inst_addr_ff $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 1 $# hold_en $end
$var wire 32 *# def_val [31:0] $end
$var wire 32 -! din [31:0] $end
$var wire 32 &# qout [31:0] $end
$var reg 32 +# qout_r [31:0] $end
$upscope $end
$scope module int_ff $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 1 $# hold_en $end
$var wire 8 ,# def_val [7:0] $end
$var wire 8 &! din [7:0] $end
$var wire 8 '# qout [7:0] $end
$var reg 8 -# qout_r [7:0] $end
$upscope $end
$upscope $end
$scope module u_id $end
$var wire 1 A rst $end
$var wire 32 .! inst_i [31:0] $end
$var wire 32 /! inst_addr_i [31:0] $end
$var wire 32 j! reg1_rdata_i [31:0] $end
$var wire 32 k! reg2_rdata_i [31:0] $end
$var wire 32 l! reg3_rdata_i [31:0] $end
$var wire 32 m! csr_rdata_i [31:0] $end
$var wire 1 `! ex_jump_flag_i $end
$var reg 5 .# reg1_raddr_o [4:0] $end
$var reg 5 /# reg2_raddr_o [4:0] $end
$var reg 5 0# reg3_raddr_o [4:0] $end
$var reg 32 1# csr_raddr_o [31:0] $end
$var reg 32 2# op1_o [31:0] $end
$var reg 32 3# op2_o [31:0] $end
$var reg 32 4# op1_jump_o [31:0] $end
$var reg 32 5# op2_jump_o [31:0] $end
$var reg 32 6# inst_o [31:0] $end
$var reg 32 7# inst_addr_o [31:0] $end
$var reg 32 8# reg1_rdata_o [31:0] $end
$var reg 32 9# reg2_rdata_o [31:0] $end
$var reg 32 :# reg3_rdata_o [31:0] $end
$var reg 1 ;# reg_we_o $end
$var reg 5 <# reg_waddr_o [4:0] $end
$var reg 1 =# csr_we_o $end
$var reg 32 ># csr_rdata_o [31:0] $end
$var reg 32 ?# csr_waddr_o [31:0] $end
$var reg 1 @# is_mac_o $end
$var reg 1 A# is_macl_o $end
$var reg 1 B# is_mac_config_o $end
$var reg 1 C# is_mov_avg_o $end
$var reg 1 D# is_power_est_o $end
$var wire 7 E# opcode [6:0] $end
$var wire 3 F# funct3 [2:0] $end
$var wire 7 G# funct7 [6:0] $end
$var wire 5 H# rd [4:0] $end
$var wire 5 I# rs1 [4:0] $end
$var wire 5 J# rs2 [4:0] $end
$var wire 5 K# rs3 [4:0] $end
$upscope $end
$scope module u_id_ex $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 32 4! inst_i [31:0] $end
$var wire 32 5! inst_addr_i [31:0] $end
$var wire 1 9! reg_we_i $end
$var wire 5 :! reg_waddr_i [4:0] $end
$var wire 32 6! reg1_rdata_i [31:0] $end
$var wire 32 7! reg2_rdata_i [31:0] $end
$var wire 32 8! reg3_rdata_i [31:0] $end
$var wire 1 <! csr_we_i $end
$var wire 32 >! csr_waddr_i [31:0] $end
$var wire 32 =! csr_rdata_i [31:0] $end
$var wire 32 ?! op1_i [31:0] $end
$var wire 32 @! op2_i [31:0] $end
$var wire 32 A! op1_jump_i [31:0] $end
$var wire 32 B! op2_jump_i [31:0] $end
$var wire 1 C! is_mac_i $end
$var wire 32 +! acc_out_i [31:0] $end
$var wire 3 s! hold_flag_i [2:0] $end
$var wire 1 U! is_mac_o $end
$var wire 32 ,! acc_out_o [31:0] $end
$var wire 1 D! is_macl_i $end
$var wire 1 V! is_macl_o $end
$var wire 1 7" is_mac_config_i $end
$var wire 1 8" is_mac_config_o $end
$var wire 1 E! is_mov_avg_i $end
$var wire 1 9" is_mov_avg_o $end
$var wire 1 :" is_pow_est_i $end
$var wire 1 ;" is_pow_est_o $end
$var wire 32 Q! op1_o [31:0] $end
$var wire 32 R! op2_o [31:0] $end
$var wire 32 S! op1_jump_o [31:0] $end
$var wire 32 T! op2_jump_o [31:0] $end
$var wire 32 G! inst_o [31:0] $end
$var wire 32 H! inst_addr_o [31:0] $end
$var wire 1 I! reg_we_o $end
$var wire 5 J! reg_waddr_o [4:0] $end
$var wire 32 K! reg1_rdata_o [31:0] $end
$var wire 32 L! reg2_rdata_o [31:0] $end
$var wire 32 M! reg3_rdata_o [31:0] $end
$var wire 1 N! csr_we_o $end
$var wire 32 O! csr_waddr_o [31:0] $end
$var wire 32 P! csr_rdata_o [31:0] $end
$var wire 1 L# hold_en $end
$var wire 32 M# inst [31:0] $end
$var wire 32 N# inst_addr [31:0] $end
$var wire 1 O# reg_we $end
$var wire 1 P# is_mac $end
$var wire 32 Q# acc_out [31:0] $end
$var wire 1 R# is_macl $end
$var wire 1 S# is_mac_config $end
$var wire 1 T# is_mov_avg $end
$var wire 1 U# is_pow_est $end
$var wire 5 V# reg_waddr [4:0] $end
$var wire 32 W# reg1_rdata [31:0] $end
$var wire 32 X# reg2_rdata [31:0] $end
$var wire 32 Y# reg3_rdata [31:0] $end
$var wire 1 Z# csr_we $end
$var wire 32 [# csr_waddr [31:0] $end
$var wire 32 \# csr_rdata [31:0] $end
$var wire 32 ]# op1 [31:0] $end
$var wire 32 ^# op2 [31:0] $end
$var wire 32 _# op1_jump [31:0] $end
$var wire 32 `# op2_jump [31:0] $end
$scope module inst_ff $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 1 L# hold_en $end
$var wire 32 a# def_val [31:0] $end
$var wire 32 4! din [31:0] $end
$var wire 32 M# qout [31:0] $end
$var reg 32 b# qout_r [31:0] $end
$upscope $end
$scope module inst_addr_ff $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 1 L# hold_en $end
$var wire 32 c# def_val [31:0] $end
$var wire 32 5! din [31:0] $end
$var wire 32 N# qout [31:0] $end
$var reg 32 d# qout_r [31:0] $end
$upscope $end
$scope module reg_we_ff $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 1 L# hold_en $end
$var wire 1 e# def_val [0:0] $end
$var wire 1 9! din [0:0] $end
$var wire 1 O# qout [0:0] $end
$var reg 1 f# qout_r [0:0] $end
$upscope $end
$scope module is_mac_ff $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 1 L# hold_en $end
$var wire 1 e# def_val [0:0] $end
$var wire 1 C! din [0:0] $end
$var wire 1 P# qout [0:0] $end
$var reg 1 g# qout_r [0:0] $end
$upscope $end
$scope module acc_out_ff $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 1 L# hold_en $end
$var wire 32 c# def_val [31:0] $end
$var wire 32 +! din [31:0] $end
$var wire 32 Q# qout [31:0] $end
$var reg 32 h# qout_r [31:0] $end
$upscope $end
$scope module is_macl_ff $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 1 L# hold_en $end
$var wire 1 e# def_val [0:0] $end
$var wire 1 D! din [0:0] $end
$var wire 1 R# qout [0:0] $end
$var reg 1 i# qout_r [0:0] $end
$upscope $end
$scope module is_mac_conf_ff $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 1 L# hold_en $end
$var wire 1 e# def_val [0:0] $end
$var wire 1 7" din [0:0] $end
$var wire 1 S# qout [0:0] $end
$var reg 1 j# qout_r [0:0] $end
$upscope $end
$scope module is_mov_avg_ff $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 1 L# hold_en $end
$var wire 1 e# def_val [0:0] $end
$var wire 1 E! din [0:0] $end
$var wire 1 9" qout [0:0] $end
$var reg 1 k# qout_r [0:0] $end
$upscope $end
$scope module is_pow_est_ff $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 1 L# hold_en $end
$var wire 1 e# def_val [0:0] $end
$var wire 1 :" din [0:0] $end
$var wire 1 ;" qout [0:0] $end
$var reg 1 l# qout_r [0:0] $end
$upscope $end
$scope module reg_waddr_ff $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 1 L# hold_en $end
$var wire 5 m# def_val [4:0] $end
$var wire 5 :! din [4:0] $end
$var wire 5 V# qout [4:0] $end
$var reg 5 n# qout_r [4:0] $end
$upscope $end
$scope module reg1_rdata_ff $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 1 L# hold_en $end
$var wire 32 c# def_val [31:0] $end
$var wire 32 6! din [31:0] $end
$var wire 32 W# qout [31:0] $end
$var reg 32 o# qout_r [31:0] $end
$upscope $end
$scope module reg2_rdata_ff $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 1 L# hold_en $end
$var wire 32 c# def_val [31:0] $end
$var wire 32 7! din [31:0] $end
$var wire 32 X# qout [31:0] $end
$var reg 32 p# qout_r [31:0] $end
$upscope $end
$scope module reg3_rdata_ff $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 1 L# hold_en $end
$var wire 32 c# def_val [31:0] $end
$var wire 32 8! din [31:0] $end
$var wire 32 Y# qout [31:0] $end
$var reg 32 q# qout_r [31:0] $end
$upscope $end
$scope module csr_we_ff $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 1 L# hold_en $end
$var wire 1 e# def_val [0:0] $end
$var wire 1 <! din [0:0] $end
$var wire 1 Z# qout [0:0] $end
$var reg 1 r# qout_r [0:0] $end
$upscope $end
$scope module csr_waddr_ff $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 1 L# hold_en $end
$var wire 32 c# def_val [31:0] $end
$var wire 32 >! din [31:0] $end
$var wire 32 [# qout [31:0] $end
$var reg 32 s# qout_r [31:0] $end
$upscope $end
$scope module csr_rdata_ff $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 1 L# hold_en $end
$var wire 32 c# def_val [31:0] $end
$var wire 32 =! din [31:0] $end
$var wire 32 \# qout [31:0] $end
$var reg 32 t# qout_r [31:0] $end
$upscope $end
$scope module op1_ff $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 1 L# hold_en $end
$var wire 32 c# def_val [31:0] $end
$var wire 32 ?! din [31:0] $end
$var wire 32 ]# qout [31:0] $end
$var reg 32 u# qout_r [31:0] $end
$upscope $end
$scope module op2_ff $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 1 L# hold_en $end
$var wire 32 c# def_val [31:0] $end
$var wire 32 @! din [31:0] $end
$var wire 32 ^# qout [31:0] $end
$var reg 32 v# qout_r [31:0] $end
$upscope $end
$scope module op1_jump_ff $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 1 L# hold_en $end
$var wire 32 c# def_val [31:0] $end
$var wire 32 A! din [31:0] $end
$var wire 32 _# qout [31:0] $end
$var reg 32 w# qout_r [31:0] $end
$upscope $end
$scope module op2_jump_ff $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 1 L# hold_en $end
$var wire 32 c# def_val [31:0] $end
$var wire 32 B! din [31:0] $end
$var wire 32 `# qout [31:0] $end
$var reg 32 x# qout_r [31:0] $end
$upscope $end
$upscope $end
$scope module u_ex $end
$var wire 1 A rst $end
$var wire 1 U! is_mac_i $end
$var wire 1 8" is_mac_config_i $end
$var wire 1 <" is_mac_config_o $end
$var wire 32 K! count_wdata_i [31:0] $end
$var wire 32 =" count_wdata_o [31:0] $end
$var wire 32 G! inst_i [31:0] $end
$var wire 32 H! inst_addr_i [31:0] $end
$var wire 1 I! reg_we_i $end
$var wire 5 J! reg_waddr_i [4:0] $end
$var wire 32 K! reg1_rdata_i [31:0] $end
$var wire 32 L! reg2_rdata_i [31:0] $end
$var wire 1 N! csr_we_i $end
$var wire 32 O! csr_waddr_i [31:0] $end
$var wire 32 P! csr_rdata_i [31:0] $end
$var wire 1 !" int_assert_i $end
$var wire 32 ~! int_addr_i [31:0] $end
$var wire 32 Q! op1_i [31:0] $end
$var wire 32 R! op2_i [31:0] $end
$var wire 32 S! op1_jump_i [31:0] $end
$var wire 32 T! op2_jump_i [31:0] $end
$var wire 32 +! acc_out [31:0] $end
$var wire 32 '" mac_acc_out [31:0] $end
$var wire 1 #" mac_load_done $end
$var wire 1 $" mac_load_busy $end
$var wire 5 (" mac_reg_waddr_i [4:0] $end
$var reg 5 y# mac_reg_waddr_o [4:0] $end
$var reg 5 z# custom_reg_waddr_o [4:0] $end
$var wire 5 /" custom_reg_waddr_i [4:0] $end
$var wire 1 *" exec_avg_done $end
$var wire 1 +" exec_avg_busy $end
$var wire 32 ." exec_avg_out [31:0] $end
$var wire 1 1" exec_power_done $end
$var wire 1 2" exec_power_busy $end
$var wire 32 3" exec_power_out [31:0] $end
$var wire 5 4" power_reg_waddr_i [4:0] $end
$var wire 32 S mem_rdata_i [31:0] $end
$var wire 1 w! div_ready_i $end
$var wire 32 v! div_result_i [31:0] $end
$var wire 1 x! div_busy_i $end
$var wire 5 y! div_reg_waddr_i [4:0] $end
$var reg 32 {# mem_wdata_o [31:0] $end
$var reg 32 |# mem_raddr_o [31:0] $end
$var reg 32 }# mem_waddr_o [31:0] $end
$var wire 1 Z! mem_we_o $end
$var wire 1 [! mem_req_o $end
$var wire 32 \! reg_wdata_o [31:0] $end
$var wire 1 ]! reg_we_o $end
$var wire 5 ^! reg_waddr_o [4:0] $end
$var reg 32 ~# csr_wdata_o [31:0] $end
$var wire 1 h! csr_we_o $end
$var wire 32 i! csr_waddr_o [31:0] $end
$var wire 1 b! div_start_o $end
$var reg 32 !$ div_dividend_o [31:0] $end
$var reg 32 "$ div_divisor_o [31:0] $end
$var reg 3 #$ div_op_o [2:0] $end
$var reg 5 $$ div_reg_waddr_o [4:0] $end
$var wire 1 _! hold_flag_o $end
$var wire 1 `! jump_flag_o $end
$var wire 32 a! jump_addr_o [31:0] $end
$var wire 2 %$ mem_raddr_index [1:0] $end
$var wire 2 &$ mem_waddr_index [1:0] $end
$var wire 64 '$ mul_temp [63:0] $end
$var wire 64 ($ mul_temp_invert [63:0] $end
$var wire 32 )$ sr_shift [31:0] $end
$var wire 32 *$ sri_shift [31:0] $end
$var wire 32 +$ sr_shift_mask [31:0] $end
$var wire 32 ,$ sri_shift_mask [31:0] $end
$var wire 32 -$ op1_add_op2_res [31:0] $end
$var wire 32 .$ op1_jump_add_op2_jump_res [31:0] $end
$var wire 32 /$ reg1_data_invert [31:0] $end
$var wire 32 0$ reg2_data_invert [31:0] $end
$var wire 1 1$ op1_ge_op2_signed $end
$var wire 1 2$ op1_ge_op2_unsigned $end
$var wire 1 3$ op1_eq_op2 $end
$var reg 32 4$ mul_op1 [31:0] $end
$var reg 32 5$ mul_op2 [31:0] $end
$var wire 7 6$ opcode [6:0] $end
$var wire 3 7$ funct3 [2:0] $end
$var wire 7 8$ funct7 [6:0] $end
$var wire 5 9$ rd [4:0] $end
$var wire 5 :$ uimm [4:0] $end
$var reg 32 ;$ reg_wdata [31:0] $end
$var reg 1 <$ reg_we $end
$var reg 5 =$ reg_waddr [4:0] $end
$var reg 32 >$ div_wdata [31:0] $end
$var reg 1 ?$ div_we $end
$var reg 5 @$ div_waddr [4:0] $end
$var reg 1 A$ div_hold_flag $end
$var reg 1 B$ div_jump_flag $end
$var reg 32 C$ div_jump_addr [31:0] $end
$var reg 1 D$ hold_flag $end
$var reg 1 E$ jump_flag $end
$var reg 32 F$ jump_addr [31:0] $end
$var reg 1 G$ mem_we $end
$var reg 1 H$ mem_req $end
$var reg 1 I$ div_start $end
$var wire 1 J$ valid_mac $end
$var reg 1 K$ mac_hold $end
$var reg 1 L$ mac_jump_flag $end
$var reg 32 M$ mac_jump_addr [31:0] $end
$var reg 1 N$ mac_we $end
$var reg 5 O$ mac_waddr [4:0] $end
$var reg 32 P$ mac_wdata [31:0] $end
$var reg 1 Q$ mac_config $end
$var reg 32 R$ mreg_wdata [31:0] $end
$var reg 1 S$ custom_hold $end
$var reg 1 T$ custom_jump_flag $end
$var reg 32 U$ custom_jump_addr [31:0] $end
$var reg 1 V$ custom_we $end
$var reg 5 W$ custom_waddr [4:0] $end
$var reg 32 X$ custom_wdata [31:0] $end
$upscope $end
$scope module u_div $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 32 c! dividend_i [31:0] $end
$var wire 32 d! divisor_i [31:0] $end
$var wire 1 b! start_i $end
$var wire 3 e! op_i [2:0] $end
$var wire 5 f! reg_waddr_i [4:0] $end
$var reg 32 Y$ result_o [31:0] $end
$var reg 1 Z$ ready_o $end
$var reg 1 [$ busy_o $end
$var reg 5 \$ reg_waddr_o [4:0] $end
$var reg 32 ]$ dividend_r [31:0] $end
$var reg 32 ^$ divisor_r [31:0] $end
$var reg 3 _$ op_r [2:0] $end
$var reg 4 `$ state [3:0] $end
$var reg 32 a$ count [31:0] $end
$var reg 32 b$ div_result [31:0] $end
$var reg 32 c$ div_remain [31:0] $end
$var reg 32 d$ minuend [31:0] $end
$var reg 1 e$ invert_result $end
$var wire 1 f$ op_div $end
$var wire 1 g$ op_divu $end
$var wire 1 h$ op_rem $end
$var wire 1 i$ op_remu $end
$var wire 32 j$ dividend_invert [31:0] $end
$var wire 32 k$ divisor_invert [31:0] $end
$var wire 1 l$ minuend_ge_divisor $end
$var wire 32 m$ minuend_sub_res [31:0] $end
$var wire 32 n$ div_result_tmp [31:0] $end
$var wire 32 o$ minuend_tmp [31:0] $end
$upscope $end
$scope module u_clint $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 8 0! int_flag_i [7:0] $end
$var wire 32 4! inst_i [31:0] $end
$var wire 32 5! inst_addr_i [31:0] $end
$var wire 1 `! jump_flag_i $end
$var wire 32 a! jump_addr_i [31:0] $end
$var wire 1 b! div_started_i $end
$var wire 3 s! hold_flag_i [2:0] $end
$var wire 32 n! data_i [31:0] $end
$var wire 32 p! csr_mtvec [31:0] $end
$var wire 32 q! csr_mepc [31:0] $end
$var wire 32 r! csr_mstatus [31:0] $end
$var wire 1 o! global_int_en_i $end
$var wire 1 "" hold_flag_o $end
$var reg 1 p$ we_o $end
$var reg 32 q$ waddr_o [31:0] $end
$var reg 32 r$ raddr_o [31:0] $end
$var reg 32 s$ data_o [31:0] $end
$var reg 32 t$ int_addr_o [31:0] $end
$var reg 1 u$ int_assert_o $end
$var reg 4 v$ int_state [3:0] $end
$var reg 5 w$ csr_state [4:0] $end
$var reg 32 x$ inst_addr [31:0] $end
$var reg 32 y$ cause [31:0] $end
$upscope $end
$upscope $end
$scope module u_rom $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 1 h we_i $end
$var wire 32 e addr_i [31:0] $end
$var wire 32 f data_i [31:0] $end
$var reg 32 z$ data_o [31:0] $end
$upscope $end
$scope module u_ram $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 1 l we_i $end
$var wire 32 i addr_i [31:0] $end
$var wire 32 j data_i [31:0] $end
$var reg 32 {$ data_o [31:0] $end
$upscope $end
$scope module timer_0 $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 32 n data_i [31:0] $end
$var wire 32 m addr_i [31:0] $end
$var wire 1 p we_i $end
$var reg 32 |$ data_o [31:0] $end
$var wire 1 '! int_sig_o $end
$var reg 32 }$ timer_ctrl [31:0] $end
$var reg 32 ~$ timer_count [31:0] $end
$var reg 32 !% timer_value [31:0] $end
$upscope $end
$scope module uart_0 $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 1 t we_i $end
$var wire 32 q addr_i [31:0] $end
$var wire 32 r data_i [31:0] $end
$var reg 32 "% data_o [31:0] $end
$var wire 1 F tx_pin $end
$var wire 1 G rx_pin $end
$var reg 1 #% tx_data_valid $end
$var reg 1 $% tx_data_ready $end
$var reg 4 %% state [3:0] $end
$var reg 16 &% cycle_cnt [15:0] $end
$var reg 4 '% bit_cnt [3:0] $end
$var reg 8 (% tx_data [7:0] $end
$var reg 1 )% tx_reg $end
$var reg 1 *% rx_q0 $end
$var reg 1 +% rx_q1 $end
$var wire 1 ,% rx_negedge $end
$var reg 1 -% rx_start $end
$var reg 4 .% rx_clk_edge_cnt [3:0] $end
$var reg 1 /% rx_clk_edge_level $end
$var reg 1 0% rx_done $end
$var reg 16 1% rx_clk_cnt [15:0] $end
$var reg 16 2% rx_div_cnt [15:0] $end
$var reg 8 3% rx_data [7:0] $end
$var reg 1 4% rx_over $end
$var reg 32 5% uart_ctrl [31:0] $end
$var reg 32 6% uart_status [31:0] $end
$var reg 32 7% uart_baud [31:0] $end
$var reg 32 8% uart_rx [31:0] $end
$upscope $end
$scope module gpio_0 $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 1 x we_i $end
$var wire 32 u addr_i [31:0] $end
$var wire 32 v data_i [31:0] $end
$var reg 32 9% data_o [31:0] $end
$var wire 2 (! io_pin_i [1:0] $end
$var wire 32 )! reg_ctrl [31:0] $end
$var wire 32 *! reg_data [31:0] $end
$var reg 32 :% gpio_ctrl [31:0] $end
$var reg 32 ;% gpio_data [31:0] $end
$upscope $end
$scope module spi_0 $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 32 z data_i [31:0] $end
$var wire 32 y addr_i [31:0] $end
$var wire 1 | we_i $end
$var reg 32 <% data_o [31:0] $end
$var reg 1 =% spi_mosi $end
$var wire 1 M spi_miso $end
$var wire 1 O spi_ss $end
$var reg 1 >% spi_clk $end
$var reg 32 ?% spi_ctrl [31:0] $end
$var reg 32 @% spi_data [31:0] $end
$var reg 32 A% spi_status [31:0] $end
$var reg 9 B% clk_cnt [8:0] $end
$var reg 1 C% en $end
$var reg 5 D% spi_clk_edge_cnt [4:0] $end
$var reg 1 E% spi_clk_edge_level $end
$var reg 8 F% rdata [7:0] $end
$var reg 1 G% done $end
$var reg 4 H% bit_index [3:0] $end
$var wire 9 I% div_cnt [8:0] $end
$upscope $end
$scope module u_rib $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 32 Q m0_addr_i [31:0] $end
$var wire 32 R m0_data_i [31:0] $end
$var reg 32 J% m0_data_o [31:0] $end
$var wire 1 T m0_req_i $end
$var wire 1 U m0_we_i $end
$var wire 32 V m1_addr_i [31:0] $end
$var wire 32 K% m1_data_i [31:0] $end
$var reg 32 L% m1_data_o [31:0] $end
$var wire 1 M% m1_req_i $end
$var wire 1 N% m1_we_i $end
$var wire 32 [ m2_addr_i [31:0] $end
$var wire 32 \ m2_data_i [31:0] $end
$var reg 32 O% m2_data_o [31:0] $end
$var wire 1 ^ m2_req_i $end
$var wire 1 _ m2_we_i $end
$var wire 32 ` m3_addr_i [31:0] $end
$var wire 32 a m3_data_i [31:0] $end
$var reg 32 P% m3_data_o [31:0] $end
$var wire 1 c m3_req_i $end
$var wire 1 d m3_we_i $end
$var reg 32 Q% s0_addr_o [31:0] $end
$var reg 32 R% s0_data_o [31:0] $end
$var wire 32 g s0_data_i [31:0] $end
$var reg 1 S% s0_we_o $end
$var reg 32 T% s1_addr_o [31:0] $end
$var reg 32 U% s1_data_o [31:0] $end
$var wire 32 k s1_data_i [31:0] $end
$var reg 1 V% s1_we_o $end
$var reg 32 W% s2_addr_o [31:0] $end
$var reg 32 X% s2_data_o [31:0] $end
$var wire 32 o s2_data_i [31:0] $end
$var reg 1 Y% s2_we_o $end
$var reg 32 Z% s3_addr_o [31:0] $end
$var reg 32 [% s3_data_o [31:0] $end
$var wire 32 s s3_data_i [31:0] $end
$var reg 1 \% s3_we_o $end
$var reg 32 ]% s4_addr_o [31:0] $end
$var reg 32 ^% s4_data_o [31:0] $end
$var wire 32 w s4_data_i [31:0] $end
$var reg 1 _% s4_we_o $end
$var reg 32 `% s5_addr_o [31:0] $end
$var reg 32 a% s5_data_o [31:0] $end
$var wire 32 { s5_data_i [31:0] $end
$var reg 1 b% s5_we_o $end
$var reg 1 c% hold_flag_o $end
$var wire 4 d% req [3:0] $end
$var reg 2 e% grant [1:0] $end
$upscope $end
$scope module u_uart_debug $end
$var wire 1 @ clk $end
$var wire 1 A rst $end
$var wire 1 E debug_en_i $end
$var wire 1 c req_o $end
$var reg 1 f% mem_we_o $end
$var reg 32 g% mem_addr_o [31:0] $end
$var reg 32 h% mem_wdata_o [31:0] $end
$var wire 32 b mem_rdata_i [31:0] $end
$var reg 14 i% state [13:0] $end
$var reg 8 j% rec_bytes_index [7:0] $end
$var reg 8 k% need_to_rec_bytes [7:0] $end
$var reg 16 l% remain_packet_count [15:0] $end
$var reg 32 m% fw_file_size [31:0] $end
$var reg 32 n% write_mem_addr [31:0] $end
$var reg 32 o% write_mem_data [31:0] $end
$var reg 8 p% write_mem_byte_index0 [7:0] $end
$var reg 8 q% write_mem_byte_index1 [7:0] $end
$var reg 8 r% write_mem_byte_index2 [7:0] $end
$var reg 8 s% write_mem_byte_index3 [7:0] $end
$var reg 16 t% crc_result [15:0] $end
$var reg 4 u% crc_bit_index [3:0] $end
$var reg 8 v% crc_byte_index [7:0] $end
$upscope $end
$scope module u_jtag_top $end
$var wire 1 @ clk $end
$var wire 1 A jtag_rst_n $end
$var wire 1 I jtag_pin_TCK $end
$var wire 1 J jtag_pin_TMS $end
$var wire 1 K jtag_pin_TDI $end
$var wire 1 L jtag_pin_TDO $end
$var wire 1 $! reg_we_o $end
$var wire 5 "! reg_addr_o [4:0] $end
$var wire 32 #! reg_wdata_o [31:0] $end
$var wire 32 %! reg_rdata_i [31:0] $end
$var wire 1 _ mem_we_o $end
$var wire 32 [ mem_addr_o [31:0] $end
$var wire 32 \ mem_wdata_o [31:0] $end
$var wire 32 ] mem_rdata_i [31:0] $end
$var wire 1 ^ op_req_o $end
$var wire 1 ~ halt_req_o $end
$var wire 1 !! reset_req_o $end
$var wire 1 w% dtm_ack_o $end
$var wire 1 x% dtm_req_valid_o $end
$var wire 40 y% dtm_req_data_o [39:0] $end
$var wire 1 z% dm_ack_o $end
$var wire 40 {% dm_resp_data_o [39:0] $end
$var wire 1 |% dm_resp_valid_o $end
$var wire 1 }% dm_op_req_o $end
$var wire 1 ~% dm_halt_req_o $end
$var wire 1 !& dm_reset_req_o $end
$scope module u_jtag_driver $end
$var wire 1 A rst_n $end
$var wire 1 I jtag_TCK $end
$var wire 1 K jtag_TDI $end
$var wire 1 J jtag_TMS $end
$var reg 1 "& jtag_TDO $end
$var wire 1 |% dm_resp_i $end
$var wire 40 {% dm_resp_data_i [39:0] $end
$var wire 1 w% dtm_ack_o $end
$var wire 1 z% dm_ack_i $end
$var wire 1 x% dtm_req_valid_o $end
$var wire 40 y% dtm_req_data_o [39:0] $end
$var reg 5 #& ir_reg [4:0] $end
$var reg 40 $& shift_reg [39:0] $end
$var reg 4 %& jtag_state [3:0] $end
$var wire 1 && is_busy $end
$var reg 1 '& sticky_busy $end
$var reg 1 (& dtm_req_valid $end
$var reg 40 )& dtm_req_data [39:0] $end
$var reg 40 *& dm_resp_data [39:0] $end
$var reg 1 +& dm_is_busy $end
$var wire 6 ,& addr_bits [5:0] $end
$var wire 40 -& busy_response [39:0] $end
$var wire 40 .& none_busy_response [39:0] $end
$var wire 32 /& idcode [31:0] $end
$var wire 32 0& dtmcs [31:0] $end
$var wire 2 1& dmi_stat [1:0] $end
$var wire 1 2& dtm_reset $end
$var wire 1 3& tx_idle $end
$var wire 1 4& rx_valid $end
$var wire 40 5& rx_data [39:0] $end
$var wire 1 6& tx_valid $end
$var wire 40 7& tx_data [39:0] $end
$scope module tx $end
$var wire 1 I clk $end
$var wire 1 A rst_n $end
$var wire 1 z% ack_i $end
$var wire 1 6& req_i $end
$var wire 40 7& req_data_i [39:0] $end
$var wire 1 3& idle_o $end
$var wire 1 x% req_o $end
$var wire 40 y% req_data_o [39:0] $end
$var reg 3 8& state [2:0] $end
$var reg 3 9& state_next [2:0] $end
$var reg 1 :& ack_d $end
$var reg 1 ;& ack $end
$var reg 1 <& req $end
$var reg 40 =& req_data [39:0] $end
$var reg 1 >& idle $end
$upscope $end
$scope module rx $end
$var wire 1 I clk $end
$var wire 1 A rst_n $end
$var wire 1 |% req_i $end
$var wire 40 {% req_data_i [39:0] $end
$var wire 1 w% ack_o $end
$var wire 40 5& recv_data_o [39:0] $end
$var wire 1 4& recv_rdy_o $end
$var reg 2 ?& state [1:0] $end
$var reg 2 @& state_next [1:0] $end
$var reg 1 A& req_d $end
$var reg 1 B& req $end
$var reg 40 C& recv_data [39:0] $end
$var reg 1 D& recv_rdy $end
$var reg 1 E& ack $end
$upscope $end
$upscope $end
$scope module u_jtag_dm $end
$var wire 1 @ clk $end
$var wire 1 A rst_n $end
$var wire 1 z% dm_ack_o $end
$var wire 1 x% dtm_req_valid_i $end
$var wire 40 y% dtm_req_data_i [39:0] $end
$var wire 1 w% dtm_ack_i $end
$var wire 40 {% dm_resp_data_o [39:0] $end
$var wire 1 |% dm_resp_valid_o $end
$var wire 1 $! dm_reg_we_o $end
$var wire 5 "! dm_reg_addr_o [4:0] $end
$var wire 32 #! dm_reg_wdata_o [31:0] $end
$var wire 32 %! dm_reg_rdata_i [31:0] $end
$var wire 1 _ dm_mem_we_o $end
$var wire 32 [ dm_mem_addr_o [31:0] $end
$var wire 32 \ dm_mem_wdata_o [31:0] $end
$var wire 32 ] dm_mem_rdata_i [31:0] $end
$var wire 1 ^ dm_op_req_o $end
$var wire 1 ~ dm_halt_req_o $end
$var wire 1 !! dm_reset_req_o $end
$var reg 32 F& dcsr [31:0] $end
$var reg 32 G& dmstatus [31:0] $end
$var reg 32 H& dmcontrol [31:0] $end
$var reg 32 I& hartinfo [31:0] $end
$var reg 32 J& abstractcs [31:0] $end
$var reg 32 K& data0 [31:0] $end
$var reg 32 L& sbcs [31:0] $end
$var reg 32 M& sbaddress0 [31:0] $end
$var reg 32 N& sbdata0 [31:0] $end
$var reg 32 O& command [31:0] $end
$var reg 32 P& read_data [31:0] $end
$var reg 1 Q& dm_reg_we $end
$var reg 5 R& dm_reg_addr [4:0] $end
$var reg 32 S& dm_reg_wdata [31:0] $end
$var reg 1 T& dm_mem_we $end
$var reg 32 U& dm_mem_addr [31:0] $end
$var reg 32 V& dm_mem_wdata [31:0] $end
$var reg 1 W& dm_halt_req $end
$var reg 1 X& dm_reset_req $end
$var reg 1 Y& need_resp $end
$var reg 1 Z& is_read_reg $end
$var wire 1 [& rx_valid $end
$var wire 40 \& rx_data [39:0] $end
$var wire 32 ]& sbaddress0_next [31:0] $end
$var wire 40 ^& dm_resp_data [39:0] $end
$var wire 2 _& op [1:0] $end
$var wire 32 `& data [31:0] $end
$var wire 6 a& address [5:0] $end
$var wire 1 b& read_dmstatus $end
$var wire 1 c& tx_idle $end
$scope module tx $end
$var wire 1 @ clk $end
$var wire 1 A rst_n $end
$var wire 1 w% ack_i $end
$var wire 1 d& req_i $end
$var wire 40 ^& req_data_i [39:0] $end
$var wire 1 c& idle_o $end
$var wire 1 |% req_o $end
$var wire 40 {% req_data_o [39:0] $end
$var reg 3 e& state [2:0] $end
$var reg 3 f& state_next [2:0] $end
$var reg 1 g& ack_d $end
$var reg 1 h& ack $end
$var reg 1 i& req $end
$var reg 40 j& req_data [39:0] $end
$var reg 1 k& idle $end
$upscope $end
$scope module rx $end
$var wire 1 @ clk $end
$var wire 1 A rst_n $end
$var wire 1 x% req_i $end
$var wire 40 y% req_data_i [39:0] $end
$var wire 1 z% ack_o $end
$var wire 40 \& recv_data_o [39:0] $end
$var wire 1 [& recv_rdy_o $end
$var reg 2 l& state [1:0] $end
$var reg 2 m& state_next [1:0] $end
$var reg 1 n& req_d $end
$var reg 1 o& req $end
$var reg 40 p& recv_data [39:0] $end
$var reg 1 q& recv_rdy $end
$var reg 1 r& ack $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end

#0
$dumpvars
0!
0!!
x!"
bx !#
bx !$
bx !%
z!&
0"
b0 "!
x""
bx "#
bx "$
b0 "%
x"&
b1 #
b0 #!
x#"
bx ##
bx #$
x#%
bx #&
bx $
0$!
x$"
0$#
bx $$
x$%
bx $&
bx %
b0 %!
bx %"
bx %#
bx %$
bx %%
b0 %&
x&
b0x &!
x&"
bx &#
bx &$
bx &%
0&&
bx '
x'!
bx '"
bx '#
bx '$
bx '%
0'&
bx (
bx (!
bx ("
b1 (#
bx ($
bx (%
0(&
bx )
bx )!
bx )"
bx )#
bx )$
x)%
b0 )&
bx *
bx *!
x*"
b0 *#
bx *$
x*%
b0 *&
b1 +
bz +!
x+"
bx +#
bx +$
x+%
0+&
bx ,
bx ,!
bx ,"
b0 ,#
bx ,$
x,%
b110 ,&
bx -
bx -!
x-"
bx -#
bx -$
x-%
b11 -&
x.
bx .!
bx ."
b0 .#
bx .$
bx .%
b0 .&
bx /
bx /!
bx /"
b0 /#
bx /$
x/%
b11110001000000000101001101111 /&
b0 0
bx 0!
bx 0"
bx 0#
bx 0$
x0%
b101000001100001 0&
b0 1
b0 1!
x1"
b0 1#
x1$
bx 1%
b0 1&
bx 2
b0 2!
x2"
b0 2#
x2$
bx 2%
x2&
bx 3
bx 3!
bx 3"
b0 3#
x3$
bx 3%
13&
bx 4
bx 4!
bx 4"
b0 4#
bx 4$
x4%
04&
bx 5
bx 5!
x5"
b0 5#
bx 5$
bx 5%
b0 5&
x6
b0 6!
bx 6"
bx 6#
bx 6$
bx 6%
06&
x7
b0 7!
07"
bx 7#
bx 7$
bx 7%
b0 7&
x8
bx 8!
x8"
b0 8#
bx 8$
bx 8%
b1 8&
x9
09!
x9"
b0 9#
bx 9$
b0 9%
b1 9&
bx :
b0 :!
0:"
bx :#
bx :$
bx :%
0:&
bx ;
b0 ;!
x;"
0;#
b0 ;$
bx ;%
0;&
bx <
0<!
x<"
b0 <#
x<$
b0 <%
0<&
bx =
b0 =!
bx ="
0=#
bx =$
x=%
b0 =&
bx >
b0 >!
bx >"
b0 >#
bx >$
x>%
1>&
bx ?
b0 ?!
b0 ?"
b0 ?#
x?$
bx ?%
b1 ?&
0@
b0 @!
bx @"
0@#
bx @$
bx @%
b1 @&
0A
b0 A!
bx A"
0A#
xA$
bx A%
0A&
xB
b0 B!
xB"
0B#
xB$
bx B%
0B&
xC
0C!
xC"
0C#
bx C$
xC%
b0 C&
1D
0D!
bx D"
0D#
0D$
bx D%
0D&
0E
0E!
bx E"
bx E#
0E$
xE%
0E&
xF
zF!
bx F"
bx F#
b0 F$
bx F%
b0 F&
zG
bx G!
bx G"
bx G#
0G$
xG%
b10000110000110010000010 G&
bx H
bx H!
xH"
bx H#
0H$
bx H%
b0 H&
zI
xI!
xI"
bx I#
xI$
b0xxxxxxxx I%
b0 I&
zJ
bx J!
xJ"
bx J#
zJ$
b0 J%
b1000000000000000000000011 J&
zK
bx K!
bx K"
bx K#
xK$
b0 K%
b0 K&
xL
bx L!
bx L"
0L#
xL$
b1 L%
b100000000001000000010000000100 L&
zM
bx M!
bx M"
bx M#
bx M$
1M%
b0 M&
xN
xN!
bx N"
bx N#
xN$
0N%
b0 N&
xO
bx O!
bx O"
xO#
bx O$
b0 O%
b0 O&
xP
bx P!
bx P"
xP#
bx P$
b0 P%
b0 P&
bx Q
bx Q!
bx Q"
bx Q#
xQ$
b0 Q%
0Q&
b0 R
bx R!
bx R"
xR#
bx R$
b0 R%
b0 R&
b0 S
bx S!
b1000 S"
xS#
xS$
0S%
b0 S&
xT
bx T!
bx T"
zT#
xT$
b0 T%
0T&
0U
xU!
bx U"
zU#
bx U$
b0 U%
b0 U&
bx V
xV!
xV"
bx V#
xV$
0V%
b0 V&
bz W
b0 W!
xW"
bx W#
bx W$
b0 W%
0W&
b1 X
b0 X!
xX"
bx X#
bx X$
b0 X%
0X&
zY
b0 Y!
bx Y"
bx Y#
bx Y$
0Y%
0Y&
zZ
0Z!
bx Z"
xZ#
xZ$
b0 Z%
0Z&
b0 [
0[!
bx ["
bx [#
x[$
b0 [%
0[&
b0 \
bx \!
bx \"
bx \#
bx \$
0\%
b0 \&
b0 ]
x]!
bx ]"
bx ]#
bx ]$
b0 ]%
b100 ]&
0^
bx ^!
bx ^"
bx ^#
bx ^$
b0 ^%
b0 ^&
0_
x_!
bx _"
bx _#
bx _$
0_%
b0 _&
bx `
x`!
bx `"
bx `#
bx `$
b0 `%
b0 `&
bx a
bx a!
bx a"
b1 a#
bx a$
b0 a%
b0 a&
b0 b
xb!
bx b"
bx b#
bx b$
0b%
0b&
0c
bx c!
bx c"
b0 c#
bx c$
0c%
1c&
xd
bx d!
xd"
bx d#
bx d$
b1x d%
0d&
b0 e
bx e!
xe"
0e#
xe$
b1 e%
b1 e&
b0 f
bx f!
xf"
xf#
xf$
xf%
b1 f&
b0 g
b0 g!
bx g"
xg#
xg$
bx g%
0g&
0h
xh!
bx h"
bx h#
xh$
bx h%
0h&
b0 i
bx i!
bx i"
xi#
xi$
bx i%
0i&
b0 j
b0 j!
bx j"
xj#
bx j$
bx j%
b0 j&
b0 k
b0 k!
bx k"
xk#
bx k$
bx k%
1k&
0l
bx l!
bx l"
xl#
xl$
bx l%
b1 l&
b0 m
b0 m!
bx m"
b0 m#
bx m$
bx m%
b1 m&
b0 n
bx n!
bx n"
bx n#
bx n$
bx n%
0n&
b0 o
xo!
bx o"
bx o#
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx o$
bx o%
0o&
0p
bx p!
bx p"
bx p#
xp$
bx p%
b0 p&
b0 q
bx q!
bx q"
bx q#
bx q$
bx q%
0q&
b0 r
bx r!
b0 r"
xr#
bx r$
bx r%
0r&
b0 s
b0 s!
xs"
bx s#
bx s$
bx s%
0t
xt!
bx t"
bx t#
bx t$
bx t%
b0 u
bx u!
b0 u"
bx u#
xu$
bx u%
b0 v
bx v!
b0 v"
bx v#
b1 v$
bx v%
b0 w
xw!
bx w"
bx w#
bx w$
0w%
0x
xx!
b0 x"
bx x#
bx x$
0x%
b0 y
bx y!
bx y"
bx y#
bx y$
b0 y%
b0 z
xz!
b0 z"
bx z#
b0 z$
0z%
b0 {
bx {!
bx {"
b0 {#
b0 {$
b0 {%
0|
bx |!
bx |"
b0 |#
b0 |$
0|%
0}
bx }!
bx }"
b0 }#
bx }$
z}%
0~
bx ~!
bx ~"
b0 ~#
bx ~$
z~%
$end

#10000
1!
0!"
b0 !#
b0 !$
b0 !%
0""
b0 "#
b0 "$
b0 #
0#"
b0 ##
b0 #$
0#%
b1 $
0$"
b0 $$
0$%
b1 %
b0 %"
b1 %#
b0 %$
b1 %%
0&
b0 &!
0&"
b0 &#
b0 &$
b0 &%
0'!
b0 '"
b0 '#
b0 '$
b0 '%
b0 (
bz (!
b0 ($
b0 )
b0 )!
b0 )"
b1 )#
b0 )$
0)%
b0 *
b0 *!
0*"
b0 *$
0*%
0+"
b0 +#
b11111111111111111111111111111111 +$
0+%
b0 ,
b0 ,!
b0 ,"
b11111111111111111111111111111111 ,$
0,%
b0 -
b0 -!
0-"
b0 -#
b0 -$
0-%
0.
b1 .!
b0 ."
b0 .$
b0 .%
b0 /
b0 /!
b0 /$
0/%
b0 0!
b0 0"
b0 0$
01"
11$
b0 1%
b0 2
02"
12$
b0 2%
b0 3
b0 3"
13$
b0 3%
b0 4
b1 4!
b0 4$
04%
b0 5!
05"
b0 5$
b0 5%
06
b0 6"
b1 6#
b1 6$
b0 6%
07
b0 7#
b0 7$
b110111000 7%
08
08"
b0 8$
b0 8%
09
09"
b0 9$
b0 :$
b0 :%
0;"
b0 ;%
0<$
b0 =$
0=%
b0 >$
0>%
0?$
b0 ?%
1@
b0 @"
b0 @$
b0 @%
b0 A"
0A$
b0 A%
1B
0B"
0B$
b0 B%
1C
0C"
b0 C$
0C%
b0 D%
b1 E#
0E%
0F
b0 F#
b0 F%
b1 G!
b0 G"
b0 G#
0G%
bz H
b0 H!
0H"
b0 H#
b0 H%
0I!
0I"
b0 I#
0I$
b0 I%
b0 J!
0J"
b0 J#
b0 K!
b0 K"
b0 K#
0K$
b0 L!
0L$
b0 L%
b0 M!
b1 M#
b0 M$
0N
0N!
b0 N#
0N$
1O
b0 O!
0O#
b0 O$
0P
b0 P!
0P#
b0 P$
b0 Q
b0 Q!
b0 Q"
b0 Q#
b0 R!
b0 R"
0R#
b0 S!
0S#
0S$
0T
b0 T!
0T$
0U!
b0 U"
b0 U$
b0 V
0V!
0V"
b0 V#
0V$
0W"
b0 W#
b0 W$
b0 X
0X"
b0 X#
b0 X$
b0 Y"
b0 Y#
b0 Y$
0Z#
0Z$
b0 [#
0[$
b0 \!
b0 \#
b0 \$
0]!
b0 ]#
b0 ]$
b0 ^!
b0 ^#
b0 ^$
0_!
b0 _#
b0 _$
b0 `
0`!
b0 `"
b0 `#
b1 `$
b0 a
b0 a!
b0 a"
b0 a$
0b!
b1 b#
b0 b$
b0 c!
b0 c"
b0 c$
0d
b0 d!
0d"
b0 d#
b0 d$
b10 d%
b0 e!
0e"
0e$
b0 f!
0f"
0f#
0f$
0f%
b0 g"
0g#
0g$
b0 g%
0h!
b0 h#
0h$
b0 h%
b0 i!
0i#
0i$
b1 i%
0j#
b0 j$
b0 j%
0k#
b0 k$
b0 k%
0l#
1l$
b0 l%
b0 m"
b0 m$
b0 m%
b0 n!
b0 n"
b0 n#
b1 n$
b0 n%
0o!
b0 o"
b0 o#
b0 o$
b0 o%
b0 p!
b0 p#
0p$
b0 p%
b0 q!
b0 q"
b0 q#
b0 q$
b0 q%
b0 r!
0r#
b0 r%
0s"
b0 s#
b0 s$
b0 s%
0t!
b0 t"
b0 t#
b0 t$
b0 t%
b0 u!
b0 u#
0u$
b0 u%
b0 v!
b0 v#
b0 v%
0w!
b0 w#
b1 w$
0x!
b0 x#
b0 x$
b0 y!
b0 y"
b0 y#
b0 y$
0z!
b0 z#
b0 {!
b0 {"
b0 |"
b0 }!
b0 }"
b0 }$
b0 ~!
b0 ~"
b0 ~$

#20000
0!
0@

#30000
1!
1@

#40000
0!
1"
b10010100100100010100101011 #
0@
1A
b10010100100100010100101011 L%
b10010100100100010100101011 X
b10010100100100010100101011 g
bx k
b10010100100100010100101011 z$
bx {$

#50000
1!
bx #
b10010100100100010100101011 $
b10010100100100010100101011 %#
b10010100100100010100101011 )#
1)%
z*%
bz ,!
b100 -!
b10010100100100010100101011 .!
b100 .#
b101 /#
b100 1!
b101 2!
b10000000000000001000000000000 2#
b110111000 2%
b1000 3#
b10010100100100010100101011 4!
b100 5#
b10000000000000001000000000000 6!
b10010100100100010100101011 6#
b1000 7!
b10000000000000001000000000000 8#
b1000 9#
b1010 :!
b1010 <#
b10000000000000001000000000000 ?!
1@
b1000 @!
xB
b100 B!
xC
1C#
1E!
b101011 E#
1F
b100 F#
b1 G#
b1010 H#
b110 H%
b100 I#
b101 J#
b1010 K#
bx L%
bx M!
bz Q#
b100 Q%
b100 V
bx X
bx Y#
b100 e
bx g
bz h#
b10000000000000001000000000000 j!
b1000 k!
b100 q"
bx q#
b10000000000000001000000000000 u"
b1000 v"
bx z$
b1 {"

#60000
0!
0@

#70000
1!
b10000000000000001000000000000 !$
b1000 "$
b100 #$
bx $
1$#
b1010 $$
b10010100100100010100101011 %
bx %#
b1 %$
1&
b100 &#
b10 &$
b10000000000000001000000000000000 '$
b1111111111111111111111111111111101111111111111111000000000000000 ($
b1010 )"
bx )#
b100000000000000010000 )$
b100000000000000010000000 *$
b100 +#
b111111111111111111111111 +$
z+%
b111111111111111111111111111 ,$
x,%
b1000 -!
b10000000000000001000000001000 -$
bx .!
b0 .#
b100 .$
b1010 /
b100 /!
b0 /#
b11101111111111111111000000000000 /$
b1010 0"
b11111111111111111111111111111000 0$
b0 1!
b0 2!
b0 2#
b0 3#
03$
b1000 4
bx 4!
b10000000000000001000000000000 4$
b100 5!
b0 5#
b1000 5$
16
b0 6!
bx 6#
b101011 6$
b0 7!
b100 7#
b100 7$
b0 8#
b1 8$
19"
b0 9#
b1010 9$
b0 :!
b100 :$
b0 <#
b1010 =$
b0 ?!
1@
b0 @!
b0 B!
0C#
0E!
bx E#
bx F#
b10010100100100010100101011 G!
bx G#
bx H#
bx I#
b1010 J!
bx J#
b10000000000000001000000000000 K!
bx K#
b1000 L!
1L#
bx L%
b10010100100100010100101011 M#
b10000000000000001000000000000 Q!
b1000 Q%
b1000 R!
1S$
b100 T!
1T$
b100 U$
b1000 V
b1010 V#
b10000000000000001000000000000 W#
b1000 X#
b10000000000000001000000000000 ]#
b1010 ^!
b1000 ^#
1_!
1`!
b100 `#
b100 a!
b10010100100100010100101011 b#
b10000000000000001000000000000 c!
b1000 d!
b1000 e
b100 e!
b1010 f!
b0 j!
b0 k!
1k#
b1010 n#
b10000000000000001000000000000 o#
b1000 p#
b1000 q"
b11 r"
b11 s!
1s"
1t!
b100 t"
b100 u!
b0 u"
b10000000000000001000000000000 u#
b0 v"
b1000 v#
b100 x#
b1010 y#
b1010 z#
b10 {"

#80000
0!
0@

#90000
1!
b0 !$
b0 "$
b0 #$
b1 $
b0 $$
b1 %
b1 %#
b0 %$
b0 &#
b0 &$
b0 '$
b0 ($
b11 )
b0 )"
b1 )#
b0 )$
b1 *
b0 *$
1+"
b0 +#
b11111111111111111111111111111111 +$
b0 ,!
b11111111111111111111111111111111 ,$
b100 -!
b0 -$
b1 .!
b0 .$
b0 /
b0 /!
b1010 /"
b0 /$
b0 0"
b0 0$
13$
b0 4
b1 4!
b0 4$
b0 5!
b0 5$
06
b1 6#
b1 6$
b0 7#
b0 7$
18
b0 8$
09"
b0 9$
b0 :$
b0 =$
1@
b1 E#
b0 F#
b1 G!
b0 G#
b0 H#
b0 I#
b0 J!
b0 J#
b0 K!
b0 K#
b0 L!
bx L%
b0 M!
b1 M#
b0 Q!
b0 Q#
b100 Q%
b0 R!
1S$
b0 T!
0T$
b0 U$
b100 V
b0 V#
b0 W#
b0 X#
b0 Y#
b0 ]#
b0 ^!
b0 ^#
0`!
b0 `#
b0 a!
b1010 b"
b1 b#
b0 c!
b0 d!
b100 e
b0 e!
1e"
b0 f!
b0 h#
b1000 j"
b10000000000000001000000000000 k"
0k#
b1000 l"
b1 m"
b0 n#
b11 o"
b0 o#
b100000 p"
b0 p#
b100 q"
b0 q#
b11 r"
0s"
0t!
b0 t"
b0 u!
b0 u#
b0 v#
b0 x#
b0 y#
b0 z#
b11 {"

#100000
0!
0@

#110000
1!
b1 #
b10 *
b10000000000000001000000000000 ,"
1-"
b1 0
b1 1
19
1@
b10000000000000001000000000000 A"
1C"
b1 J%
b1 L%
b10000000000000001000000000000 Q
b0 Q%
b1 S
1T
b1000000000000 T%
b1 X
b10000000000000001000000000000 c"
1c%
1d"
b11 d%
b0 e
b0 e%
b10010100100100010100101011 g
b1000000000000 i
b1 k
b10 m"
b11 r"
b10010100100100010100101011 z$
b100 {"
b1 {$
1}

#120000
0!
0@

#130000
1!
bx #
b1 (
b1 *
0-"
b0 0
b0 1
09
1@
0C"
b0 J%
bx L%
b100 Q%
b0 S
0T
b0 T%
bx X
0c%
0d"
b10 d%
b100 e
b1 e%
bx g
b0 i
b111 j"
bx k
b10000000000000001000000000100 k"
b1 m"
b1 n"
b11 r"
bx z$
b101 {"
bx {$
0}

#140000
0!
0@

#150000
1!
b1 #
b10 *
b10000000000000001000000000100 ,"
1-"
b10 0
b10 1
19
1@
b10000000000000001000000000100 A"
1C"
b10 J%
b1 L%
b10000000000000001000000000100 Q
b0 Q%
b10 S
1T
b1000000000100 T%
b1 X
b10000000000000001000000000100 c"
1c%
1d"
b11 d%
b0 e
b0 e%
b10010100100100010100101011 g
b1000000000100 i
b10 k
b10 m"
b11 r"
b10010100100100010100101011 z$
b110 {"
b10 {$
1}

#160000
0!
0@

#170000
1!
bx #
b11 (
b1 *
0-"
b0 0
b0 1
09
1@
0C"
b0 J%
bx L%
b100 Q%
b0 S
0T
b0 T%
bx X
0c%
0d"
b10 d%
b100 e
b1 e%
bx g
b0 i
b110 j"
bx k
b10000000000000001000000001000 k"
b1 m"
b11 n"
b11 r"
bx z$
b111 {"
bx {$
0}

#180000
0!
0@

#190000
1!
b1 #
b10 *
b10000000000000001000000001000 ,"
1-"
b11 0
b11 1
19
1@
b10000000000000001000000001000 A"
1C"
b11 J%
b1 L%
b10000000000000001000000001000 Q
b0 Q%
b11 S
1T
b1000000001000 T%
b1 X
b10000000000000001000000001000 c"
1c%
1d"
b11 d%
b0 e
b0 e%
b10010100100100010100101011 g
b1000000001000 i
b11 k
b10 m"
b11 r"
b10010100100100010100101011 z$
b1000 {"
b11 {$
1}

#200000
0!
0@

#210000
1!
bx #
b110 (
b1 *
0-"
b0 0
b0 1
09
1@
0C"
b0 J%
bx L%
b100 Q%
b0 S
0T
b0 T%
bx X
0c%
0d"
b10 d%
b100 e
b1 e%
bx g
b0 i
b101 j"
bx k
b10000000000000001000000001100 k"
b1 m"
b110 n"
b11 r"
bx z$
b1001 {"
bx {$
0}

#220000
0!
0@

#230000
1!
b1 #
b10 *
b10000000000000001000000001100 ,"
1-"
b100 0
b100 1
19
1@
b10000000000000001000000001100 A"
1C"
b100 J%
b1 L%
b10000000000000001000000001100 Q
b0 Q%
b100 S
1T
b1000000001100 T%
b1 X
b10000000000000001000000001100 c"
1c%
1d"
b11 d%
b0 e
b0 e%
b10010100100100010100101011 g
b1000000001100 i
b100 k
b10 m"
b11 r"
b10010100100100010100101011 z$
b1010 {"
b100 {$
1}

#240000
0!
0@

#250000
1!
bx #
b1010 (
b1 *
0-"
b0 0
b0 1
09
1@
0C"
b0 J%
bx L%
b100 Q%
b0 S
0T
b0 T%
bx X
0c%
0d"
b10 d%
b100 e
b1 e%
bx g
b0 i
b100 j"
bx k
b10000000000000001000000010000 k"
b1 m"
b1010 n"
b11 r"
bx z$
b1011 {"
bx {$
0}

#260000
0!
0@

#270000
1!
b1 #
b10 *
b10000000000000001000000010000 ,"
1-"
b101 0
b101 1
19
1@
b10000000000000001000000010000 A"
1C"
b101 J%
b1 L%
b10000000000000001000000010000 Q
b0 Q%
b101 S
1T
b1000000010000 T%
b1 X
b10000000000000001000000010000 c"
1c%
1d"
b11 d%
b0 e
b0 e%
b10010100100100010100101011 g
b1000000010000 i
b101 k
b10 m"
b11 r"
b10010100100100010100101011 z$
b1100 {"
b101 {$
1}

#280000
0!
0@

#290000
1!
bx #
b1111 (
b1 *
0-"
b0 0
b0 1
09
1@
0C"
b0 J%
bx L%
b100 Q%
b0 S
0T
b0 T%
bx X
0c%
0d"
b10 d%
b100 e
b1 e%
bx g
b0 i
b11 j"
bx k
b10000000000000001000000010100 k"
b1 m"
b1111 n"
b11 r"
bx z$
b1101 {"
bx {$
0}

#300000
0!
0@

#310000
1!
b1 #
b10 *
b10000000000000001000000010100 ,"
1-"
b110 0
b110 1
19
1@
b10000000000000001000000010100 A"
1C"
b110 J%
b1 L%
b10000000000000001000000010100 Q
b0 Q%
b110 S
1T
b1000000010100 T%
b1 X
b10000000000000001000000010100 c"
1c%
1d"
b11 d%
b0 e
b0 e%
b10010100100100010100101011 g
b1000000010100 i
b110 k
b10 m"
b11 r"
b10010100100100010100101011 z$
b1110 {"
b110 {$
1}

#320000
0!
0@

#330000
1!
bx #
b10101 (
b1 *
0-"
b0 0
b0 1
09
1@
0C"
b0 J%
bx L%
b100 Q%
b0 S
0T
b0 T%
bx X
0c%
0d"
b10 d%
b100 e
b1 e%
bx g
b0 i
b10 j"
bx k
b10000000000000001000000011000 k"
b1 m"
b10101 n"
b11 r"
bx z$
b1111 {"
bx {$
0}

#340000
0!
0@

#350000
1!
b1 #
b10 *
b10000000000000001000000011000 ,"
1-"
b111 0
b111 1
19
1@
b10000000000000001000000011000 A"
1C"
b111 J%
b1 L%
b10000000000000001000000011000 Q
b0 Q%
b111 S
1T
b1000000011000 T%
b1 X
b10000000000000001000000011000 c"
1c%
1d"
b11 d%
b0 e
b0 e%
b10010100100100010100101011 g
b1000000011000 i
b111 k
b10 m"
b11 r"
b10010100100100010100101011 z$
b10000 {"
b111 {$
1}

#360000
0!
0@

#370000
1!
bx #
b11100 (
b1 *
0-"
b0 0
b0 1
09
1@
0C"
b0 J%
bx L%
b100 Q%
b0 S
0T
b0 T%
bx X
0c%
0d"
b10 d%
b100 e
b1 e%
bx g
b0 i
b1 j"
bx k
b10000000000000001000000011100 k"
b1 m"
b11100 n"
b11 r"
bx z$
b10001 {"
bx {$
0}

#380000
0!
0@

#390000
1!
b1 #
b10 *
b10000000000000001000000011100 ,"
1-"
b1000 0
b1000 1
19
1@
b10000000000000001000000011100 A"
1C"
b1000 J%
b1 L%
b10000000000000001000000011100 Q
b0 Q%
b1000 S
1T
b1000000011100 T%
b1 X
b10000000000000001000000011100 c"
1c%
1d"
b11 d%
b0 e
b0 e%
b10010100100100010100101011 g
b1000000011100 i
b1000 k
b10 m"
b11 r"
b10010100100100010100101011 z$
b10010 {"
b1000 {$
1}

#400000
0!
0@

#410000
1!
bx #
b100100 (
b11 *
0-"
b0 0
b0 1
09
1@
0C"
b0 J%
bx L%
b100 Q%
b0 S
0T
b0 T%
bx X
0c%
0d"
b10 d%
b100 e
b1 e%
bx g
b0 i
bx k
b11 m"
b100100 n"
b11 r"
bx z$
b10011 {"
bx {$
0}

#420000
0!
0@

#430000
1!
b100 *
1@
b100 h"
b100 m"
b10100 {"

#440000
0!
0@

#450000
1!
0$#
0&
b0 *
1*"
0+"
b100 ,
b100 -
1.
b100 ."
b1010 /
17
08
1@
b0 A"
0L#
bx L%
b0 Q
b100 Q%
0S$
1V$
b1010 W$
b100 X$
b100 \!
1]!
b1010 ^!
0_!
0e"
1f"
b100 g"
b0 m"
b0 r"
b0 s!
b10101 {"

#460000
0!
0@

#470000
1!
bx $
bx %#
b100 &#
bx )#
0*"
b100 +
b100 +#
b0 ,
bz ,!
b0 -
b1000 -!
0.
bx .!
b0 /
b100 /!
bx 4!
b100 5!
bx 6#
07
b100 7#
1@
bx E#
bx F#
bx G#
bx H#
bx I#
bx J#
bx K#
bx L%
bx M!
bz Q#
b1000 Q%
b1000 V
0V$
b0 W$
b0 X$
bx Y#
b0 \!
0]!
b0 ^!
b1000 e
0f"
bz h#
b1000 q"
bx q#
b10110 {"

#480000
0!
0@

#490000
1!
bx #$
bx %
bx %$
b1000 &#
bx &$
bx *$
b1000 +#
bx ,$
b1100 -!
b1000 /!
b1000 5!
bx 6$
b1000 7#
bx 7$
bx 8$
bx 9$
bx :$
1@
bx G!
b100 H!
bx L%
bx M#
b100 N#
b1100 Q%
b1100 V
bx b#
b100 d#
b1100 e
bx e!
b1100 q"
b10111 {"

#500000
0!
0@

#510000
1!
b1100 &#
b1100 +#
b10000 -!
b1100 /!
b1100 5!
b1100 7#
1@
b1000 H!
bx L%
b1000 N#
b10000 Q%
b10000 V
b1000 d#
b10000 e
b10000 q"
b11000 {"

#520000
0!
0@

#530000
1!
b10000 &#
b10000 +#
b10100 -!
b10000 /!
b10000 5!
b10000 7#
1@
b1100 H!
bx L%
b1100 N#
b10100 Q%
b10100 V
b1100 d#
b10100 e
b10100 q"
b11001 {"

#540000
0!
0@

#550000
1!
b10100 &#
b10100 +#
b11000 -!
b10100 /!
b10100 5!
b10100 7#
1@
b10000 H!
bx L%
b10000 N#
b11000 Q%
b11000 V
b10000 d#
b11000 e
b11000 q"
b11010 {"

#560000
0!
0@

#570000
1!
b11000 &#
b11000 +#
b11100 -!
b11000 /!
b11000 5!
b11000 7#
1@
b10100 H!
bx L%
b10100 N#
b11100 Q%
b11100 V
b10100 d#
b11100 e
b11100 q"
b11011 {"

#580000
0!
0@

#590000
1!
b11100 &#
b11100 +#
b100000 -!
b11100 /!
b11100 5!
b11100 7#
1@
b11000 H!
bx L%
b11000 N#
b100000 Q%
b100000 V
b11000 d#
b100000 e
b100000 q"
b11100 {"

#600000
0!
0@

#610000
1!
b100000 &#
b100000 +#
b100100 -!
b100000 /!
b100000 5!
b100000 7#
1@
b11100 H!
bx L%
b11100 N#
b100100 Q%
b100100 V
b11100 d#
b100100 e
b100100 q"
b11101 {"

#620000
0!
0@

#630000
1!
b100100 &#
b100100 +#
b101000 -!
b100100 /!
b100100 5!
b100100 7#
1@
b100000 H!
bx L%
b100000 N#
b101000 Q%
b101000 V
b100000 d#
b101000 e
b101000 q"
b11110 {"

#640000
0!
0@

#650000
1!
b101000 &#
b101000 +#
b101100 -!
b101000 /!
b101000 5!
b101000 7#
1@
b100100 H!
bx L%
b100100 N#
b101100 Q%
b101100 V
b100100 d#
b101100 e
b101100 q"
b11111 {"

#660000
0!
0@

#670000
1!
b101100 &#
b101100 +#
b110000 -!
b101100 /!
b101100 5!
b101100 7#
1@
b101000 H!
bx L%
b101000 N#
b110000 Q%
b110000 V
b101000 d#
b110000 e
b110000 q"
b100000 {"

#680000
0!
0@

#690000
1!
b110000 &#
b110000 +#
b110100 -!
b110000 /!
b110000 5!
b110000 7#
1@
b101100 H!
bx L%
b101100 N#
b110100 Q%
b110100 V
b101100 d#
b110100 e
b110100 q"
b100001 {"

#700000
0!
0@

#710000
1!
b110100 &#
b110100 +#
b111000 -!
b110100 /!
b110100 5!
b110100 7#
1@
b110000 H!
bx L%
b110000 N#
b111000 Q%
b111000 V
b110000 d#
b111000 e
b111000 q"
b100010 {"

#720000
0!
0@

#730000
1!
b111000 &#
b111000 +#
b111100 -!
b111000 /!
b111000 5!
b111000 7#
1@
b110100 H!
bx L%
b110100 N#
b111100 Q%
b111100 V
b110100 d#
b111100 e
b111100 q"
b100011 {"

#740000
0!
0@

#750000
1!
b111100 &#
b111100 +#
b1000000 -!
b111100 /!
b111100 5!
b111100 7#
1@
b111000 H!
bx L%
b111000 N#
b1000000 Q%
b1000000 V
b111000 d#
b1000000 e
b1000000 q"
b100100 {"

#760000
0!
0@

#770000
1!
b1000000 &#
b1000000 +#
b1000100 -!
b1000000 /!
b1000000 5!
b1000000 7#
1@
b111100 H!
bx L%
b111100 N#
b1000100 Q%
b1000100 V
b111100 d#
b1000100 e
b1000100 q"
b100101 {"

#780000
0!
0@

#790000
1!
b1000100 &#
b1000100 +#
b1001000 -!
b1000100 /!
b1000100 5!
b1000100 7#
1@
b1000000 H!
bx L%
b1000000 N#
b1001000 Q%
b1001000 V
b1000000 d#
b1001000 e
b1001000 q"
b100110 {"

#800000
0!
0@

#810000
1!
b1001000 &#
b1001000 +#
b1001100 -!
b1001000 /!
b1001000 5!
b1001000 7#
1@
b1000100 H!
bx L%
b1000100 N#
b1001100 Q%
b1001100 V
b1000100 d#
b1001100 e
b1001100 q"
b100111 {"

#820000
0!
0@

#830000
1!
b1001100 &#
b1001100 +#
b1010000 -!
b1001100 /!
b1001100 5!
b1001100 7#
1@
b1001000 H!
bx L%
b1001000 N#
b1010000 Q%
b1010000 V
b1001000 d#
b1010000 e
b1010000 q"
b101000 {"

#840000
0!
0@

#850000
1!
b1010000 &#
b1010000 +#
b1010100 -!
b1010000 /!
b1010000 5!
b1010000 7#
1@
b1001100 H!
bx L%
b1001100 N#
b1010100 Q%
b1010100 V
b1001100 d#
b1010100 e
b1010100 q"
b101001 {"

#860000
0!
0@

#870000
1!
b1010100 &#
b1010100 +#
b1011000 -!
b1010100 /!
b1010100 5!
b1010100 7#
1@
b1010000 H!
bx L%
b1010000 N#
b1011000 Q%
b1011000 V
b1010000 d#
b1011000 e
b1011000 q"
b101010 {"

#880000
0!
0@

#890000
1!
b1011000 &#
b1011000 +#
b1011100 -!
b1011000 /!
b1011000 5!
b1011000 7#
1@
b1010100 H!
bx L%
b1010100 N#
b1011100 Q%
b1011100 V
b1010100 d#
b1011100 e
b1011100 q"
b101011 {"

#900000
0!
0@

#910000
1!
b1011100 &#
b1011100 +#
b1100000 -!
b1011100 /!
b1011100 5!
b1011100 7#
1@
b1011000 H!
bx L%
b1011000 N#
b1100000 Q%
b1100000 V
b1011000 d#
b1100000 e
b1100000 q"
b101100 {"

#920000
0!
0@

#930000
1!
b1100000 &#
b1100000 +#
b1100100 -!
b1100000 /!
b1100000 5!
b1100000 7#
1@
b1011100 H!
bx L%
b1011100 N#
b1100100 Q%
b1100100 V
b1011100 d#
b1100100 e
b1100100 q"
b101101 {"

#940000
0!
0@

#950000
1!
b1100100 &#
b1100100 +#
b1101000 -!
b1100100 /!
b1100100 5!
b1100100 7#
1@
b1100000 H!
bx L%
b1100000 N#
b1101000 Q%
b1101000 V
b1100000 d#
b1101000 e
b1101000 q"
b101110 {"

#960000
0!
0@

#970000
1!
b1101000 &#
b1101000 +#
b1101100 -!
b1101000 /!
b1101000 5!
b1101000 7#
1@
b1100100 H!
bx L%
b1100100 N#
b1101100 Q%
b1101100 V
b1100100 d#
b1101100 e
b1101100 q"
b101111 {"

#980000
0!
0@

#990000
1!
b1101100 &#
b1101100 +#
b1110000 -!
b1101100 /!
b1101100 5!
b1101100 7#
1@
b1101000 H!
bx L%
b1101000 N#
b1110000 Q%
b1110000 V
b1101000 d#
b1110000 e
b1110000 q"
b110000 {"
