$date
   Sun Apr 27 06:19:56 2025
$end

$version
  2024.1
  $dumpfile ("tinyriscv_soc_tb.vcd") 
$end

$timescale
  1ps
$end

$scope module tinyriscv_soc_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$var wire 32 # x3 [31:0] $end
$var wire 32 $ x26 [31:0] $end
$var wire 32 % x27 [31:0] $end
$var wire 1 & log_start $end
$var wire 1 ' log_ready $end
$var wire 3 ( hold_flag [2:0] $end
$var wire 32 ) pc [31:0] $end
$var wire 32 * instr [31:0] $end
$var wire 32 + instr_rib [31:0] $end
$var wire 1 , log_busy $end
$var wire 2048 - log_data_in [2047:0] $end
$var wire 32 . ex_log_result_i [31:0] $end
$var integer 32 / r [31:0] $end
$scope module tinyriscv_soc_top_0 $end
$var wire 1 0 clk $end
$var wire 1 1 rst $end
$var reg 1 2 over $end
$var reg 1 3 succ $end
$var wire 1 4 halted_ind $end
$var wire 1 5 uart_debug_pin $end
$var wire 1 6 uart_tx_pin $end
$var wire 1 7 uart_rx_pin $end
$var wire 2 8 gpio [1:0] $end
$var wire 1 9 jtag_TCK $end
$var wire 1 : jtag_TMS $end
$var wire 1 ; jtag_TDI $end
$var wire 1 < jtag_TDO $end
$var wire 1 = spi_miso $end
$var wire 1 > spi_mosi $end
$var wire 1 ? spi_ss $end
$var wire 1 @ spi_clk $end
$var wire 32 A m0_addr_i [31:0] $end
$var wire 32 B m0_data_i [31:0] $end
$var wire 32 C m0_data_o [31:0] $end
$var wire 1 D m0_req_i $end
$var wire 1 E m0_we_i $end
$var wire 32 F m1_addr_i [31:0] $end
$var wire 32 G m1_data_i [31:0] $end
$var wire 32 H m1_data_o [31:0] $end
$var wire 1 I m1_req_i $end
$var wire 1 J m1_we_i $end
$var wire 32 K m2_addr_i [31:0] $end
$var wire 32 L m2_data_i [31:0] $end
$var wire 32 M m2_data_o [31:0] $end
$var wire 1 N m2_req_i $end
$var wire 1 O m2_we_i $end
$var wire 32 P m3_addr_i [31:0] $end
$var wire 32 Q m3_data_i [31:0] $end
$var wire 32 R m3_data_o [31:0] $end
$var wire 1 S m3_req_i $end
$var wire 1 T m3_we_i $end
$var wire 32 U s0_addr_o [31:0] $end
$var wire 32 V s0_data_o [31:0] $end
$var wire 32 W s0_data_i [31:0] $end
$var wire 1 X s0_we_o $end
$var wire 32 Y s1_addr_o [31:0] $end
$var wire 32 Z s1_data_o [31:0] $end
$var wire 32 [ s1_data_i [31:0] $end
$var wire 1 \ s1_we_o $end
$var wire 32 ] s2_addr_o [31:0] $end
$var wire 32 ^ s2_data_o [31:0] $end
$var wire 32 _ s2_data_i [31:0] $end
$var wire 1 ` s2_we_o $end
$var wire 32 a s3_addr_o [31:0] $end
$var wire 32 b s3_data_o [31:0] $end
$var wire 32 c s3_data_i [31:0] $end
$var wire 1 d s3_we_o $end
$var wire 32 e s4_addr_o [31:0] $end
$var wire 32 f s4_data_o [31:0] $end
$var wire 32 g s4_data_i [31:0] $end
$var wire 1 h s4_we_o $end
$var wire 32 i s5_addr_o [31:0] $end
$var wire 32 j s5_data_o [31:0] $end
$var wire 32 k s5_data_i [31:0] $end
$var wire 1 l s5_we_o $end
$var wire 1 m rib_hold_flag_o $end
$var wire 1 n jtag_halt_req_o $end
$var wire 1 o jtag_reset_req_o $end
$var wire 5 p jtag_reg_addr_o [4:0] $end
$var wire 32 q jtag_reg_data_o [31:0] $end
$var wire 1 r jtag_reg_we_o $end
$var wire 32 s jtag_reg_data_i [31:0] $end
$var wire 8 t int_flag [7:0] $end
$var wire 1 u timer0_int $end
$var wire 2 v io_in [1:0] $end
$var wire 32 w gpio_ctrl [31:0] $end
$var wire 32 x gpio_data [31:0] $end
$scope module u_tinyriscv $end
$var wire 1 0 clk $end
$var wire 1 1 rst $end
$var wire 32 A rib_ex_addr_o [31:0] $end
$var wire 32 C rib_ex_data_i [31:0] $end
$var wire 32 B rib_ex_data_o [31:0] $end
$var wire 1 D rib_ex_req_o $end
$var wire 1 E rib_ex_we_o $end
$var wire 32 F rib_pc_addr_o [31:0] $end
$var wire 32 H rib_pc_data_i [31:0] $end
$var wire 5 p jtag_reg_addr_i [4:0] $end
$var wire 32 q jtag_reg_data_i [31:0] $end
$var wire 1 r jtag_reg_we_i $end
$var wire 32 s jtag_reg_data_o [31:0] $end
$var wire 1 m rib_hold_flag_i $end
$var wire 1 n jtag_halt_flag_i $end
$var wire 1 o jtag_reset_flag_i $end
$var wire 8 t int_i [7:0] $end
$var wire 32 y pc_pc_o [31:0] $end
$var wire 32 z if_inst_o [31:0] $end
$var wire 32 { if_inst_addr_o [31:0] $end
$var wire 8 | if_int_flag_o [7:0] $end
$var wire 5 } id_reg1_raddr_o [4:0] $end
$var wire 5 ~ id_reg2_raddr_o [4:0] $end
$var wire 32 !! id_inst_o [31:0] $end
$var wire 32 "! id_inst_addr_o [31:0] $end
$var wire 32 #! id_reg1_rdata_o [31:0] $end
$var wire 32 $! id_reg2_rdata_o [31:0] $end
$var wire 1 %! id_reg_we_o $end
$var wire 5 &! id_reg_waddr_o [4:0] $end
$var wire 32 '! id_csr_raddr_o [31:0] $end
$var wire 1 (! id_csr_we_o $end
$var wire 32 )! id_csr_rdata_o [31:0] $end
$var wire 32 *! id_csr_waddr_o [31:0] $end
$var wire 32 +! id_op1_o [31:0] $end
$var wire 32 ,! id_op2_o [31:0] $end
$var wire 32 -! id_op1_jump_o [31:0] $end
$var wire 32 .! id_op2_jump_o [31:0] $end
$var wire 32 /! ie_inst_o [31:0] $end
$var wire 32 0! ie_inst_addr_o [31:0] $end
$var wire 1 1! ie_reg_we_o $end
$var wire 5 2! ie_reg_waddr_o [4:0] $end
$var wire 32 3! ie_reg1_rdata_o [31:0] $end
$var wire 32 4! ie_reg2_rdata_o [31:0] $end
$var wire 1 5! ie_csr_we_o $end
$var wire 32 6! ie_csr_waddr_o [31:0] $end
$var wire 32 7! ie_csr_rdata_o [31:0] $end
$var wire 32 8! ie_op1_o [31:0] $end
$var wire 32 9! ie_op2_o [31:0] $end
$var wire 32 :! ie_op1_jump_o [31:0] $end
$var wire 32 ;! ie_op2_jump_o [31:0] $end
$var wire 32 <! ex_mem_wdata_o [31:0] $end
$var wire 32 =! ex_mem_raddr_o [31:0] $end
$var wire 32 >! ex_mem_waddr_o [31:0] $end
$var wire 1 ?! ex_mem_we_o $end
$var wire 1 @! ex_mem_req_o $end
$var wire 32 A! ex_reg_wdata_o [31:0] $end
$var wire 1 B! ex_reg_we_o $end
$var wire 5 C! ex_reg_waddr_o [4:0] $end
$var wire 1 D! ex_hold_flag_o $end
$var wire 1 E! ex_jump_flag_o $end
$var wire 32 F! ex_jump_addr_o [31:0] $end
$var wire 1 G! ex_div_start_o $end
$var wire 32 H! ex_div_dividend_o [31:0] $end
$var wire 32 I! ex_div_divisor_o [31:0] $end
$var wire 3 J! ex_div_op_o [2:0] $end
$var wire 5 K! ex_div_reg_waddr_o [4:0] $end
$var wire 32 L! ex_csr_wdata_o [31:0] $end
$var wire 1 M! ex_csr_we_o $end
$var wire 32 N! ex_csr_waddr_o [31:0] $end
$var wire 1 O! ex_log_start_o $end
$var wire 2048 P! ex_log_data_in [2047:0] $end
$var wire 1 Q! ex_log_ready_i $end
$var wire 32 R! ex_log_result_i [31:0] $end
$var wire 1 S! ex_log_busy_i $end
$var wire 32 T! regs_rdata1_o [31:0] $end
$var wire 32 U! regs_rdata2_o [31:0] $end
$var wire 32 V! csr_data_o [31:0] $end
$var wire 32 W! csr_clint_data_o [31:0] $end
$var wire 1 X! csr_global_int_en_o $end
$var wire 32 Y! csr_clint_csr_mtvec [31:0] $end
$var wire 32 Z! csr_clint_csr_mepc [31:0] $end
$var wire 32 [! csr_clint_csr_mstatus [31:0] $end
$var wire 3 \! ctrl_hold_flag_o [2:0] $end
$var wire 1 ]! ctrl_jump_flag_o $end
$var wire 32 ^! ctrl_jump_addr_o [31:0] $end
$var wire 32 _! div_result_o [31:0] $end
$var wire 1 `! div_ready_o $end
$var wire 1 a! div_busy_o $end
$var wire 5 b! div_reg_waddr_o [4:0] $end
$var wire 1 c! clint_we_o $end
$var wire 32 d! clint_waddr_o [31:0] $end
$var wire 32 e! clint_raddr_o [31:0] $end
$var wire 32 f! clint_data_o [31:0] $end
$var wire 32 g! clint_int_addr_o [31:0] $end
$var wire 1 h! clint_int_assert_o $end
$var wire 1 i! clint_hold_flag_o $end
$var wire 1 j! ex_log_ready_in $end
$scope module u_pc_reg $end
$var wire 1 0 clk $end
$var wire 1 1 rst $end
$var wire 1 ]! jump_flag_i $end
$var wire 32 ^! jump_addr_i [31:0] $end
$var wire 3 \! hold_flag_i [2:0] $end
$var wire 1 o jtag_reset_flag_i $end
$var reg 32 k! pc_o [31:0] $end
$upscope $end
$scope module u_ctrl $end
$var wire 1 1 rst $end
$var wire 1 E! jump_flag_i $end
$var wire 32 F! jump_addr_i [31:0] $end
$var wire 1 D! hold_flag_ex_i $end
$var wire 1 m hold_flag_rib_i $end
$var wire 1 n jtag_halt_flag_i $end
$var wire 1 i! hold_flag_clint_i $end
$var reg 3 l! hold_flag_o [2:0] $end
$var reg 1 m! jump_flag_o $end
$var reg 32 n! jump_addr_o [31:0] $end
$upscope $end
$scope module u_regs $end
$var wire 1 0 clk $end
$var wire 1 1 rst $end
$var wire 1 B! we_i $end
$var wire 5 C! waddr_i [4:0] $end
$var wire 32 A! wdata_i [31:0] $end
$var wire 1 r jtag_we_i $end
$var wire 5 p jtag_addr_i [4:0] $end
$var wire 32 q jtag_data_i [31:0] $end
$var wire 5 } raddr1_i [4:0] $end
$var reg 32 o! rdata1_o [31:0] $end
$var wire 5 ~ raddr2_i [4:0] $end
$var reg 32 p! rdata2_o [31:0] $end
$var reg 32 q! jtag_data_o [31:0] $end
$upscope $end
$scope module u_csr_reg $end
$var wire 1 0 clk $end
$var wire 1 1 rst $end
$var wire 1 M! we_i $end
$var wire 32 '! raddr_i [31:0] $end
$var wire 32 N! waddr_i [31:0] $end
$var wire 32 L! data_i [31:0] $end
$var wire 1 c! clint_we_i $end
$var wire 32 e! clint_raddr_i [31:0] $end
$var wire 32 d! clint_waddr_i [31:0] $end
$var wire 32 f! clint_data_i [31:0] $end
$var wire 1 X! global_int_en_o $end
$var reg 32 r! clint_data_o [31:0] $end
$var wire 32 Y! clint_csr_mtvec [31:0] $end
$var wire 32 Z! clint_csr_mepc [31:0] $end
$var wire 32 [! clint_csr_mstatus [31:0] $end
$var reg 32 s! data_o [31:0] $end
$var reg 64 t! cycle [63:0] $end
$var reg 32 u! mtvec [31:0] $end
$var reg 32 v! mcause [31:0] $end
$var reg 32 w! mepc [31:0] $end
$var reg 32 x! mie [31:0] $end
$var reg 32 y! mstatus [31:0] $end
$var reg 32 z! mscratch [31:0] $end
$upscope $end
$scope module u_if_id $end
$var wire 1 0 clk $end
$var wire 1 1 rst $end
$var wire 32 H inst_i [31:0] $end
$var wire 32 y inst_addr_i [31:0] $end
$var wire 3 \! hold_flag_i [2:0] $end
$var wire 8 t int_flag_i [7:0] $end
$var wire 8 | int_flag_o [7:0] $end
$var wire 32 z inst_o [31:0] $end
$var wire 32 { inst_addr_o [31:0] $end
$var wire 1 {! hold_en $end
$var wire 32 |! inst [31:0] $end
$var wire 32 }! inst_addr [31:0] $end
$var wire 8 ~! int_flag [7:0] $end
$scope module inst_ff $end
$var wire 1 0 clk $end
$var wire 1 1 rst $end
$var wire 1 {! hold_en $end
$var wire 32 !" def_val [31:0] $end
$var wire 32 H din [31:0] $end
$var wire 32 |! qout [31:0] $end
$var reg 32 "" qout_r [31:0] $end
$upscope $end
$scope module inst_addr_ff $end
$var wire 1 0 clk $end
$var wire 1 1 rst $end
$var wire 1 {! hold_en $end
$var wire 32 #" def_val [31:0] $end
$var wire 32 y din [31:0] $end
$var wire 32 }! qout [31:0] $end
$var reg 32 $" qout_r [31:0] $end
$upscope $end
$scope module int_ff $end
$var wire 1 0 clk $end
$var wire 1 1 rst $end
$var wire 1 {! hold_en $end
$var wire 8 %" def_val [7:0] $end
$var wire 8 t din [7:0] $end
$var wire 8 ~! qout [7:0] $end
$var reg 8 &" qout_r [7:0] $end
$upscope $end
$upscope $end
$scope module u_id $end
$var wire 1 1 rst $end
$var wire 32 z inst_i [31:0] $end
$var wire 32 { inst_addr_i [31:0] $end
$var wire 32 T! reg1_rdata_i [31:0] $end
$var wire 32 U! reg2_rdata_i [31:0] $end
$var wire 32 V! csr_rdata_i [31:0] $end
$var wire 1 E! ex_jump_flag_i $end
$var reg 5 '" reg1_raddr_o [4:0] $end
$var reg 5 (" reg2_raddr_o [4:0] $end
$var reg 32 )" csr_raddr_o [31:0] $end
$var reg 32 *" op1_o [31:0] $end
$var reg 32 +" op2_o [31:0] $end
$var reg 32 ," op1_jump_o [31:0] $end
$var reg 32 -" op2_jump_o [31:0] $end
$var reg 32 ." inst_o [31:0] $end
$var reg 32 /" inst_addr_o [31:0] $end
$var reg 32 0" reg1_rdata_o [31:0] $end
$var reg 32 1" reg2_rdata_o [31:0] $end
$var reg 1 2" reg_we_o $end
$var reg 5 3" reg_waddr_o [4:0] $end
$var reg 1 4" csr_we_o $end
$var reg 32 5" csr_rdata_o [31:0] $end
$var reg 32 6" csr_waddr_o [31:0] $end
$var wire 7 7" opcode [6:0] $end
$var wire 3 8" funct3 [2:0] $end
$var wire 7 9" funct7 [6:0] $end
$var wire 5 :" rd [4:0] $end
$var wire 5 ;" rs1 [4:0] $end
$var wire 5 <" rs2 [4:0] $end
$upscope $end
$scope module u_id_ex $end
$var wire 1 0 clk $end
$var wire 1 1 rst $end
$var wire 32 !! inst_i [31:0] $end
$var wire 32 "! inst_addr_i [31:0] $end
$var wire 1 %! reg_we_i $end
$var wire 5 &! reg_waddr_i [4:0] $end
$var wire 32 #! reg1_rdata_i [31:0] $end
$var wire 32 $! reg2_rdata_i [31:0] $end
$var wire 1 (! csr_we_i $end
$var wire 32 *! csr_waddr_i [31:0] $end
$var wire 32 )! csr_rdata_i [31:0] $end
$var wire 32 +! op1_i [31:0] $end
$var wire 32 ,! op2_i [31:0] $end
$var wire 32 -! op1_jump_i [31:0] $end
$var wire 32 .! op2_jump_i [31:0] $end
$var wire 3 \! hold_flag_i [2:0] $end
$var wire 32 8! op1_o [31:0] $end
$var wire 32 9! op2_o [31:0] $end
$var wire 32 :! op1_jump_o [31:0] $end
$var wire 32 ;! op2_jump_o [31:0] $end
$var wire 32 /! inst_o [31:0] $end
$var wire 32 0! inst_addr_o [31:0] $end
$var wire 1 1! reg_we_o $end
$var wire 5 2! reg_waddr_o [4:0] $end
$var wire 32 3! reg1_rdata_o [31:0] $end
$var wire 32 4! reg2_rdata_o [31:0] $end
$var wire 1 5! csr_we_o $end
$var wire 32 6! csr_waddr_o [31:0] $end
$var wire 32 7! csr_rdata_o [31:0] $end
$var wire 1 =" hold_en $end
$var wire 32 >" inst [31:0] $end
$var wire 32 ?" inst_addr [31:0] $end
$var wire 1 @" reg_we $end
$var wire 5 A" reg_waddr [4:0] $end
$var wire 32 B" reg1_rdata [31:0] $end
$var wire 32 C" reg2_rdata [31:0] $end
$var wire 1 D" csr_we $end
$var wire 32 E" csr_waddr [31:0] $end
$var wire 32 F" csr_rdata [31:0] $end
$var wire 32 G" op1 [31:0] $end
$var wire 32 H" op2 [31:0] $end
$var wire 32 I" op1_jump [31:0] $end
$var wire 32 J" op2_jump [31:0] $end
$scope module inst_ff $end
$var wire 1 0 clk $end
$var wire 1 1 rst $end
$var wire 1 =" hold_en $end
$var wire 32 K" def_val [31:0] $end
$var wire 32 !! din [31:0] $end
$var wire 32 >" qout [31:0] $end
$var reg 32 L" qout_r [31:0] $end
$upscope $end
$scope module inst_addr_ff $end
$var wire 1 0 clk $end
$var wire 1 1 rst $end
$var wire 1 =" hold_en $end
$var wire 32 M" def_val [31:0] $end
$var wire 32 "! din [31:0] $end
$var wire 32 ?" qout [31:0] $end
$var reg 32 N" qout_r [31:0] $end
$upscope $end
$scope module reg_we_ff $end
$var wire 1 0 clk $end
$var wire 1 1 rst $end
$var wire 1 =" hold_en $end
$var wire 1 O" def_val [0:0] $end
$var wire 1 %! din [0:0] $end
$var wire 1 @" qout [0:0] $end
$var reg 1 P" qout_r [0:0] $end
$upscope $end
$scope module reg_waddr_ff $end
$var wire 1 0 clk $end
$var wire 1 1 rst $end
$var wire 1 =" hold_en $end
$var wire 5 Q" def_val [4:0] $end
$var wire 5 &! din [4:0] $end
$var wire 5 A" qout [4:0] $end
$var reg 5 R" qout_r [4:0] $end
$upscope $end
$scope module reg1_rdata_ff $end
$var wire 1 0 clk $end
$var wire 1 1 rst $end
$var wire 1 =" hold_en $end
$var wire 32 M" def_val [31:0] $end
$var wire 32 #! din [31:0] $end
$var wire 32 B" qout [31:0] $end
$var reg 32 S" qout_r [31:0] $end
$upscope $end
$scope module reg2_rdata_ff $end
$var wire 1 0 clk $end
$var wire 1 1 rst $end
$var wire 1 =" hold_en $end
$var wire 32 M" def_val [31:0] $end
$var wire 32 $! din [31:0] $end
$var wire 32 C" qout [31:0] $end
$var reg 32 T" qout_r [31:0] $end
$upscope $end
$scope module csr_we_ff $end
$var wire 1 0 clk $end
$var wire 1 1 rst $end
$var wire 1 =" hold_en $end
$var wire 1 O" def_val [0:0] $end
$var wire 1 (! din [0:0] $end
$var wire 1 D" qout [0:0] $end
$var reg 1 U" qout_r [0:0] $end
$upscope $end
$scope module csr_waddr_ff $end
$var wire 1 0 clk $end
$var wire 1 1 rst $end
$var wire 1 =" hold_en $end
$var wire 32 M" def_val [31:0] $end
$var wire 32 *! din [31:0] $end
$var wire 32 E" qout [31:0] $end
$var reg 32 V" qout_r [31:0] $end
$upscope $end
$scope module csr_rdata_ff $end
$var wire 1 0 clk $end
$var wire 1 1 rst $end
$var wire 1 =" hold_en $end
$var wire 32 M" def_val [31:0] $end
$var wire 32 )! din [31:0] $end
$var wire 32 F" qout [31:0] $end
$var reg 32 W" qout_r [31:0] $end
$upscope $end
$scope module op1_ff $end
$var wire 1 0 clk $end
$var wire 1 1 rst $end
$var wire 1 =" hold_en $end
$var wire 32 M" def_val [31:0] $end
$var wire 32 +! din [31:0] $end
$var wire 32 G" qout [31:0] $end
$var reg 32 X" qout_r [31:0] $end
$upscope $end
$scope module op2_ff $end
$var wire 1 0 clk $end
$var wire 1 1 rst $end
$var wire 1 =" hold_en $end
$var wire 32 M" def_val [31:0] $end
$var wire 32 ,! din [31:0] $end
$var wire 32 H" qout [31:0] $end
$var reg 32 Y" qout_r [31:0] $end
$upscope $end
$scope module op1_jump_ff $end
$var wire 1 0 clk $end
$var wire 1 1 rst $end
$var wire 1 =" hold_en $end
$var wire 32 M" def_val [31:0] $end
$var wire 32 -! din [31:0] $end
$var wire 32 I" qout [31:0] $end
$var reg 32 Z" qout_r [31:0] $end
$upscope $end
$scope module op2_jump_ff $end
$var wire 1 0 clk $end
$var wire 1 1 rst $end
$var wire 1 =" hold_en $end
$var wire 32 M" def_val [31:0] $end
$var wire 32 .! din [31:0] $end
$var wire 32 J" qout [31:0] $end
$var reg 32 [" qout_r [31:0] $end
$upscope $end
$upscope $end
$scope module u_ex $end
$var wire 1 0 clk $end
$var wire 1 1 rst $end
$var wire 32 /! inst_i [31:0] $end
$var wire 32 0! inst_addr_i [31:0] $end
$var wire 1 1! reg_we_i $end
$var wire 5 2! reg_waddr_i [4:0] $end
$var wire 32 3! reg1_rdata_i [31:0] $end
$var wire 32 4! reg2_rdata_i [31:0] $end
$var wire 1 5! csr_we_i $end
$var wire 32 6! csr_waddr_i [31:0] $end
$var wire 32 7! csr_rdata_i [31:0] $end
$var wire 1 h! int_assert_i $end
$var wire 32 g! int_addr_i [31:0] $end
$var wire 32 8! op1_i [31:0] $end
$var wire 32 9! op2_i [31:0] $end
$var wire 32 :! op1_jump_i [31:0] $end
$var wire 32 ;! op2_jump_i [31:0] $end
$var wire 32 C mem_rdata_i [31:0] $end
$var wire 1 `! div_ready_i $end
$var wire 32 _! div_result_i [31:0] $end
$var wire 1 a! div_busy_i $end
$var wire 5 b! div_reg_waddr_i [4:0] $end
$var reg 32 \" mem_wdata_o [31:0] $end
$var reg 32 ]" mem_raddr_o [31:0] $end
$var reg 32 ^" mem_waddr_o [31:0] $end
$var wire 1 ?! mem_we_o $end
$var wire 1 @! mem_req_o $end
$var wire 32 A! reg_wdata_o [31:0] $end
$var wire 1 B! reg_we_o $end
$var wire 5 C! reg_waddr_o [4:0] $end
$var reg 32 _" csr_wdata_o [31:0] $end
$var wire 1 M! csr_we_o $end
$var wire 32 N! csr_waddr_o [31:0] $end
$var wire 1 G! div_start_o $end
$var reg 32 `" div_dividend_o [31:0] $end
$var reg 32 a" div_divisor_o [31:0] $end
$var reg 3 b" div_op_o [2:0] $end
$var reg 5 c" div_reg_waddr_o [4:0] $end
$var wire 1 O! log_start_o $end
$var wire 2048 P! log_data_in [2047:0] $end
$var wire 1 j! log_ready_i $end
$var wire 32 R! log_result_i [31:0] $end
$var wire 1 S! log_busy_i $end
$var wire 1 D! hold_flag_o $end
$var wire 1 E! jump_flag_o $end
$var wire 32 F! jump_addr_o [31:0] $end
$var reg 1 d" log_we $end
$var reg 5 e" log_waddr [4:0] $end
$var reg 32 f" log_wdata [31:0] $end
$var reg 1 g" log_start $end
$var wire 2 h" mem_raddr_index [1:0] $end
$var wire 2 i" mem_waddr_index [1:0] $end
$var wire 64 j" mul_temp [63:0] $end
$var wire 64 k" mul_temp_invert [63:0] $end
$var wire 32 l" sr_shift [31:0] $end
$var wire 32 m" sri_shift [31:0] $end
$var wire 32 n" sr_shift_mask [31:0] $end
$var wire 32 o" sri_shift_mask [31:0] $end
$var wire 32 p" op1_add_op2_res [31:0] $end
$var wire 32 q" op1_jump_add_op2_jump_res [31:0] $end
$var wire 32 r" reg1_data_invert [31:0] $end
$var wire 32 s" reg2_data_invert [31:0] $end
$var wire 1 t" op1_ge_op2_signed $end
$var wire 1 u" op1_ge_op2_unsigned $end
$var wire 1 v" op1_eq_op2 $end
$var reg 32 w" mul_op1 [31:0] $end
$var reg 32 x" mul_op2 [31:0] $end
$var wire 7 y" opcode [6:0] $end
$var wire 3 z" funct3 [2:0] $end
$var wire 7 {" funct7 [6:0] $end
$var wire 5 |" rd [4:0] $end
$var wire 5 }" uimm [4:0] $end
$var reg 32 ~" reg_wdata [31:0] $end
$var reg 1 !# reg_we $end
$var reg 5 "# reg_waddr [4:0] $end
$var reg 32 ## div_wdata [31:0] $end
$var reg 1 $# div_we $end
$var reg 5 %# div_waddr [4:0] $end
$var reg 1 &# div_hold_flag $end
$var reg 1 '# div_jump_flag $end
$var reg 32 (# div_jump_addr [31:0] $end
$var reg 1 )# hold_flag $end
$var reg 1 *# jump_flag $end
$var reg 32 +# jump_addr [31:0] $end
$var reg 1 ,# mem_we $end
$var reg 1 -# mem_req $end
$var reg 1 .# div_start $end
$var wire 2048 /# data_in [2047:0] $end
$var wire 1 0# custom_add $end
$upscope $end
$scope module loga $end
$var wire 1 0 clk $end
$var wire 1 1 rst $end
$var wire 1 O! valid_in $end
$var wire 2048 P! data_in [2047:0] $end
$var reg 1 1# valid_out $end
$var reg 32 2# sum [31:0] $end
$var wire 1 S! log_busy $end
$var reg 1 3# valid $end
$var reg 32 4# stage6 [31:0] $end
$var reg 1 5# valid_stage1 $end
$var reg 1 6# valid_stage2 $end
$var reg 1 7# valid_stage3 $end
$var reg 1 8# valid_stage4 $end
$var reg 1 9# valid_stage5 $end
$var reg 1 :# valid_stage6 $end
$var reg 1 ;# start $end
$var integer 32 <# i [31:0] $end
$upscope $end
$scope module u_div $end
$var wire 1 0 clk $end
$var wire 1 1 rst $end
$var wire 32 H! dividend_i [31:0] $end
$var wire 32 I! divisor_i [31:0] $end
$var wire 1 G! start_i $end
$var wire 3 J! op_i [2:0] $end
$var wire 5 K! reg_waddr_i [4:0] $end
$var reg 32 =# result_o [31:0] $end
$var reg 1 ># ready_o $end
$var reg 1 ?# busy_o $end
$var reg 5 @# reg_waddr_o [4:0] $end
$var reg 32 A# dividend_r [31:0] $end
$var reg 32 B# divisor_r [31:0] $end
$var reg 3 C# op_r [2:0] $end
$var reg 4 D# state [3:0] $end
$var reg 32 E# count [31:0] $end
$var reg 32 F# div_result [31:0] $end
$var reg 32 G# div_remain [31:0] $end
$var reg 32 H# minuend [31:0] $end
$var reg 1 I# invert_result $end
$var wire 1 J# op_div $end
$var wire 1 K# op_divu $end
$var wire 1 L# op_rem $end
$var wire 1 M# op_remu $end
$var wire 32 N# dividend_invert [31:0] $end
$var wire 32 O# divisor_invert [31:0] $end
$var wire 1 P# minuend_ge_divisor $end
$var wire 32 Q# minuend_sub_res [31:0] $end
$var wire 32 R# div_result_tmp [31:0] $end
$var wire 32 S# minuend_tmp [31:0] $end
$upscope $end
$scope module u_clint $end
$var wire 1 0 clk $end
$var wire 1 1 rst $end
$var wire 8 | int_flag_i [7:0] $end
$var wire 32 !! inst_i [31:0] $end
$var wire 32 "! inst_addr_i [31:0] $end
$var wire 1 E! jump_flag_i $end
$var wire 32 F! jump_addr_i [31:0] $end
$var wire 1 G! div_started_i $end
$var wire 3 \! hold_flag_i [2:0] $end
$var wire 32 W! data_i [31:0] $end
$var wire 32 Y! csr_mtvec [31:0] $end
$var wire 32 Z! csr_mepc [31:0] $end
$var wire 32 [! csr_mstatus [31:0] $end
$var wire 1 X! global_int_en_i $end
$var wire 1 i! hold_flag_o $end
$var reg 1 T# we_o $end
$var reg 32 U# waddr_o [31:0] $end
$var reg 32 V# raddr_o [31:0] $end
$var reg 32 W# data_o [31:0] $end
$var reg 32 X# int_addr_o [31:0] $end
$var reg 1 Y# int_assert_o $end
$var reg 4 Z# int_state [3:0] $end
$var reg 5 [# csr_state [4:0] $end
$var reg 32 \# inst_addr [31:0] $end
$var reg 32 ]# cause [31:0] $end
$upscope $end
$upscope $end
$scope module u_rom $end
$var wire 1 0 clk $end
$var wire 1 1 rst $end
$var wire 1 X we_i $end
$var wire 32 U addr_i [31:0] $end
$var wire 32 V data_i [31:0] $end
$var reg 32 ^# data_o [31:0] $end
$upscope $end
$scope module u_ram $end
$var wire 1 0 clk $end
$var wire 1 1 rst $end
$var wire 1 \ we_i $end
$var wire 32 Y addr_i [31:0] $end
$var wire 32 Z data_i [31:0] $end
$var reg 32 _# data_o [31:0] $end
$upscope $end
$scope module timer_0 $end
$var wire 1 0 clk $end
$var wire 1 1 rst $end
$var wire 32 ^ data_i [31:0] $end
$var wire 32 ] addr_i [31:0] $end
$var wire 1 ` we_i $end
$var reg 32 `# data_o [31:0] $end
$var wire 1 u int_sig_o $end
$var reg 32 a# timer_ctrl [31:0] $end
$var reg 32 b# timer_count [31:0] $end
$var reg 32 c# timer_value [31:0] $end
$upscope $end
$scope module uart_0 $end
$var wire 1 0 clk $end
$var wire 1 1 rst $end
$var wire 1 d we_i $end
$var wire 32 a addr_i [31:0] $end
$var wire 32 b data_i [31:0] $end
$var reg 32 d# data_o [31:0] $end
$var wire 1 6 tx_pin $end
$var wire 1 7 rx_pin $end
$var reg 1 e# tx_data_valid $end
$var reg 1 f# tx_data_ready $end
$var reg 4 g# state [3:0] $end
$var reg 16 h# cycle_cnt [15:0] $end
$var reg 4 i# bit_cnt [3:0] $end
$var reg 8 j# tx_data [7:0] $end
$var reg 1 k# tx_reg $end
$var reg 1 l# rx_q0 $end
$var reg 1 m# rx_q1 $end
$var wire 1 n# rx_negedge $end
$var reg 1 o# rx_start $end
$var reg 4 p# rx_clk_edge_cnt [3:0] $end
$var reg 1 q# rx_clk_edge_level $end
$var reg 1 r# rx_done $end
$var reg 16 s# rx_clk_cnt [15:0] $end
$var reg 16 t# rx_div_cnt [15:0] $end
$var reg 8 u# rx_data [7:0] $end
$var reg 1 v# rx_over $end
$var reg 32 w# uart_ctrl [31:0] $end
$var reg 32 x# uart_status [31:0] $end
$var reg 32 y# uart_baud [31:0] $end
$var reg 32 z# uart_rx [31:0] $end
$upscope $end
$scope module gpio_0 $end
$var wire 1 0 clk $end
$var wire 1 1 rst $end
$var wire 1 h we_i $end
$var wire 32 e addr_i [31:0] $end
$var wire 32 f data_i [31:0] $end
$var reg 32 {# data_o [31:0] $end
$var wire 2 v io_pin_i [1:0] $end
$var wire 32 w reg_ctrl [31:0] $end
$var wire 32 x reg_data [31:0] $end
$var reg 32 |# gpio_ctrl [31:0] $end
$var reg 32 }# gpio_data [31:0] $end
$upscope $end
$scope module spi_0 $end
$var wire 1 0 clk $end
$var wire 1 1 rst $end
$var wire 32 j data_i [31:0] $end
$var wire 32 i addr_i [31:0] $end
$var wire 1 l we_i $end
$var reg 32 ~# data_o [31:0] $end
$var reg 1 !$ spi_mosi $end
$var wire 1 = spi_miso $end
$var wire 1 ? spi_ss $end
$var reg 1 "$ spi_clk $end
$var reg 32 #$ spi_ctrl [31:0] $end
$var reg 32 $$ spi_data [31:0] $end
$var reg 32 %$ spi_status [31:0] $end
$var reg 9 &$ clk_cnt [8:0] $end
$var reg 1 '$ en $end
$var reg 5 ($ spi_clk_edge_cnt [4:0] $end
$var reg 1 )$ spi_clk_edge_level $end
$var reg 8 *$ rdata [7:0] $end
$var reg 1 +$ done $end
$var reg 4 ,$ bit_index [3:0] $end
$var wire 9 -$ div_cnt [8:0] $end
$upscope $end
$scope module u_rib $end
$var wire 1 0 clk $end
$var wire 1 1 rst $end
$var wire 32 A m0_addr_i [31:0] $end
$var wire 32 B m0_data_i [31:0] $end
$var reg 32 .$ m0_data_o [31:0] $end
$var wire 1 D m0_req_i $end
$var wire 1 E m0_we_i $end
$var wire 32 F m1_addr_i [31:0] $end
$var wire 32 /$ m1_data_i [31:0] $end
$var reg 32 0$ m1_data_o [31:0] $end
$var wire 1 1$ m1_req_i $end
$var wire 1 2$ m1_we_i $end
$var wire 32 K m2_addr_i [31:0] $end
$var wire 32 L m2_data_i [31:0] $end
$var reg 32 3$ m2_data_o [31:0] $end
$var wire 1 N m2_req_i $end
$var wire 1 O m2_we_i $end
$var wire 32 P m3_addr_i [31:0] $end
$var wire 32 Q m3_data_i [31:0] $end
$var reg 32 4$ m3_data_o [31:0] $end
$var wire 1 S m3_req_i $end
$var wire 1 T m3_we_i $end
$var reg 32 5$ s0_addr_o [31:0] $end
$var reg 32 6$ s0_data_o [31:0] $end
$var wire 32 W s0_data_i [31:0] $end
$var reg 1 7$ s0_we_o $end
$var reg 32 8$ s1_addr_o [31:0] $end
$var reg 32 9$ s1_data_o [31:0] $end
$var wire 32 [ s1_data_i [31:0] $end
$var reg 1 :$ s1_we_o $end
$var reg 32 ;$ s2_addr_o [31:0] $end
$var reg 32 <$ s2_data_o [31:0] $end
$var wire 32 _ s2_data_i [31:0] $end
$var reg 1 =$ s2_we_o $end
$var reg 32 >$ s3_addr_o [31:0] $end
$var reg 32 ?$ s3_data_o [31:0] $end
$var wire 32 c s3_data_i [31:0] $end
$var reg 1 @$ s3_we_o $end
$var reg 32 A$ s4_addr_o [31:0] $end
$var reg 32 B$ s4_data_o [31:0] $end
$var wire 32 g s4_data_i [31:0] $end
$var reg 1 C$ s4_we_o $end
$var reg 32 D$ s5_addr_o [31:0] $end
$var reg 32 E$ s5_data_o [31:0] $end
$var wire 32 k s5_data_i [31:0] $end
$var reg 1 F$ s5_we_o $end
$var reg 1 G$ hold_flag_o $end
$var wire 4 H$ req [3:0] $end
$var reg 2 I$ grant [1:0] $end
$upscope $end
$scope module u_uart_debug $end
$var wire 1 0 clk $end
$var wire 1 1 rst $end
$var wire 1 5 debug_en_i $end
$var wire 1 S req_o $end
$var reg 1 J$ mem_we_o $end
$var reg 32 K$ mem_addr_o [31:0] $end
$var reg 32 L$ mem_wdata_o [31:0] $end
$var wire 32 R mem_rdata_i [31:0] $end
$var reg 14 M$ state [13:0] $end
$var reg 8 N$ rec_bytes_index [7:0] $end
$var reg 8 O$ need_to_rec_bytes [7:0] $end
$var reg 16 P$ remain_packet_count [15:0] $end
$var reg 32 Q$ fw_file_size [31:0] $end
$var reg 32 R$ write_mem_addr [31:0] $end
$var reg 32 S$ write_mem_data [31:0] $end
$var reg 8 T$ write_mem_byte_index0 [7:0] $end
$var reg 8 U$ write_mem_byte_index1 [7:0] $end
$var reg 8 V$ write_mem_byte_index2 [7:0] $end
$var reg 8 W$ write_mem_byte_index3 [7:0] $end
$var reg 16 X$ crc_result [15:0] $end
$var reg 4 Y$ crc_bit_index [3:0] $end
$var reg 8 Z$ crc_byte_index [7:0] $end
$upscope $end
$scope module u_jtag_top $end
$var wire 1 0 clk $end
$var wire 1 1 jtag_rst_n $end
$var wire 1 9 jtag_pin_TCK $end
$var wire 1 : jtag_pin_TMS $end
$var wire 1 ; jtag_pin_TDI $end
$var wire 1 < jtag_pin_TDO $end
$var wire 1 r reg_we_o $end
$var wire 5 p reg_addr_o [4:0] $end
$var wire 32 q reg_wdata_o [31:0] $end
$var wire 32 s reg_rdata_i [31:0] $end
$var wire 1 O mem_we_o $end
$var wire 32 K mem_addr_o [31:0] $end
$var wire 32 L mem_wdata_o [31:0] $end
$var wire 32 M mem_rdata_i [31:0] $end
$var wire 1 N op_req_o $end
$var wire 1 n halt_req_o $end
$var wire 1 o reset_req_o $end
$var wire 1 [$ dtm_ack_o $end
$var wire 1 \$ dtm_req_valid_o $end
$var wire 40 ]$ dtm_req_data_o [39:0] $end
$var wire 1 ^$ dm_ack_o $end
$var wire 40 _$ dm_resp_data_o [39:0] $end
$var wire 1 `$ dm_resp_valid_o $end
$var wire 1 a$ dm_op_req_o $end
$var wire 1 b$ dm_halt_req_o $end
$var wire 1 c$ dm_reset_req_o $end
$scope module u_jtag_driver $end
$var wire 1 1 rst_n $end
$var wire 1 9 jtag_TCK $end
$var wire 1 ; jtag_TDI $end
$var wire 1 : jtag_TMS $end
$var reg 1 d$ jtag_TDO $end
$var wire 1 `$ dm_resp_i $end
$var wire 40 _$ dm_resp_data_i [39:0] $end
$var wire 1 [$ dtm_ack_o $end
$var wire 1 ^$ dm_ack_i $end
$var wire 1 \$ dtm_req_valid_o $end
$var wire 40 ]$ dtm_req_data_o [39:0] $end
$var reg 5 e$ ir_reg [4:0] $end
$var reg 40 f$ shift_reg [39:0] $end
$var reg 4 g$ jtag_state [3:0] $end
$var wire 1 h$ is_busy $end
$var reg 1 i$ sticky_busy $end
$var reg 1 j$ dtm_req_valid $end
$var reg 40 k$ dtm_req_data [39:0] $end
$var reg 40 l$ dm_resp_data [39:0] $end
$var reg 1 m$ dm_is_busy $end
$var wire 6 n$ addr_bits [5:0] $end
$var wire 40 o$ busy_response [39:0] $end
$var wire 40 p$ none_busy_response [39:0] $end
$var wire 32 q$ idcode [31:0] $end
$var wire 32 r$ dtmcs [31:0] $end
$var wire 2 s$ dmi_stat [1:0] $end
$var wire 1 t$ dtm_reset $end
$var wire 1 u$ tx_idle $end
$var wire 1 v$ rx_valid $end
$var wire 40 w$ rx_data [39:0] $end
$var wire 1 x$ tx_valid $end
$var wire 40 y$ tx_data [39:0] $end
$scope module tx $end
$var wire 1 9 clk $end
$var wire 1 1 rst_n $end
$var wire 1 ^$ ack_i $end
$var wire 1 x$ req_i $end
$var wire 40 y$ req_data_i [39:0] $end
$var wire 1 u$ idle_o $end
$var wire 1 \$ req_o $end
$var wire 40 ]$ req_data_o [39:0] $end
$var reg 3 z$ state [2:0] $end
$var reg 3 {$ state_next [2:0] $end
$var reg 1 |$ ack_d $end
$var reg 1 }$ ack $end
$var reg 1 ~$ req $end
$var reg 40 !% req_data [39:0] $end
$var reg 1 "% idle $end
$upscope $end
$scope module rx $end
$var wire 1 9 clk $end
$var wire 1 1 rst_n $end
$var wire 1 `$ req_i $end
$var wire 40 _$ req_data_i [39:0] $end
$var wire 1 [$ ack_o $end
$var wire 40 w$ recv_data_o [39:0] $end
$var wire 1 v$ recv_rdy_o $end
$var reg 2 #% state [1:0] $end
$var reg 2 $% state_next [1:0] $end
$var reg 1 %% req_d $end
$var reg 1 &% req $end
$var reg 40 '% recv_data [39:0] $end
$var reg 1 (% recv_rdy $end
$var reg 1 )% ack $end
$upscope $end
$upscope $end
$scope module u_jtag_dm $end
$var wire 1 0 clk $end
$var wire 1 1 rst_n $end
$var wire 1 ^$ dm_ack_o $end
$var wire 1 \$ dtm_req_valid_i $end
$var wire 40 ]$ dtm_req_data_i [39:0] $end
$var wire 1 [$ dtm_ack_i $end
$var wire 40 _$ dm_resp_data_o [39:0] $end
$var wire 1 `$ dm_resp_valid_o $end
$var wire 1 r dm_reg_we_o $end
$var wire 5 p dm_reg_addr_o [4:0] $end
$var wire 32 q dm_reg_wdata_o [31:0] $end
$var wire 32 s dm_reg_rdata_i [31:0] $end
$var wire 1 O dm_mem_we_o $end
$var wire 32 K dm_mem_addr_o [31:0] $end
$var wire 32 L dm_mem_wdata_o [31:0] $end
$var wire 32 M dm_mem_rdata_i [31:0] $end
$var wire 1 N dm_op_req_o $end
$var wire 1 n dm_halt_req_o $end
$var wire 1 o dm_reset_req_o $end
$var reg 32 *% dcsr [31:0] $end
$var reg 32 +% dmstatus [31:0] $end
$var reg 32 ,% dmcontrol [31:0] $end
$var reg 32 -% hartinfo [31:0] $end
$var reg 32 .% abstractcs [31:0] $end
$var reg 32 /% data0 [31:0] $end
$var reg 32 0% sbcs [31:0] $end
$var reg 32 1% sbaddress0 [31:0] $end
$var reg 32 2% sbdata0 [31:0] $end
$var reg 32 3% command [31:0] $end
$var reg 32 4% read_data [31:0] $end
$var reg 1 5% dm_reg_we $end
$var reg 5 6% dm_reg_addr [4:0] $end
$var reg 32 7% dm_reg_wdata [31:0] $end
$var reg 1 8% dm_mem_we $end
$var reg 32 9% dm_mem_addr [31:0] $end
$var reg 32 :% dm_mem_wdata [31:0] $end
$var reg 1 ;% dm_halt_req $end
$var reg 1 <% dm_reset_req $end
$var reg 1 =% need_resp $end
$var reg 1 >% is_read_reg $end
$var wire 1 ?% rx_valid $end
$var wire 40 @% rx_data [39:0] $end
$var wire 32 A% sbaddress0_next [31:0] $end
$var wire 40 B% dm_resp_data [39:0] $end
$var wire 2 C% op [1:0] $end
$var wire 32 D% data [31:0] $end
$var wire 6 E% address [5:0] $end
$var wire 1 F% read_dmstatus $end
$var wire 1 G% tx_idle $end
$scope module tx $end
$var wire 1 0 clk $end
$var wire 1 1 rst_n $end
$var wire 1 [$ ack_i $end
$var wire 1 H% req_i $end
$var wire 40 B% req_data_i [39:0] $end
$var wire 1 G% idle_o $end
$var wire 1 `$ req_o $end
$var wire 40 _$ req_data_o [39:0] $end
$var reg 3 I% state [2:0] $end
$var reg 3 J% state_next [2:0] $end
$var reg 1 K% ack_d $end
$var reg 1 L% ack $end
$var reg 1 M% req $end
$var reg 40 N% req_data [39:0] $end
$var reg 1 O% idle $end
$upscope $end
$scope module rx $end
$var wire 1 0 clk $end
$var wire 1 1 rst_n $end
$var wire 1 \$ req_i $end
$var wire 40 ]$ req_data_i [39:0] $end
$var wire 1 ^$ ack_o $end
$var wire 40 @% recv_data_o [39:0] $end
$var wire 1 ?% recv_rdy_o $end
$var reg 2 P% state [1:0] $end
$var reg 2 Q% state_next [1:0] $end
$var reg 1 R% req_d $end
$var reg 1 S% req $end
$var reg 40 T% recv_data [39:0] $end
$var reg 1 U% recv_rdy $end
$var reg 1 V% ack $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end

#0
$dumpvars
0!
bx !!
b1 !"
x!#
x!$
b0 !%
0"
bx "!
bx ""
bx "#
x"$
1"%
bx #
b0 #!
b0 #"
bx ##
bx #$
b1 #%
bx $
b0 $!
bx $"
x$#
bx $$
b1 $%
bx %
0%!
b0 %"
bx %#
bx %$
0%%
x&
b0 &!
bx &"
x&#
bx &$
0&%
x'
b0 '!
b0 '"
x'#
x'$
b0 '%
b0 (
0(!
b0 ("
bx (#
bx ($
0(%
bx )
b0 )!
b0 )"
0)#
x)$
0)%
bx *
b0 *!
b0 *"
0*#
bx *$
b0 *%
b1 +
b0 +!
b0 +"
b0 +#
x+$
b10000110000110010000010 +%
x,
b0 ,!
b0 ,"
0,#
bx ,$
b0 ,%
b1000000000000000000000000000000001111110000000000000000000000000011111000000000000000000000000000111101000000000000000000000000001111000000000000000000000000000011101100000000000000000000000000111010000000000000000000000000001110010000000000000000000000000011100000000000000000000000000000110111000000000000000000000000001101100000000000000000000000000011010100000000000000000000000000110100000000000000000000000000001100110000000000000000000000000011001000000000000000000000000000110001000000000000000000000000001100000000000000000000000000000010111100000000000000000000000000101110000000000000000000000000001011010000000000000000000000000010110000000000000000000000000000101011000000000000000000000000001010100000000000000000000000000010100100000000000000000000000000101000000000000000000000000000001001110000000000000000000000000010011000000000000000000000000000100101000000000000000000000000001001000000000000000000000000000010001100000000000000000000000000100010000000000000000000000000001000010000000000000000000000000010000000000000000000000000000000011111000000000000000000000000000111100000000000000000000000000001110100000000000000000000000000011100000000000000000000000000000110110000000000000000000000000001101000000000000000000000000000011001000000000000000000000000000110000000000000000000000000000001011100000000000000000000000000010110000000000000000000000000000101010000000000000000000000000001010000000000000000000000000000010011000000000000000000000000000100100000000000000000000000000001000100000000000000000000000000010000000000000000000000000000000011110000000000000000000000000000111000000000000000000000000000001101000000000000000000000000000011000000000000000000000000000000101100000000000000000000000000001010000000000000000000000000000010010000000000000000000000000000100000000000000000000000000000000111000000000000000000000000000001100000000000000000000000000000010100000000000000000000000000000100000000000000000000000000000000110000000000000000000000000000001000000000000000000000000000000001 -
b0 -!
b0 -"
0-#
b0xxxxxxxx -$
b0 -%
bx .
b0 .!
bx ."
x.#
b0 .$
b1000000000000000000000011 .%
bx /
bx /!
bx /"
b1000000000000000000000000000000001111110000000000000000000000000011111000000000000000000000000000111101000000000000000000000000001111000000000000000000000000000011101100000000000000000000000000111010000000000000000000000000001110010000000000000000000000000011100000000000000000000000000000110111000000000000000000000000001101100000000000000000000000000011010100000000000000000000000000110100000000000000000000000000001100110000000000000000000000000011001000000000000000000000000000110001000000000000000000000000001100000000000000000000000000000010111100000000000000000000000000101110000000000000000000000000001011010000000000000000000000000010110000000000000000000000000000101011000000000000000000000000001010100000000000000000000000000010100100000000000000000000000000101000000000000000000000000000001001110000000000000000000000000010011000000000000000000000000000100101000000000000000000000000001001000000000000000000000000000010001100000000000000000000000000100010000000000000000000000000001000010000000000000000000000000010000000000000000000000000000000011111000000000000000000000000000111100000000000000000000000000001110100000000000000000000000000011100000000000000000000000000000110110000000000000000000000000001101000000000000000000000000000011001000000000000000000000000000110000000000000000000000000000001011100000000000000000000000000010110000000000000000000000000000101010000000000000000000000000001010000000000000000000000000000010011000000000000000000000000000100100000000000000000000000000001000100000000000000000000000000010000000000000000000000000000000011110000000000000000000000000000111000000000000000000000000000001101000000000000000000000000000011000000000000000000000000000000101100000000000000000000000000001010000000000000000000000000000010010000000000000000000000000000100000000000000000000000000000000111000000000000000000000000000001100000000000000000000000000000010100000000000000000000000000000100000000000000000000000000000000110000000000000000000000000000001000000000000000000000000000000001 /#
b0 /$
b0 /%
00
bx 0!
b0 0"
x0#
b1 0$
b100000000001000000010000000100 0%
01
x1!
b0 1"
x1#
11$
b0 1%
x2
bx 2!
02"
bx 2#
02$
b0 2%
x3
bx 3!
b0 3"
x3#
b0 3$
b0 3%
14
bx 4!
04"
bx 4#
b0 4$
b0 4%
05
x5!
b0 5"
x5#
b0 5$
05%
x6
bx 6!
b0 6"
x6#
b0 6$
b0 6%
z7
bx 7!
bx 7"
x7#
07$
b0 7%
bx 8
bx 8!
bx 8"
x8#
b0 8$
08%
z9
bx 9!
bx 9"
x9#
b0 9$
b0 9%
z:
bx :!
bx :"
x:#
0:$
b0 :%
z;
bx ;!
bx ;"
x;#
b0 ;$
0;%
x<
b0 <!
bx <"
bx <#
b0 <$
0<%
z=
b0 =!
0="
bx =#
0=$
0=%
x>
b0 >!
bx >"
x>#
b0 >$
0>%
x?
0?!
bx ?"
x?#
b0 ?$
0?%
x@
0@!
x@"
bx @#
0@$
b0 @%
b0 A
bx A!
bx A"
bx A#
b0 A$
b100 A%
b0 B
xB!
bx B"
bx B#
b0 B$
b0 B%
b0 C
bx C!
bx C"
bx C#
0C$
b0 C%
0D
xD!
xD"
bx D#
b0 D$
b0 D%
0E
xE!
bx E"
bx E#
b0 E$
b0 E%
bx F
bx F!
bx F"
bx F#
0F$
0F%
bz G
xG!
bx G"
bx G#
0G$
1G%
b1 H
bx H!
bx H"
bx H#
b10 H$
0H%
zI
bx I!
bx I"
xI#
b1 I$
b1 I%
zJ
bx J!
bx J"
xJ#
xJ$
b1 J%
b0 K
bx K!
b1 K"
xK#
bx K$
0K%
b0 L
b0 L!
bx L"
xL#
bx L$
0L%
b0 M
xM!
b0 M"
xM#
bx M$
0M%
0N
bx N!
bx N"
bx N#
bx N$
b0 N%
0O
xO!
0O"
bx O#
bx O$
1O%
bx P
b1000000000000000000000000000000001111110000000000000000000000000011111000000000000000000000000000111101000000000000000000000000001111000000000000000000000000000011101100000000000000000000000000111010000000000000000000000000001110010000000000000000000000000011100000000000000000000000000000110111000000000000000000000000001101100000000000000000000000000011010100000000000000000000000000110100000000000000000000000000001100110000000000000000000000000011001000000000000000000000000000110001000000000000000000000000001100000000000000000000000000000010111100000000000000000000000000101110000000000000000000000000001011010000000000000000000000000010110000000000000000000000000000101011000000000000000000000000001010100000000000000000000000000010100100000000000000000000000000101000000000000000000000000000001001110000000000000000000000000010011000000000000000000000000000100101000000000000000000000000001001000000000000000000000000000010001100000000000000000000000000100010000000000000000000000000001000010000000000000000000000000010000000000000000000000000000000011111000000000000000000000000000111100000000000000000000000000001110100000000000000000000000000011100000000000000000000000000000110110000000000000000000000000001101000000000000000000000000000011001000000000000000000000000000110000000000000000000000000000001011100000000000000000000000000010110000000000000000000000000000101010000000000000000000000000001010000000000000000000000000000010011000000000000000000000000000100100000000000000000000000000001000100000000000000000000000000010000000000000000000000000000000011110000000000000000000000000000111000000000000000000000000000001101000000000000000000000000000011000000000000000000000000000000101100000000000000000000000000001010000000000000000000000000000010010000000000000000000000000000100000000000000000000000000000000111000000000000000000000000000001100000000000000000000000000000010100000000000000000000000000000100000000000000000000000000000000110000000000000000000000000000001000000000000000000000000000000001 P!
xP"
xP#
bx P$
b1 P%
bx Q
zQ!
b0 Q"
bx Q#
bx Q$
b1 Q%
b0 R
bx R!
bx R"
bx R#
bx R$
0R%
0S
xS!
bx S"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx S#
bx S$
0S%
xT
b0 T!
bx T"
xT#
bx T$
b0 T%
b0 U
b0 U!
xU"
bx U#
bx U$
0U%
b0 V
b0 V!
bx V"
bx V#
bx V$
0V%
b0 W
bx W!
bx W"
bx W#
bx W$
0X
xX!
bx X"
bx X#
bx X$
b0 Y
bx Y!
bx Y"
xY#
bx Y$
b0 Z
bx Z!
bx Z"
b1 Z#
bx Z$
b0 [
bx [!
bx ["
bx [#
0[$
0\
b0 \!
b0 \"
bx \#
0\$
b0 ]
x]!
b0 ]"
bx ]#
b0 ]$
b0 ^
bx ^!
b0 ^"
b0 ^#
0^$
b0 _
bx _!
b0 _"
b0 _#
b0 _$
0`
x`!
bx `"
b0 `#
0`$
b0 a
xa!
bx a"
bx a#
za$
b0 b
bx b!
bx b"
bx b#
zb$
b0 c
xc!
bx c"
bx c#
zc$
0d
bx d!
xd"
b0 d#
xd$
b0 e
bx e!
bx e"
xe#
bx e$
b0 f
bx f!
bx f"
xf#
bx f$
b0 g
bx g!
xg"
bx g#
b0 g$
0h
xh!
bx h"
bx h#
0h$
b0 i
xi!
bx i"
bx i#
0i$
b0 j
xj!
bx j"
bx j#
0j$
b0 k
bx k!
bx k"
xk#
b0 k$
0l
b0 l!
bx l"
xl#
b0 l$
0m
xm!
bx m"
xm#
0m$
0n
bx n!
bx n"
xn#
b110 n$
0o
b0 o!
bx o"
xo#
b11 o$
b0 p
b0 p!
bx p"
bx p#
b0 p$
b0 q
b0 q!
bx q"
xq#
b11110001000000000101001101111 q$
0r
bx r!
bx r"
xr#
b101000001100001 r$
b0 s
b0 s!
bx s"
bx s#
b0 s$
b0x t
bx t!
xt"
bx t#
xt$
xu
bx u!
xu"
bx u#
1u$
bx v
bx v!
xv"
xv#
0v$
bx w
bx w!
bx w"
bx w#
b0 w$
bx x
bx x!
bx x"
bx x#
0x$
bx y
bx y!
bx y"
bx y#
b0 y$
bx z
bx z!
bx z"
bx z#
b1 z$
bx {
0{!
bx {"
b0 {#
b1 {$
bx |
bx |!
bx |"
bx |#
0|$
b0 }
bx }!
bx }"
bx }#
0}$
b0 ~
bx ~!
b0 ~"
b0 ~#
0~$
$end

#10000
1!
b1 !!
0!#
0!$
b0 "!
b1 ""
b0 "#
0"$
b0 ##
b0 #$
b0 $"
0$#
b0 $$
b0 %#
b0 %$
0&
b0 &"
0&#
b0 &$
0'#
0'$
b0 (#
b0 ($
b0 )
0)$
b1 *
b0 *$
b0 +
0+$
b0 ,$
b0 -$
b1 ."
0.#
b1 /!
b0 /"
10
b0 0!
10#
b0 0$
01!
12
b0 2!
13
b0 3!
b0 4!
05!
05#
06
b0 6!
b0 7!
b1 7"
bz 8
b0 8!
b0 8"
b0 9!
b0 9"
b0 :!
b0 :"
b0 ;!
b0 ;"
b0 <"
b10 <#
b0 =#
0>
b1 >"
0>#
1?
b0 ?"
0?#
0@
0@"
b0 @#
b0 A!
b0 A"
b0 A#
0B!
b0 B"
b0 B#
b0 C!
b0 C"
b0 C#
0D!
0D"
b1 D#
0E!
b0 E"
b0 E#
b0 F
b0 F!
b0 F"
b0 F#
0G!
b0 G"
b0 G#
b0 H
b0 H!
b0 H"
b0 H#
b0 I!
b0 I"
0I#
b0 J!
b0 J"
0J#
0J$
b0 K!
0K#
b0 K$
b1 L"
0L#
b0 L$
0M!
0M#
b1 M$
b0 N!
b0 N"
b0 N#
b0 N$
0O!
b0 O#
b0 O$
b0 P
0P"
1P#
b0 P$
b0 Q
b0 Q#
b0 Q$
b0 R"
b1 R#
b0 R$
b0 S"
b0 S#
b0 S$
0T
b0 T"
0T#
b0 T$
0U"
b0 U#
b0 U$
b0 V"
b0 V$
b0 W!
b0 W"
b0 W#
b0 W$
0X!
b0 X"
b0 X#
b0 X$
b0 Y!
b0 Y"
0Y#
b0 Y$
b0 Z!
b0 Z"
b0 Z$
b0 [!
b0 ["
b1 [#
b0 \#
0]!
b0 ]#
b0 ^!
b0 _!
0`!
b0 `"
0a!
b0 a"
b0 a#
b0 b!
b0 b"
b0 b#
0c!
b0 c"
b0 c#
b0 d!
0d"
0e#
b0 f!
0f#
b0 g!
0g"
b1 g#
0h!
b0 h"
b0 h#
0i!
b0 i"
b0 i#
b0 j"
b0 k!
b0 k"
0k#
b0 l"
0l#
0m!
b0 m"
0m#
b0 n!
b11111111111111111111111111111111 n"
0n#
b11111111111111111111111111111111 o"
0o#
b0 p"
b0 p#
b0 q"
0q#
b0 r!
b0 r"
b0 s"
b0 s#
b0 t
b0 t!
1t"
b0 t#
0u
b0 u!
1u"
b0 u#
bz v
b0 v!
1v"
0v#
b0 w
b0 w!
b0 w"
b0 w#
b0 x
b0 x!
b0 x"
b0 x#
b0 y
b0 y!
b1 y"
b110111000 y#
b1 z
b0 z!
b0 z"
b0 z#
b0 {
b0 {"
b0 |
b1 |!
b0 |"
b0 |#
b0 }!
b0 }"
b0 }#
b0 ~!

#20000
0!
1"
b10000000001100000110101011 +
00
b10000000001100000110101011 0$
11
b10000000001100000110101011 H
b10000000001100000110101011 W
bx [
b10000000001100000110101011 ^#
bx _#

#30000
1!
b10000000001100000110101011 !!
b10000000001100000110101011 ""
b11 &!
0'
b100 )
b10000000001101000110101011 +
0,
b110 ,$
b0 .
b10000000001100000110101011 ."
10
b10000000001101000110101011 0$
01#
x2
b0 2#
x3
b11 3"
b0 4#
b100 5$
16
06#
b101011 7"
07#
b100 8"
08#
b1 9"
09#
b11 :"
0:#
b1 ;"
b100 F
b10000000001101000110101011 H
b0 R!
0S!
b100 U
b10000000001101000110101011 W
b10000000001101000110101011 ^#
0j!
b100 k!
1k#
zl#
b1 t!
b110111000 t#
b100 y
b10000000001100000110101011 z
b10000000001100000110101011 |!

#40000
0!
00

#50000
1!
b10000000001101000110101011 !!
b100 "!
b10000000001101000110101011 ""
b11 "#
b100 $"
1&
b0 &!
0&#
b1000 )
b10000000001100000110101011 *
bx +
b10000000001101000110101011 ."
b10000000001100000110101011 /!
b100 /"
10
bx 0$
b11 2!
b0 3"
b1000 5$
b101 8"
b10000000001100000110101011 >"
b11 A"
b11 C!
b1000 F
bx H
b100 J!
b11 K!
b10000000001100000110101011 L"
1O!
b11 R"
b1000 U
bx W
bx ^#
b100 b"
b11 c"
1g"
b11 i"
b1000 k!
zm#
xn#
b10 t!
b1000 y
b101011 y"
b10000000001101000110101011 z
b100 z"
b100 {
b1 {"
b10000000001101000110101011 |!
b11 |"
b100 }!
b1 }"

#60000
0!
0"
b0 +
00
b0 0$
01
b1000 5$
b0 H
b0 W
b0 [
b0 ^#
b0 _#

#70000
1!
b1 !!
b0 "!
b1 ""
b0 "#
b0 $"
0&
b0 )
b1 *
b0 ,$
b1 ."
b1 /!
b0 /"
10
b0 0$
12
b0 2!
13
13#
05#
b0 5$
06
b1 7"
b0 8"
b0 9"
b0 :"
b0 ;"
b10 <#
b1 >"
b0 A"
b0 C!
b0 F
b0 J!
b0 K!
b1 L"
0O!
b0 R"
b0 U
b0 b"
b0 c"
0g"
b0 i"
b0 k!
0k#
0l#
0m#
0n#
b0 t!
b0 t#
b0 y
b1 y"
b1 z
b0 z"
b0 {
b0 {"
b1 |!
b0 |"
b0 }!
b0 }"

#80000
0!
00

#90000
1!
10
03#
b10 <#

#100000
0!
00

#110000
1!
10
b10 <#

#120000
0!
00

#130000
1!
10
b10 <#

#140000
0!
00

#150000
1!
10
b10 <#

#160000
0!
00

#170000
1!
10
b10 <#

#180000
0!
00

#190000
1!
10
b100000100000 4#
b10 <#

#200000
0!
00

#210000
1!
b100000100000 .
10
b100000100000 2#
b10 <#
b100000100000 R!

#220000
0!
00

#230000
1!
10
b10 <#

#240000
0!
00

#250000
1!
10
b10 <#

#260000
0!
00

#270000
1!
10
b10 <#

#280000
0!
00

#290000
1!
10
b10 <#

#300000
0!
00

#310000
1!
10
b10 <#

#320000
0!
00

#330000
1!
10
b10 <#

#340000
0!
00

#350000
1!
10
b10 <#

#360000
0!
00

#370000
1!
10
b10 <#

#380000
0!
00

#390000
1!
10
b10 <#

#400000
0!
00

#410000
1!
10
b10 <#

#420000
0!
00

#430000
1!
10
b10 <#

#440000
0!
00

#450000
1!
10
b10 <#

#460000
0!
00

#470000
1!
10
b10 <#

#480000
0!
00

#490000
1!
10
b10 <#

#500000
0!
00

#510000
1!
10
b10 <#

#520000
0!
00

#530000
1!
10
b10 <#

#540000
0!
00

#550000
1!
10
b10 <#

#560000
0!
00

#570000
1!
10
b10 <#

#580000
0!
00

#590000
1!
10
b10 <#

#600000
0!
00

#610000
1!
10
b10 <#

#620000
0!
00

#630000
1!
10
b10 <#

#640000
0!
00

#650000
1!
10
b10 <#

#660000
0!
00

#670000
1!
10
b10 <#

#680000
0!
00

#690000
1!
10
b10 <#

#700000
0!
00

#710000
1!
10
b10 <#

#720000
0!
00

#730000
1!
10
b10 <#

#740000
0!
00

#750000
1!
10
b10 <#

#760000
0!
00

#770000
1!
10
b10 <#

#780000
0!
00

#790000
1!
10
b10 <#

#800000
0!
00

#810000
1!
10
b10 <#

#820000
0!
00

#830000
1!
10
b10 <#

#840000
0!
00

#850000
1!
10
b10 <#

#860000
0!
00

#870000
1!
10
b10 <#

#880000
0!
00

#890000
1!
10
b10 <#

#900000
0!
00

#910000
1!
10
b10 <#

#920000
0!
00

#930000
1!
10
b10 <#

#940000
0!
00

#950000
1!
10
b10 <#

#960000
0!
00

#970000
1!
10
b10 <#

#980000
0!
00

#990000
1!
10
b10 <#

#1000000
0!
00
