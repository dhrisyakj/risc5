$date
   Tue May 27 08:11:05 2025
$end

$version
  2024.1
  $dumpfile ("tinyrisc_mac_tb.vcd") 
$end

$timescale
  1ps
$end

$scope module tinyrisc_mac_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$var wire 32 # if_inst_i [31:0] $end
$var wire 32 $ if_inst_d [31:0] $end
$var wire 32 % ex_inst_o [31:0] $end
$var wire 32 & mac_reg [31:0] $end
$var wire 32 ' ex_wdata [31:0] $end
$var wire 32 ( ex_waddr [31:0] $end
$var wire 1 ) we_i $end
$var wire 1 * write_reg $end
$var wire 1 + write_mem $end
$var wire 1 , write_rib $end
$var wire 1 - write_rom $end
$var wire 1 . write_ram $end
$var wire 32 / rom_add [31:0] $end
$var wire 1 0 id_w_data $end
$var wire 1 1 mem_req_write $end
$var wire 32 2 ram_add [31:0] $end
$var wire 32 3 mem_addr [31:0] $end
$var wire 32 4 x5 [31:0] $end
$var wire 32 5 x4 [31:0] $end
$var wire 32 6 x6 [31:0] $end
$var wire 1 7 rib_hold $end
$var wire 32 8 x3 [31:0] $end
$var wire 32 9 x26 [31:0] $end
$var wire 32 : x25 [31:0] $end
$var wire 32 ; x27 [31:0] $end
$var integer 32 < r [31:0] $end
$var integer 32 = i [31:0] $end
$scope module tinyriscv_soc_top_0 $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var reg 1 @ over $end
$var reg 1 A succ $end
$var wire 1 B halted_ind $end
$var wire 1 C uart_debug_pin $end
$var wire 1 D uart_tx_pin $end
$var wire 1 E uart_rx_pin $end
$var wire 2 F gpio [1:0] $end
$var wire 1 G jtag_TCK $end
$var wire 1 H jtag_TMS $end
$var wire 1 I jtag_TDI $end
$var wire 1 J jtag_TDO $end
$var wire 1 K spi_miso $end
$var wire 1 L spi_mosi $end
$var wire 1 M spi_ss $end
$var wire 1 N spi_clk $end
$var wire 32 O m0_addr_i [31:0] $end
$var wire 32 P m0_data_i [31:0] $end
$var wire 32 Q m0_data_o [31:0] $end
$var wire 1 R m0_req_i $end
$var wire 1 S m0_we_i $end
$var wire 32 T m1_addr_i [31:0] $end
$var wire 32 U m1_data_i [31:0] $end
$var wire 32 V m1_data_o [31:0] $end
$var wire 1 W m1_req_i $end
$var wire 1 X m1_we_i $end
$var wire 32 Y m2_addr_i [31:0] $end
$var wire 32 Z m2_data_i [31:0] $end
$var wire 32 [ m2_data_o [31:0] $end
$var wire 1 \ m2_req_i $end
$var wire 1 ] m2_we_i $end
$var wire 32 ^ m3_addr_i [31:0] $end
$var wire 32 _ m3_data_i [31:0] $end
$var wire 32 ` m3_data_o [31:0] $end
$var wire 1 a m3_req_i $end
$var wire 1 b m3_we_i $end
$var wire 32 c s0_addr_o [31:0] $end
$var wire 32 d s0_data_o [31:0] $end
$var wire 32 e s0_data_i [31:0] $end
$var wire 1 f s0_we_o $end
$var wire 32 g s1_addr_o [31:0] $end
$var wire 32 h s1_data_o [31:0] $end
$var wire 32 i s1_data_i [31:0] $end
$var wire 1 j s1_we_o $end
$var wire 32 k s2_addr_o [31:0] $end
$var wire 32 l s2_data_o [31:0] $end
$var wire 32 m s2_data_i [31:0] $end
$var wire 1 n s2_we_o $end
$var wire 32 o s3_addr_o [31:0] $end
$var wire 32 p s3_data_o [31:0] $end
$var wire 32 q s3_data_i [31:0] $end
$var wire 1 r s3_we_o $end
$var wire 32 s s4_addr_o [31:0] $end
$var wire 32 t s4_data_o [31:0] $end
$var wire 32 u s4_data_i [31:0] $end
$var wire 1 v s4_we_o $end
$var wire 32 w s5_addr_o [31:0] $end
$var wire 32 x s5_data_o [31:0] $end
$var wire 32 y s5_data_i [31:0] $end
$var wire 1 z s5_we_o $end
$var wire 1 { rib_hold_flag_o $end
$var wire 1 | jtag_halt_req_o $end
$var wire 1 } jtag_reset_req_o $end
$var wire 5 ~ jtag_reg_addr_o [4:0] $end
$var wire 32 !! jtag_reg_data_o [31:0] $end
$var wire 1 "! jtag_reg_we_o $end
$var wire 32 #! jtag_reg_data_i [31:0] $end
$var wire 8 $! int_flag [7:0] $end
$var wire 1 %! timer0_int $end
$var wire 2 &! io_in [1:0] $end
$var wire 32 '! gpio_ctrl [31:0] $end
$var wire 32 (! gpio_data [31:0] $end
$scope module u_tinyriscv $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var wire 32 O rib_ex_addr_o [31:0] $end
$var wire 32 Q rib_ex_data_i [31:0] $end
$var wire 32 P rib_ex_data_o [31:0] $end
$var wire 1 R rib_ex_req_o $end
$var wire 1 S rib_ex_we_o $end
$var wire 32 T rib_pc_addr_o [31:0] $end
$var wire 32 V rib_pc_data_i [31:0] $end
$var wire 5 ~ jtag_reg_addr_i [4:0] $end
$var wire 32 !! jtag_reg_data_i [31:0] $end
$var wire 1 "! jtag_reg_we_i $end
$var wire 32 #! jtag_reg_data_o [31:0] $end
$var wire 1 { rib_hold_flag_i $end
$var wire 1 | jtag_halt_flag_i $end
$var wire 1 } jtag_reset_flag_i $end
$var wire 8 $! int_i [7:0] $end
$var wire 32 )! mac_acc_out_o [31:0] $end
$var wire 32 *! ie_acc_out_o [31:0] $end
$var wire 32 +! pc_pc_o [31:0] $end
$var wire 32 ,! if_inst_o [31:0] $end
$var wire 32 -! if_inst_addr_o [31:0] $end
$var wire 8 .! if_int_flag_o [7:0] $end
$var wire 5 /! id_reg1_raddr_o [4:0] $end
$var wire 5 0! id_reg2_raddr_o [4:0] $end
$var wire 32 1! id_inst_o [31:0] $end
$var wire 32 2! id_inst_addr_o [31:0] $end
$var wire 32 3! id_reg1_rdata_o [31:0] $end
$var wire 32 4! id_reg2_rdata_o [31:0] $end
$var wire 1 5! id_reg_we_o $end
$var wire 5 6! id_reg_waddr_o [4:0] $end
$var wire 32 7! id_csr_raddr_o [31:0] $end
$var wire 1 8! id_csr_we_o $end
$var wire 32 9! id_csr_rdata_o [31:0] $end
$var wire 32 :! id_csr_waddr_o [31:0] $end
$var wire 32 ;! id_op1_o [31:0] $end
$var wire 32 <! id_op2_o [31:0] $end
$var wire 32 =! id_op1_jump_o [31:0] $end
$var wire 32 >! id_op2_jump_o [31:0] $end
$var wire 1 ?! id_is_mac_o $end
$var wire 1 @! mac_done $end
$var wire 32 A! ie_inst_o [31:0] $end
$var wire 32 B! ie_inst_addr_o [31:0] $end
$var wire 1 C! ie_reg_we_o $end
$var wire 5 D! ie_reg_waddr_o [4:0] $end
$var wire 32 E! ie_reg1_rdata_o [31:0] $end
$var wire 32 F! ie_reg2_rdata_o [31:0] $end
$var wire 1 G! ie_csr_we_o $end
$var wire 32 H! ie_csr_waddr_o [31:0] $end
$var wire 32 I! ie_csr_rdata_o [31:0] $end
$var wire 32 J! ie_op1_o [31:0] $end
$var wire 32 K! ie_op2_o [31:0] $end
$var wire 32 L! ie_op1_jump_o [31:0] $end
$var wire 32 M! ie_op2_jump_o [31:0] $end
$var wire 1 N! ie_is_mac_o $end
$var wire 32 O! ex_mem_wdata_o [31:0] $end
$var wire 32 P! ex_mem_raddr_o [31:0] $end
$var wire 32 Q! ex_mem_waddr_o [31:0] $end
$var wire 1 R! ex_mem_we_o $end
$var wire 1 S! ex_mem_req_o $end
$var wire 32 T! ex_reg_wdata_o [31:0] $end
$var wire 1 U! ex_reg_we_o $end
$var wire 5 V! ex_reg_waddr_o [4:0] $end
$var wire 1 W! ex_hold_flag_o $end
$var wire 1 X! ex_jump_flag_o $end
$var wire 32 Y! ex_jump_addr_o [31:0] $end
$var wire 1 Z! ex_div_start_o $end
$var wire 32 [! ex_div_dividend_o [31:0] $end
$var wire 32 \! ex_div_divisor_o [31:0] $end
$var wire 3 ]! ex_div_op_o [2:0] $end
$var wire 5 ^! ex_div_reg_waddr_o [4:0] $end
$var wire 32 _! ex_csr_wdata_o [31:0] $end
$var wire 1 `! ex_csr_we_o $end
$var wire 32 a! ex_csr_waddr_o [31:0] $end
$var wire 32 b! regs_rdata1_o [31:0] $end
$var wire 32 c! regs_rdata2_o [31:0] $end
$var wire 32 d! csr_data_o [31:0] $end
$var wire 32 e! csr_clint_data_o [31:0] $end
$var wire 1 f! csr_global_int_en_o $end
$var wire 32 g! csr_clint_csr_mtvec [31:0] $end
$var wire 32 h! csr_clint_csr_mepc [31:0] $end
$var wire 32 i! csr_clint_csr_mstatus [31:0] $end
$var wire 3 j! ctrl_hold_flag_o [2:0] $end
$var wire 1 k! ctrl_jump_flag_o $end
$var wire 32 l! ctrl_jump_addr_o [31:0] $end
$var wire 32 m! div_result_o [31:0] $end
$var wire 1 n! div_ready_o $end
$var wire 1 o! div_busy_o $end
$var wire 5 p! div_reg_waddr_o [4:0] $end
$var wire 1 q! clint_we_o $end
$var wire 32 r! clint_waddr_o [31:0] $end
$var wire 32 s! clint_raddr_o [31:0] $end
$var wire 32 t! clint_data_o [31:0] $end
$var wire 32 u! clint_int_addr_o [31:0] $end
$var wire 1 v! clint_int_assert_o $end
$var wire 1 w! clint_hold_flag_o $end
$scope module mreg $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var wire 1 U! we1_i $end
$var wire 5 V! w1addr_i [4:0] $end
$var wire 32 T! w1data_i [31:0] $end
$var wire 1 x! we2_i $end
$var wire 5 y! w2addr_i [4:0] $end
$var wire 32 z! w2data_i [31:0] $end
$var wire 5 {! raddr1_i [4:0] $end
$var reg 32 |! rdata1_o [31:0] $end
$var wire 5 }! raddr2_i [4:0] $end
$var reg 32 ~! rdata2_o [31:0] $end
$upscope $end
$scope module u_mac $end
$var wire 1 > clk $end
$var wire 1 ? acc_rst $end
$var wire 1 N! valid $end
$var wire 32 E! a [31:0] $end
$var wire 32 F! b [31:0] $end
$var reg 32 !" acc [31:0] $end
$var wire 33 "" product [32:0] $end
$var reg 32 #" result [31:0] $end
$upscope $end
$scope module u_pc_reg $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var wire 1 k! jump_flag_i $end
$var wire 32 l! jump_addr_i [31:0] $end
$var wire 3 j! hold_flag_i [2:0] $end
$var wire 1 } jtag_reset_flag_i $end
$var reg 32 $" pc_o [31:0] $end
$upscope $end
$scope module u_ctrl $end
$var wire 1 ? rst $end
$var wire 1 X! jump_flag_i $end
$var wire 32 Y! jump_addr_i [31:0] $end
$var wire 1 W! hold_flag_ex_i $end
$var wire 1 { hold_flag_rib_i $end
$var wire 1 | jtag_halt_flag_i $end
$var wire 1 w! hold_flag_clint_i $end
$var reg 3 %" hold_flag_o [2:0] $end
$var reg 1 &" jump_flag_o $end
$var reg 32 '" jump_addr_o [31:0] $end
$upscope $end
$scope module u_regs $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var wire 1 U! we_i $end
$var wire 5 V! waddr_i [4:0] $end
$var wire 32 T! wdata_i [31:0] $end
$var wire 1 "! jtag_we_i $end
$var wire 5 ~ jtag_addr_i [4:0] $end
$var wire 32 !! jtag_data_i [31:0] $end
$var wire 5 /! raddr1_i [4:0] $end
$var reg 32 (" rdata1_o [31:0] $end
$var wire 5 0! raddr2_i [4:0] $end
$var reg 32 )" rdata2_o [31:0] $end
$var reg 32 *" jtag_data_o [31:0] $end
$upscope $end
$scope module u_csr_reg $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var wire 1 `! we_i $end
$var wire 32 7! raddr_i [31:0] $end
$var wire 32 a! waddr_i [31:0] $end
$var wire 32 _! data_i [31:0] $end
$var wire 1 q! clint_we_i $end
$var wire 32 s! clint_raddr_i [31:0] $end
$var wire 32 r! clint_waddr_i [31:0] $end
$var wire 32 t! clint_data_i [31:0] $end
$var wire 1 f! global_int_en_o $end
$var reg 32 +" clint_data_o [31:0] $end
$var wire 32 g! clint_csr_mtvec [31:0] $end
$var wire 32 h! clint_csr_mepc [31:0] $end
$var wire 32 i! clint_csr_mstatus [31:0] $end
$var reg 32 ," data_o [31:0] $end
$var reg 64 -" cycle [63:0] $end
$var reg 32 ." mtvec [31:0] $end
$var reg 32 /" mcause [31:0] $end
$var reg 32 0" mepc [31:0] $end
$var reg 32 1" mie [31:0] $end
$var reg 32 2" mstatus [31:0] $end
$var reg 32 3" mscratch [31:0] $end
$upscope $end
$scope module u_if_id $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var wire 32 V inst_i [31:0] $end
$var wire 32 +! inst_addr_i [31:0] $end
$var wire 3 j! hold_flag_i [2:0] $end
$var wire 8 $! int_flag_i [7:0] $end
$var wire 8 .! int_flag_o [7:0] $end
$var wire 32 ,! inst_o [31:0] $end
$var wire 32 -! inst_addr_o [31:0] $end
$var wire 1 4" hold_en $end
$var wire 32 5" inst [31:0] $end
$var wire 32 6" inst_addr [31:0] $end
$var wire 8 7" int_flag [7:0] $end
$scope module inst_ff $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var wire 1 4" hold_en $end
$var wire 32 8" def_val [31:0] $end
$var wire 32 V din [31:0] $end
$var wire 32 5" qout [31:0] $end
$var reg 32 9" qout_r [31:0] $end
$upscope $end
$scope module inst_addr_ff $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var wire 1 4" hold_en $end
$var wire 32 :" def_val [31:0] $end
$var wire 32 +! din [31:0] $end
$var wire 32 6" qout [31:0] $end
$var reg 32 ;" qout_r [31:0] $end
$upscope $end
$scope module int_ff $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var wire 1 4" hold_en $end
$var wire 8 <" def_val [7:0] $end
$var wire 8 $! din [7:0] $end
$var wire 8 7" qout [7:0] $end
$var reg 8 =" qout_r [7:0] $end
$upscope $end
$upscope $end
$scope module u_id $end
$var wire 1 ? rst $end
$var wire 32 ,! inst_i [31:0] $end
$var wire 32 -! inst_addr_i [31:0] $end
$var wire 32 b! reg1_rdata_i [31:0] $end
$var wire 32 c! reg2_rdata_i [31:0] $end
$var wire 32 d! csr_rdata_i [31:0] $end
$var wire 1 X! ex_jump_flag_i $end
$var reg 5 >" reg1_raddr_o [4:0] $end
$var reg 5 ?" reg2_raddr_o [4:0] $end
$var reg 32 @" csr_raddr_o [31:0] $end
$var reg 32 A" op1_o [31:0] $end
$var reg 32 B" op2_o [31:0] $end
$var reg 32 C" op1_jump_o [31:0] $end
$var reg 32 D" op2_jump_o [31:0] $end
$var reg 32 E" inst_o [31:0] $end
$var reg 32 F" inst_addr_o [31:0] $end
$var reg 32 G" reg1_rdata_o [31:0] $end
$var reg 32 H" reg2_rdata_o [31:0] $end
$var reg 1 I" reg_we_o $end
$var reg 5 J" reg_waddr_o [4:0] $end
$var reg 1 K" csr_we_o $end
$var reg 32 L" csr_rdata_o [31:0] $end
$var reg 32 M" csr_waddr_o [31:0] $end
$var reg 1 N" is_mac_o $end
$var wire 7 O" opcode [6:0] $end
$var wire 3 P" funct3 [2:0] $end
$var wire 7 Q" funct7 [6:0] $end
$var wire 5 R" rd [4:0] $end
$var wire 5 S" rs1 [4:0] $end
$var wire 5 T" rs2 [4:0] $end
$upscope $end
$scope module u_id_ex $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var wire 32 1! inst_i [31:0] $end
$var wire 32 2! inst_addr_i [31:0] $end
$var wire 1 5! reg_we_i $end
$var wire 5 6! reg_waddr_i [4:0] $end
$var wire 32 3! reg1_rdata_i [31:0] $end
$var wire 32 4! reg2_rdata_i [31:0] $end
$var wire 1 8! csr_we_i $end
$var wire 32 :! csr_waddr_i [31:0] $end
$var wire 32 9! csr_rdata_i [31:0] $end
$var wire 32 ;! op1_i [31:0] $end
$var wire 32 <! op2_i [31:0] $end
$var wire 32 =! op1_jump_i [31:0] $end
$var wire 32 >! op2_jump_i [31:0] $end
$var wire 1 ?! is_mac_i $end
$var wire 32 )! acc_out_i [31:0] $end
$var wire 3 j! hold_flag_i [2:0] $end
$var wire 1 N! is_mac_o $end
$var wire 32 *! acc_out_o [31:0] $end
$var wire 32 J! op1_o [31:0] $end
$var wire 32 K! op2_o [31:0] $end
$var wire 32 L! op1_jump_o [31:0] $end
$var wire 32 M! op2_jump_o [31:0] $end
$var wire 32 A! inst_o [31:0] $end
$var wire 32 B! inst_addr_o [31:0] $end
$var wire 1 C! reg_we_o $end
$var wire 5 D! reg_waddr_o [4:0] $end
$var wire 32 E! reg1_rdata_o [31:0] $end
$var wire 32 F! reg2_rdata_o [31:0] $end
$var wire 1 G! csr_we_o $end
$var wire 32 H! csr_waddr_o [31:0] $end
$var wire 32 I! csr_rdata_o [31:0] $end
$var wire 1 U" hold_en $end
$var wire 32 V" inst [31:0] $end
$var wire 32 W" inst_addr [31:0] $end
$var wire 1 X" reg_we $end
$var wire 1 Y" is_mac $end
$var wire 32 Z" acc_out [31:0] $end
$var wire 5 [" reg_waddr [4:0] $end
$var wire 32 \" reg1_rdata [31:0] $end
$var wire 32 ]" reg2_rdata [31:0] $end
$var wire 1 ^" csr_we $end
$var wire 32 _" csr_waddr [31:0] $end
$var wire 32 `" csr_rdata [31:0] $end
$var wire 32 a" op1 [31:0] $end
$var wire 32 b" op2 [31:0] $end
$var wire 32 c" op1_jump [31:0] $end
$var wire 32 d" op2_jump [31:0] $end
$scope module inst_ff $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var wire 1 U" hold_en $end
$var wire 32 e" def_val [31:0] $end
$var wire 32 1! din [31:0] $end
$var wire 32 V" qout [31:0] $end
$var reg 32 f" qout_r [31:0] $end
$upscope $end
$scope module inst_addr_ff $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var wire 1 U" hold_en $end
$var wire 32 g" def_val [31:0] $end
$var wire 32 2! din [31:0] $end
$var wire 32 W" qout [31:0] $end
$var reg 32 h" qout_r [31:0] $end
$upscope $end
$scope module reg_we_ff $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var wire 1 U" hold_en $end
$var wire 1 i" def_val [0:0] $end
$var wire 1 5! din [0:0] $end
$var wire 1 X" qout [0:0] $end
$var reg 1 j" qout_r [0:0] $end
$upscope $end
$scope module is_mac_ff $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var wire 1 U" hold_en $end
$var wire 1 i" def_val [0:0] $end
$var wire 1 ?! din [0:0] $end
$var wire 1 Y" qout [0:0] $end
$var reg 1 k" qout_r [0:0] $end
$upscope $end
$scope module acc_out_ff $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var wire 1 U" hold_en $end
$var wire 32 g" def_val [31:0] $end
$var wire 32 )! din [31:0] $end
$var wire 32 Z" qout [31:0] $end
$var reg 32 l" qout_r [31:0] $end
$upscope $end
$scope module reg_waddr_ff $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var wire 1 U" hold_en $end
$var wire 5 m" def_val [4:0] $end
$var wire 5 6! din [4:0] $end
$var wire 5 [" qout [4:0] $end
$var reg 5 n" qout_r [4:0] $end
$upscope $end
$scope module reg1_rdata_ff $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var wire 1 U" hold_en $end
$var wire 32 g" def_val [31:0] $end
$var wire 32 3! din [31:0] $end
$var wire 32 \" qout [31:0] $end
$var reg 32 o" qout_r [31:0] $end
$upscope $end
$scope module reg2_rdata_ff $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var wire 1 U" hold_en $end
$var wire 32 g" def_val [31:0] $end
$var wire 32 4! din [31:0] $end
$var wire 32 ]" qout [31:0] $end
$var reg 32 p" qout_r [31:0] $end
$upscope $end
$scope module csr_we_ff $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var wire 1 U" hold_en $end
$var wire 1 i" def_val [0:0] $end
$var wire 1 8! din [0:0] $end
$var wire 1 ^" qout [0:0] $end
$var reg 1 q" qout_r [0:0] $end
$upscope $end
$scope module csr_waddr_ff $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var wire 1 U" hold_en $end
$var wire 32 g" def_val [31:0] $end
$var wire 32 :! din [31:0] $end
$var wire 32 _" qout [31:0] $end
$var reg 32 r" qout_r [31:0] $end
$upscope $end
$scope module csr_rdata_ff $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var wire 1 U" hold_en $end
$var wire 32 g" def_val [31:0] $end
$var wire 32 9! din [31:0] $end
$var wire 32 `" qout [31:0] $end
$var reg 32 s" qout_r [31:0] $end
$upscope $end
$scope module op1_ff $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var wire 1 U" hold_en $end
$var wire 32 g" def_val [31:0] $end
$var wire 32 ;! din [31:0] $end
$var wire 32 a" qout [31:0] $end
$var reg 32 t" qout_r [31:0] $end
$upscope $end
$scope module op2_ff $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var wire 1 U" hold_en $end
$var wire 32 g" def_val [31:0] $end
$var wire 32 <! din [31:0] $end
$var wire 32 b" qout [31:0] $end
$var reg 32 u" qout_r [31:0] $end
$upscope $end
$scope module op1_jump_ff $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var wire 1 U" hold_en $end
$var wire 32 g" def_val [31:0] $end
$var wire 32 =! din [31:0] $end
$var wire 32 c" qout [31:0] $end
$var reg 32 v" qout_r [31:0] $end
$upscope $end
$scope module op2_jump_ff $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var wire 1 U" hold_en $end
$var wire 32 g" def_val [31:0] $end
$var wire 32 >! din [31:0] $end
$var wire 32 d" qout [31:0] $end
$var reg 32 w" qout_r [31:0] $end
$upscope $end
$upscope $end
$scope module u_ex $end
$var wire 1 ? rst $end
$var wire 1 N! is_mac_i $end
$var wire 32 A! inst_i [31:0] $end
$var wire 32 B! inst_addr_i [31:0] $end
$var wire 1 C! reg_we_i $end
$var wire 5 D! reg_waddr_i [4:0] $end
$var wire 32 E! reg1_rdata_i [31:0] $end
$var wire 32 F! reg2_rdata_i [31:0] $end
$var wire 1 G! csr_we_i $end
$var wire 32 H! csr_waddr_i [31:0] $end
$var wire 32 I! csr_rdata_i [31:0] $end
$var wire 1 v! int_assert_i $end
$var wire 32 u! int_addr_i [31:0] $end
$var wire 32 J! op1_i [31:0] $end
$var wire 32 K! op2_i [31:0] $end
$var wire 32 L! op1_jump_i [31:0] $end
$var wire 32 M! op2_jump_i [31:0] $end
$var wire 32 )! acc_out [31:0] $end
$var wire 32 Q mem_rdata_i [31:0] $end
$var wire 1 n! div_ready_i $end
$var wire 32 m! div_result_i [31:0] $end
$var wire 1 o! div_busy_i $end
$var wire 5 p! div_reg_waddr_i [4:0] $end
$var reg 32 x" mem_wdata_o [31:0] $end
$var reg 32 y" mem_raddr_o [31:0] $end
$var reg 32 z" mem_waddr_o [31:0] $end
$var wire 1 R! mem_we_o $end
$var wire 1 S! mem_req_o $end
$var wire 32 T! reg_wdata_o [31:0] $end
$var wire 1 U! reg_we_o $end
$var wire 5 V! reg_waddr_o [4:0] $end
$var reg 32 {" csr_wdata_o [31:0] $end
$var wire 1 `! csr_we_o $end
$var wire 32 a! csr_waddr_o [31:0] $end
$var wire 1 Z! div_start_o $end
$var reg 32 |" div_dividend_o [31:0] $end
$var reg 32 }" div_divisor_o [31:0] $end
$var reg 3 ~" div_op_o [2:0] $end
$var reg 5 !# div_reg_waddr_o [4:0] $end
$var wire 1 W! hold_flag_o $end
$var wire 1 X! jump_flag_o $end
$var wire 32 Y! jump_addr_o [31:0] $end
$var wire 2 "# mem_raddr_index [1:0] $end
$var wire 2 ## mem_waddr_index [1:0] $end
$var wire 64 $# mul_temp [63:0] $end
$var wire 64 %# mul_temp_invert [63:0] $end
$var wire 32 &# sr_shift [31:0] $end
$var wire 32 '# sri_shift [31:0] $end
$var wire 32 (# sr_shift_mask [31:0] $end
$var wire 32 )# sri_shift_mask [31:0] $end
$var wire 32 *# op1_add_op2_res [31:0] $end
$var wire 32 +# op1_jump_add_op2_jump_res [31:0] $end
$var wire 32 ,# reg1_data_invert [31:0] $end
$var wire 32 -# reg2_data_invert [31:0] $end
$var wire 1 .# op1_ge_op2_signed $end
$var wire 1 /# op1_ge_op2_unsigned $end
$var wire 1 0# op1_eq_op2 $end
$var reg 32 1# mul_op1 [31:0] $end
$var reg 32 2# mul_op2 [31:0] $end
$var wire 7 3# opcode [6:0] $end
$var wire 3 4# funct3 [2:0] $end
$var wire 7 5# funct7 [6:0] $end
$var wire 5 6# rd [4:0] $end
$var wire 5 7# uimm [4:0] $end
$var reg 32 8# reg_wdata [31:0] $end
$var reg 1 9# reg_we $end
$var reg 5 :# reg_waddr [4:0] $end
$var reg 32 ;# div_wdata [31:0] $end
$var reg 1 <# div_we $end
$var reg 5 =# div_waddr [4:0] $end
$var reg 1 ># div_hold_flag $end
$var reg 1 ?# div_jump_flag $end
$var reg 32 @# div_jump_addr [31:0] $end
$var reg 1 A# hold_flag $end
$var reg 1 B# jump_flag $end
$var reg 32 C# jump_addr [31:0] $end
$var reg 1 D# mem_we $end
$var reg 1 E# mem_req $end
$var reg 1 F# div_start $end
$var wire 1 G# valid_mac $end
$upscope $end
$scope module u_div $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var wire 32 [! dividend_i [31:0] $end
$var wire 32 \! divisor_i [31:0] $end
$var wire 1 Z! start_i $end
$var wire 3 ]! op_i [2:0] $end
$var wire 5 ^! reg_waddr_i [4:0] $end
$var reg 32 H# result_o [31:0] $end
$var reg 1 I# ready_o $end
$var reg 1 J# busy_o $end
$var reg 5 K# reg_waddr_o [4:0] $end
$var reg 32 L# dividend_r [31:0] $end
$var reg 32 M# divisor_r [31:0] $end
$var reg 3 N# op_r [2:0] $end
$var reg 4 O# state [3:0] $end
$var reg 32 P# count [31:0] $end
$var reg 32 Q# div_result [31:0] $end
$var reg 32 R# div_remain [31:0] $end
$var reg 32 S# minuend [31:0] $end
$var reg 1 T# invert_result $end
$var wire 1 U# op_div $end
$var wire 1 V# op_divu $end
$var wire 1 W# op_rem $end
$var wire 1 X# op_remu $end
$var wire 32 Y# dividend_invert [31:0] $end
$var wire 32 Z# divisor_invert [31:0] $end
$var wire 1 [# minuend_ge_divisor $end
$var wire 32 \# minuend_sub_res [31:0] $end
$var wire 32 ]# div_result_tmp [31:0] $end
$var wire 32 ^# minuend_tmp [31:0] $end
$upscope $end
$scope module u_clint $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var wire 8 .! int_flag_i [7:0] $end
$var wire 32 1! inst_i [31:0] $end
$var wire 32 2! inst_addr_i [31:0] $end
$var wire 1 X! jump_flag_i $end
$var wire 32 Y! jump_addr_i [31:0] $end
$var wire 1 Z! div_started_i $end
$var wire 3 j! hold_flag_i [2:0] $end
$var wire 32 e! data_i [31:0] $end
$var wire 32 g! csr_mtvec [31:0] $end
$var wire 32 h! csr_mepc [31:0] $end
$var wire 32 i! csr_mstatus [31:0] $end
$var wire 1 f! global_int_en_i $end
$var wire 1 w! hold_flag_o $end
$var reg 1 _# we_o $end
$var reg 32 `# waddr_o [31:0] $end
$var reg 32 a# raddr_o [31:0] $end
$var reg 32 b# data_o [31:0] $end
$var reg 32 c# int_addr_o [31:0] $end
$var reg 1 d# int_assert_o $end
$var reg 4 e# int_state [3:0] $end
$var reg 5 f# csr_state [4:0] $end
$var reg 32 g# inst_addr [31:0] $end
$var reg 32 h# cause [31:0] $end
$upscope $end
$upscope $end
$scope module u_rom $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var wire 1 f we_i $end
$var wire 32 c addr_i [31:0] $end
$var wire 32 d data_i [31:0] $end
$var reg 32 i# data_o [31:0] $end
$upscope $end
$scope module u_ram $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var wire 1 j we_i $end
$var wire 32 g addr_i [31:0] $end
$var wire 32 h data_i [31:0] $end
$var reg 32 j# data_o [31:0] $end
$upscope $end
$scope module timer_0 $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var wire 32 l data_i [31:0] $end
$var wire 32 k addr_i [31:0] $end
$var wire 1 n we_i $end
$var reg 32 k# data_o [31:0] $end
$var wire 1 %! int_sig_o $end
$var reg 32 l# timer_ctrl [31:0] $end
$var reg 32 m# timer_count [31:0] $end
$var reg 32 n# timer_value [31:0] $end
$upscope $end
$scope module uart_0 $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var wire 1 r we_i $end
$var wire 32 o addr_i [31:0] $end
$var wire 32 p data_i [31:0] $end
$var reg 32 o# data_o [31:0] $end
$var wire 1 D tx_pin $end
$var wire 1 E rx_pin $end
$var reg 1 p# tx_data_valid $end
$var reg 1 q# tx_data_ready $end
$var reg 4 r# state [3:0] $end
$var reg 16 s# cycle_cnt [15:0] $end
$var reg 4 t# bit_cnt [3:0] $end
$var reg 8 u# tx_data [7:0] $end
$var reg 1 v# tx_reg $end
$var reg 1 w# rx_q0 $end
$var reg 1 x# rx_q1 $end
$var wire 1 y# rx_negedge $end
$var reg 1 z# rx_start $end
$var reg 4 {# rx_clk_edge_cnt [3:0] $end
$var reg 1 |# rx_clk_edge_level $end
$var reg 1 }# rx_done $end
$var reg 16 ~# rx_clk_cnt [15:0] $end
$var reg 16 !$ rx_div_cnt [15:0] $end
$var reg 8 "$ rx_data [7:0] $end
$var reg 1 #$ rx_over $end
$var reg 32 $$ uart_ctrl [31:0] $end
$var reg 32 %$ uart_status [31:0] $end
$var reg 32 &$ uart_baud [31:0] $end
$var reg 32 '$ uart_rx [31:0] $end
$upscope $end
$scope module gpio_0 $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var wire 1 v we_i $end
$var wire 32 s addr_i [31:0] $end
$var wire 32 t data_i [31:0] $end
$var reg 32 ($ data_o [31:0] $end
$var wire 2 &! io_pin_i [1:0] $end
$var wire 32 '! reg_ctrl [31:0] $end
$var wire 32 (! reg_data [31:0] $end
$var reg 32 )$ gpio_ctrl [31:0] $end
$var reg 32 *$ gpio_data [31:0] $end
$upscope $end
$scope module spi_0 $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var wire 32 x data_i [31:0] $end
$var wire 32 w addr_i [31:0] $end
$var wire 1 z we_i $end
$var reg 32 +$ data_o [31:0] $end
$var reg 1 ,$ spi_mosi $end
$var wire 1 K spi_miso $end
$var wire 1 M spi_ss $end
$var reg 1 -$ spi_clk $end
$var reg 32 .$ spi_ctrl [31:0] $end
$var reg 32 /$ spi_data [31:0] $end
$var reg 32 0$ spi_status [31:0] $end
$var reg 9 1$ clk_cnt [8:0] $end
$var reg 1 2$ en $end
$var reg 5 3$ spi_clk_edge_cnt [4:0] $end
$var reg 1 4$ spi_clk_edge_level $end
$var reg 8 5$ rdata [7:0] $end
$var reg 1 6$ done $end
$var reg 4 7$ bit_index [3:0] $end
$var wire 9 8$ div_cnt [8:0] $end
$upscope $end
$scope module u_rib $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var wire 32 O m0_addr_i [31:0] $end
$var wire 32 P m0_data_i [31:0] $end
$var reg 32 9$ m0_data_o [31:0] $end
$var wire 1 R m0_req_i $end
$var wire 1 S m0_we_i $end
$var wire 32 T m1_addr_i [31:0] $end
$var wire 32 :$ m1_data_i [31:0] $end
$var reg 32 ;$ m1_data_o [31:0] $end
$var wire 1 <$ m1_req_i $end
$var wire 1 =$ m1_we_i $end
$var wire 32 Y m2_addr_i [31:0] $end
$var wire 32 Z m2_data_i [31:0] $end
$var reg 32 >$ m2_data_o [31:0] $end
$var wire 1 \ m2_req_i $end
$var wire 1 ] m2_we_i $end
$var wire 32 ^ m3_addr_i [31:0] $end
$var wire 32 _ m3_data_i [31:0] $end
$var reg 32 ?$ m3_data_o [31:0] $end
$var wire 1 a m3_req_i $end
$var wire 1 b m3_we_i $end
$var reg 32 @$ s0_addr_o [31:0] $end
$var reg 32 A$ s0_data_o [31:0] $end
$var wire 32 e s0_data_i [31:0] $end
$var reg 1 B$ s0_we_o $end
$var reg 32 C$ s1_addr_o [31:0] $end
$var reg 32 D$ s1_data_o [31:0] $end
$var wire 32 i s1_data_i [31:0] $end
$var reg 1 E$ s1_we_o $end
$var reg 32 F$ s2_addr_o [31:0] $end
$var reg 32 G$ s2_data_o [31:0] $end
$var wire 32 m s2_data_i [31:0] $end
$var reg 1 H$ s2_we_o $end
$var reg 32 I$ s3_addr_o [31:0] $end
$var reg 32 J$ s3_data_o [31:0] $end
$var wire 32 q s3_data_i [31:0] $end
$var reg 1 K$ s3_we_o $end
$var reg 32 L$ s4_addr_o [31:0] $end
$var reg 32 M$ s4_data_o [31:0] $end
$var wire 32 u s4_data_i [31:0] $end
$var reg 1 N$ s4_we_o $end
$var reg 32 O$ s5_addr_o [31:0] $end
$var reg 32 P$ s5_data_o [31:0] $end
$var wire 32 y s5_data_i [31:0] $end
$var reg 1 Q$ s5_we_o $end
$var reg 1 R$ hold_flag_o $end
$var wire 4 S$ req [3:0] $end
$var reg 2 T$ grant [1:0] $end
$upscope $end
$scope module u_uart_debug $end
$var wire 1 > clk $end
$var wire 1 ? rst $end
$var wire 1 C debug_en_i $end
$var wire 1 a req_o $end
$var reg 1 U$ mem_we_o $end
$var reg 32 V$ mem_addr_o [31:0] $end
$var reg 32 W$ mem_wdata_o [31:0] $end
$var wire 32 ` mem_rdata_i [31:0] $end
$var reg 14 X$ state [13:0] $end
$var reg 8 Y$ rec_bytes_index [7:0] $end
$var reg 8 Z$ need_to_rec_bytes [7:0] $end
$var reg 16 [$ remain_packet_count [15:0] $end
$var reg 32 \$ fw_file_size [31:0] $end
$var reg 32 ]$ write_mem_addr [31:0] $end
$var reg 32 ^$ write_mem_data [31:0] $end
$var reg 8 _$ write_mem_byte_index0 [7:0] $end
$var reg 8 `$ write_mem_byte_index1 [7:0] $end
$var reg 8 a$ write_mem_byte_index2 [7:0] $end
$var reg 8 b$ write_mem_byte_index3 [7:0] $end
$var reg 16 c$ crc_result [15:0] $end
$var reg 4 d$ crc_bit_index [3:0] $end
$var reg 8 e$ crc_byte_index [7:0] $end
$upscope $end
$scope module u_jtag_top $end
$var wire 1 > clk $end
$var wire 1 ? jtag_rst_n $end
$var wire 1 G jtag_pin_TCK $end
$var wire 1 H jtag_pin_TMS $end
$var wire 1 I jtag_pin_TDI $end
$var wire 1 J jtag_pin_TDO $end
$var wire 1 "! reg_we_o $end
$var wire 5 ~ reg_addr_o [4:0] $end
$var wire 32 !! reg_wdata_o [31:0] $end
$var wire 32 #! reg_rdata_i [31:0] $end
$var wire 1 ] mem_we_o $end
$var wire 32 Y mem_addr_o [31:0] $end
$var wire 32 Z mem_wdata_o [31:0] $end
$var wire 32 [ mem_rdata_i [31:0] $end
$var wire 1 \ op_req_o $end
$var wire 1 | halt_req_o $end
$var wire 1 } reset_req_o $end
$var wire 1 f$ dtm_ack_o $end
$var wire 1 g$ dtm_req_valid_o $end
$var wire 40 h$ dtm_req_data_o [39:0] $end
$var wire 1 i$ dm_ack_o $end
$var wire 40 j$ dm_resp_data_o [39:0] $end
$var wire 1 k$ dm_resp_valid_o $end
$var wire 1 l$ dm_op_req_o $end
$var wire 1 m$ dm_halt_req_o $end
$var wire 1 n$ dm_reset_req_o $end
$scope module u_jtag_driver $end
$var wire 1 ? rst_n $end
$var wire 1 G jtag_TCK $end
$var wire 1 I jtag_TDI $end
$var wire 1 H jtag_TMS $end
$var reg 1 o$ jtag_TDO $end
$var wire 1 k$ dm_resp_i $end
$var wire 40 j$ dm_resp_data_i [39:0] $end
$var wire 1 f$ dtm_ack_o $end
$var wire 1 i$ dm_ack_i $end
$var wire 1 g$ dtm_req_valid_o $end
$var wire 40 h$ dtm_req_data_o [39:0] $end
$var reg 5 p$ ir_reg [4:0] $end
$var reg 40 q$ shift_reg [39:0] $end
$var reg 4 r$ jtag_state [3:0] $end
$var wire 1 s$ is_busy $end
$var reg 1 t$ sticky_busy $end
$var reg 1 u$ dtm_req_valid $end
$var reg 40 v$ dtm_req_data [39:0] $end
$var reg 40 w$ dm_resp_data [39:0] $end
$var reg 1 x$ dm_is_busy $end
$var wire 6 y$ addr_bits [5:0] $end
$var wire 40 z$ busy_response [39:0] $end
$var wire 40 {$ none_busy_response [39:0] $end
$var wire 32 |$ idcode [31:0] $end
$var wire 32 }$ dtmcs [31:0] $end
$var wire 2 ~$ dmi_stat [1:0] $end
$var wire 1 !% dtm_reset $end
$var wire 1 "% tx_idle $end
$var wire 1 #% rx_valid $end
$var wire 40 $% rx_data [39:0] $end
$var wire 1 %% tx_valid $end
$var wire 40 &% tx_data [39:0] $end
$scope module tx $end
$var wire 1 G clk $end
$var wire 1 ? rst_n $end
$var wire 1 i$ ack_i $end
$var wire 1 %% req_i $end
$var wire 40 &% req_data_i [39:0] $end
$var wire 1 "% idle_o $end
$var wire 1 g$ req_o $end
$var wire 40 h$ req_data_o [39:0] $end
$var reg 3 '% state [2:0] $end
$var reg 3 (% state_next [2:0] $end
$var reg 1 )% ack_d $end
$var reg 1 *% ack $end
$var reg 1 +% req $end
$var reg 40 ,% req_data [39:0] $end
$var reg 1 -% idle $end
$upscope $end
$scope module rx $end
$var wire 1 G clk $end
$var wire 1 ? rst_n $end
$var wire 1 k$ req_i $end
$var wire 40 j$ req_data_i [39:0] $end
$var wire 1 f$ ack_o $end
$var wire 40 $% recv_data_o [39:0] $end
$var wire 1 #% recv_rdy_o $end
$var reg 2 .% state [1:0] $end
$var reg 2 /% state_next [1:0] $end
$var reg 1 0% req_d $end
$var reg 1 1% req $end
$var reg 40 2% recv_data [39:0] $end
$var reg 1 3% recv_rdy $end
$var reg 1 4% ack $end
$upscope $end
$upscope $end
$scope module u_jtag_dm $end
$var wire 1 > clk $end
$var wire 1 ? rst_n $end
$var wire 1 i$ dm_ack_o $end
$var wire 1 g$ dtm_req_valid_i $end
$var wire 40 h$ dtm_req_data_i [39:0] $end
$var wire 1 f$ dtm_ack_i $end
$var wire 40 j$ dm_resp_data_o [39:0] $end
$var wire 1 k$ dm_resp_valid_o $end
$var wire 1 "! dm_reg_we_o $end
$var wire 5 ~ dm_reg_addr_o [4:0] $end
$var wire 32 !! dm_reg_wdata_o [31:0] $end
$var wire 32 #! dm_reg_rdata_i [31:0] $end
$var wire 1 ] dm_mem_we_o $end
$var wire 32 Y dm_mem_addr_o [31:0] $end
$var wire 32 Z dm_mem_wdata_o [31:0] $end
$var wire 32 [ dm_mem_rdata_i [31:0] $end
$var wire 1 \ dm_op_req_o $end
$var wire 1 | dm_halt_req_o $end
$var wire 1 } dm_reset_req_o $end
$var reg 32 5% dcsr [31:0] $end
$var reg 32 6% dmstatus [31:0] $end
$var reg 32 7% dmcontrol [31:0] $end
$var reg 32 8% hartinfo [31:0] $end
$var reg 32 9% abstractcs [31:0] $end
$var reg 32 :% data0 [31:0] $end
$var reg 32 ;% sbcs [31:0] $end
$var reg 32 <% sbaddress0 [31:0] $end
$var reg 32 =% sbdata0 [31:0] $end
$var reg 32 >% command [31:0] $end
$var reg 32 ?% read_data [31:0] $end
$var reg 1 @% dm_reg_we $end
$var reg 5 A% dm_reg_addr [4:0] $end
$var reg 32 B% dm_reg_wdata [31:0] $end
$var reg 1 C% dm_mem_we $end
$var reg 32 D% dm_mem_addr [31:0] $end
$var reg 32 E% dm_mem_wdata [31:0] $end
$var reg 1 F% dm_halt_req $end
$var reg 1 G% dm_reset_req $end
$var reg 1 H% need_resp $end
$var reg 1 I% is_read_reg $end
$var wire 1 J% rx_valid $end
$var wire 40 K% rx_data [39:0] $end
$var wire 32 L% sbaddress0_next [31:0] $end
$var wire 40 M% dm_resp_data [39:0] $end
$var wire 2 N% op [1:0] $end
$var wire 32 O% data [31:0] $end
$var wire 6 P% address [5:0] $end
$var wire 1 Q% read_dmstatus $end
$var wire 1 R% tx_idle $end
$scope module tx $end
$var wire 1 > clk $end
$var wire 1 ? rst_n $end
$var wire 1 f$ ack_i $end
$var wire 1 S% req_i $end
$var wire 40 M% req_data_i [39:0] $end
$var wire 1 R% idle_o $end
$var wire 1 k$ req_o $end
$var wire 40 j$ req_data_o [39:0] $end
$var reg 3 T% state [2:0] $end
$var reg 3 U% state_next [2:0] $end
$var reg 1 V% ack_d $end
$var reg 1 W% ack $end
$var reg 1 X% req $end
$var reg 40 Y% req_data [39:0] $end
$var reg 1 Z% idle $end
$upscope $end
$scope module rx $end
$var wire 1 > clk $end
$var wire 1 ? rst_n $end
$var wire 1 g$ req_i $end
$var wire 40 h$ req_data_i [39:0] $end
$var wire 1 i$ ack_o $end
$var wire 40 K% recv_data_o [39:0] $end
$var wire 1 J% recv_rdy_o $end
$var reg 2 [% state [1:0] $end
$var reg 2 \% state_next [1:0] $end
$var reg 1 ]% req_d $end
$var reg 1 ^% req $end
$var reg 40 _% recv_data [39:0] $end
$var reg 1 `% recv_rdy $end
$var reg 1 a% ack $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end

#0
$dumpvars
0!
b0 !!
bx !"
bx !#
bx !$
x!%
0"
0"!
bx ""
bx "#
bx "$
1"%
b1 #
b0 #!
bx #"
bx ##
x#$
0#%
bx $
b0x $!
bx $"
bx $#
bx $$
b0 $%
bx %
x%!
b0 %"
bx %#
bx %$
0%%
bx &
bx &!
x&"
bx &#
bx &$
b0 &%
bx '
bx '!
bx '"
bx '#
bx '$
b1 '%
b0xxxxx (
bx (!
b0 ("
bx (#
b0 ($
b1 (%
0)
bx )!
b0 )"
bx )#
bx )$
0)%
x*
bx *!
b0 *"
bx *#
bx *$
0*%
0+
bx +!
bx +"
bx +#
b0 +$
0+%
0,
bx ,!
b0 ,"
bx ,#
x,$
b0 ,%
0-
bx -!
bx -"
bx -#
x-$
1-%
0.
bx .!
bx ."
x.#
bx .$
b1 .%
b0 /
b0 /!
bx /"
x/#
bx /$
b1 /%
00
b0 0!
bx 0"
x0#
bx 0$
00%
01
bx 1!
bx 1"
bx 1#
bx 1$
01%
b0 2
bx 2!
bx 2"
bx 2#
x2$
b0 2%
b0 3
b0 3!
bx 3"
bx 3#
bx 3$
03%
b10000000000000001000000100000 4
b0 4!
04"
bx 4#
x4$
04%
b10000000000000001000000000000 5
05!
bx 5"
bx 5#
bx 5$
b0 5%
bx 6
b0 6!
bx 6"
bx 6#
x6$
b10000110000110010000010 6%
07
b0 7!
bx 7"
bx 7#
bx 7$
b0 7%
bx 8
08!
b1 8"
b0 8#
b0xxxxxxxx 8$
b0 8%
bx 9
b0 9!
bx 9"
x9#
b0 9$
b1000000000000000000000011 9%
bx :
b0 :!
b0 :"
bx :#
b0 :$
b0 :%
bx ;
b0 ;!
bx ;"
bx ;#
b1 ;$
b100000000001000000010000000100 ;%
bx <
b0 <!
b0 <"
x<#
1<$
b0 <%
bx =
b0 =!
bx ="
bx =#
0=$
b0 =%
0>
b0 >!
b0 >"
x>#
b0 >$
b0 >%
0?
0?!
b0 ?"
x?#
b0 ?$
b0 ?%
x@
z@!
b0 @"
bx @#
b0 @$
0@%
xA
bx A!
b0 A"
0A#
b0 A$
b0 A%
1B
bx B!
b0 B"
0B#
0B$
b0 B%
0C
xC!
b0 C"
b0 C#
b0 C$
0C%
xD
bx D!
b0 D"
0D#
b0 D$
b0 D%
zE
bx E!
bx E"
0E#
0E$
b0 E%
bx F
bx F!
bx F"
xF#
b0 F$
0F%
zG
xG!
b0 G"
zG#
b0 G$
0G%
zH
bx H!
b0 H"
bx H#
0H$
0H%
zI
bx I!
0I"
xI#
b0 I$
0I%
xJ
bx J!
b0 J"
xJ#
b0 J$
0J%
zK
bx K!
0K"
bx K#
0K$
b0 K%
xL
bx L!
b0 L"
bx L#
b0 L$
b100 L%
xM
bx M!
b0 M"
bx M#
b0 M$
b0 M%
xN
xN!
0N"
bx N#
0N$
b0 N%
b0 O
b0 O!
bx O"
bx O#
b0 O$
b0 O%
b0 P
b0 P!
bx P"
bx P#
b0 P$
b0 P%
b0 Q
b0 Q!
bx Q"
bx Q#
0Q$
0Q%
0R
0R!
bx R"
bx R#
0R$
1R%
0S
0S!
bx S"
bx S#
b10 S$
0S%
bx T
bx T!
bx T"
xT#
b1 T$
b1 T%
bz U
xU!
0U"
xU#
xU$
b1 U%
b1 V
bx V!
bx V"
xV#
bx V$
0V%
zW
xW!
bx W"
xW#
bx W$
0W%
zX
xX!
xX"
xX#
bx X$
0X%
b0 Y
bx Y!
xY"
bx Y#
bx Y$
b0 Y%
b0 Z
xZ!
bx Z"
bx Z#
bx Z$
1Z%
b0 [
bx [!
bx ["
x[#
bx [$
b1 [%
0\
bx \!
bx \"
bx \#
bx \$
b1 \%
0]
bx ]!
bx ]"
bx ]#
bx ]$
0]%
bx ^
bx ^!
x^"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ^#
bx ^$
0^%
bx _
b0 _!
bx _"
x_#
bx _$
b0 _%
b0 `
x`!
bx `"
bx `#
bx `$
0`%
0a
bx a!
bx a"
bx a#
bx a$
0a%
xb
b0 b!
bx b"
bx b#
bx b$
b0 c
b0 c!
bx c"
bx c#
bx c$
b0 d
b0 d!
bx d"
xd#
bx d$
b0 e
bx e!
b1 e"
b1 e#
bx e$
0f
xf!
bx f"
bx f#
0f$
b0 g
bx g!
b0 g"
bx g#
0g$
b0 h
bx h!
bx h"
bx h#
b0 h$
b0 i
bx i!
0i"
b0 i#
0i$
0j
b0 j!
xj"
b0 j#
b0 j$
b0 k
xk!
xk"
b0 k#
0k$
b0 l
bx l!
bx l"
bx l#
zl$
b0 m
bx m!
b0 m"
bx m#
zm$
0n
xn!
bx n"
bx n#
zn$
b0 o
xo!
bx o"
b0 o#
xo$
b0 p
bx p!
bx p"
xp#
bx p$
b0 q
xq!
xq"
xq#
bx q$
0r
bx r!
bx r"
bx r#
b0 r$
b0 s
bx s!
bx s"
bx s#
0s$
b0 t
bx t!
bx t"
bx t#
0t$
b0 u
bx u!
bx u"
bx u#
0u$
0v
xv!
bx v"
xv#
b0 v$
b0 w
xw!
bx w"
xw#
b0 w$
b0 x
zx!
b0 x"
xx#
0x$
b0 y
bz y!
b0 y"
xy#
b110 y$
0z
bz z!
b0 z"
xz#
b11 z$
0{
bz {!
b0 {"
bx {#
b0 {$
0|
bx |!
bx |"
x|#
b11110001000000000101001101111 |$
0}
bz }!
bx }"
x}#
b101000001100001 }$
b0 ~
bx ~!
bx ~"
bx ~#
b0 ~$
$end

#10000
1!
b0 !"
b0 !#
b0 !$
b0 ""
b0 "#
b0 "$
b0 #
b0 ##
0#$
b1 $
b0 $!
b0 $"
b0 $#
b0 $$
b1 %
0%!
b0 %#
b0 %$
bz &!
0&"
b0 &#
b110111000 &$
b0 '
b0 '!
b0 '"
b0 '#
b0 '$
b0 (
b0 (!
b11111111111111111111111111111111 (#
b0 )!
b11111111111111111111111111111111 )#
b0 )$
0*
b0 *!
b0 *#
b0 *$
b0 +!
b0 +"
b0 +#
b1 ,!
b0 ,#
0,$
b0 -!
b0 -"
b0 -#
0-$
b0 .!
b0 ."
1.#
b0 .$
b0 /"
1/#
b0 /$
b0 0"
10#
b0 0$
b1 1!
b0 1"
b0 1#
b0 1$
b0 2!
b0 2"
b0 2#
02$
b0 3"
b1 3#
b0 3$
b0 4#
04$
b1 5"
b0 5#
b0 5$
b0 6"
b0 6#
06$
b0 7"
b0 7#
b0 7$
b0 8$
b1 9"
09#
b0 :#
b0 ;"
b0 ;#
b0 ;$
0<#
b0 ="
b0 =#
1>
0>#
0?#
1@
b0 @#
1A
b1 A!
b0 B!
0C!
0D
b0 D!
b0 E!
b1 E"
bz F
b0 F!
b0 F"
0F#
0G!
b0 H!
b0 H#
b0 I!
0I#
b0 J!
0J#
b0 K!
b0 K#
0L
b0 L!
b0 L#
1M
b0 M!
b0 M#
0N
0N!
b0 N#
b1 O"
b1 O#
b0 P"
b0 P#
b0 Q"
b0 Q#
b0 R"
b0 R#
b0 S"
b0 S#
b0 T
b0 T!
b0 T"
0T#
0U!
0U#
0U$
b0 V
b0 V!
b1 V"
0V#
b0 V$
0W!
b0 W"
0W#
b0 W$
0X!
0X"
0X#
b1 X$
b0 Y!
0Y"
b0 Y#
b0 Y$
0Z!
b0 Z"
b0 Z#
b0 Z$
b0 [!
b0 ["
1[#
b0 [$
b0 \!
b0 \"
b0 \#
b0 \$
b0 ]!
b0 ]"
b1 ]#
b0 ]$
b0 ^
b0 ^!
0^"
b0 ^#
b0 ^$
b0 _
b0 _"
0_#
b0 _$
0`!
b0 `"
b0 `#
b0 `$
b0 a!
b0 a"
b0 a$
0b
b0 b"
b0 b#
b0 b$
b0 c"
b0 c#
b0 c$
b0 d"
0d#
b0 d$
b0 e!
b0 e$
0f!
b1 f"
b1 f#
b0 g!
b0 g#
b0 h!
b0 h"
b0 h#
b0 i!
0j"
0k!
0k"
b0 l!
b0 l"
b0 l#
b0 m!
b0 m#
0n!
b0 n"
b0 n#
0o!
b0 o"
b0 p!
b0 p"
0p#
0q!
0q"
0q#
b0 r!
b0 r"
b1 r#
b0 s"
b0 s#
b0 t!
b0 t"
b0 t#
b0 u!
b0 u"
0v!
b0 v"
0v#
0w!
b0 w"
0w#
0x#
0y#
0z#
b0 {#
b0 |"
0|#
b0 }"
b0 ~"
b0 ~#

#20000
0!
0>

#30000
1!
1>

#40000
0!
1"
b10010100100010001100101011 #
b10010100100010001100101011 ;$
0>
1?
b10010100100010001100101011 V
b10010100100010001100101011 e
bx i
b10010100100010001100101011 i#
bx j#

#50000
1!
b110111000 !$
b10010100100010000000101011 #
b10010100100010001100101011 $
b100 $"
b10000000000000001000000000000 ("
b10000000000000001000000100000 )"
b100 +!
b10010100100010001100101011 ,!
b1 -"
b100 /
b100 /!
10
b101 0!
b10010100100010001100101011 1!
b10000000000000001000000000000 3!
b10000000000000001000000100000 4!
15!
b10010100100010001100101011 5"
b110 6!
b110 7$
b10010100100010001100101011 9"
b10000000000000001000000000000 ;!
b10010100100010000000101011 ;$
b10000000000000001000000100000 <!
1>
b100 >"
b101 ?"
x@
b100 @$
xA
b10000000000000001000000000000 A"
b10000000000000001000000100000 B"
1D
b10010100100010001100101011 E"
b10000000000000001000000000000 G"
b10000000000000001000000100000 H"
1I"
b110 J"
b101011 O"
b10 P"
b1 Q"
b110 R"
b100 S"
b100 T
b101 T"
b10010100100010000000101011 V
b10000000000000001000000000000 b!
b100 c
b10000000000000001000000100000 c!
b10010100100010000000101011 e
b10010100100010000000101011 i#
1v#
zw#

#60000
0!
0>

#70000
1!
b110 !#
b1000000100000000000000000 ""
b1 "#
b1 #
b10 ##
b10010100100010000000101011 $
b1000 $"
b100000000000000100000001000000001000000100000000000000000 $#
b10010100100010001100101011 %
b1 %"
b1111111011111111111111011111110111111110111111100000000000000000 %#
b10000000000000001000000000000 &#
b111 '
b100000000000000010000000 '#
b110 (
b111111111111111111111111111 )#
1*
b100000000000000010000000100000 *#
b1000 +!
b10010100100010000000101011 ,!
b11101111111111111111000000000000 ,#
b100 -!
b10 -"
b11101111111111111110111111100000 -#
0.#
b0 /
0/#
00#
11
b10010100100010000000101011 1!
b10000000000000001000000000000 1#
b1000000000000 2
b100 2!
b10000000000000001000000100000 2#
b10000000000000001000000000000 3
b101011 3#
b10 4#
b10010100100010000000101011 5"
b1 5#
b0 6!
b100 6"
b110 6#
17
b100 7#
b111 8#
b10010100100010000000101011 9"
19#
b111 9$
b110 :#
b100 ;"
b1 ;$
1>
b0 @$
b10010100100010001100101011 A!
b10000000000000001000000000000 A"
b10000000000000001000000100000 B"
1C!
b1000000000000 C$
b110 D!
b10000000000000001000000000000 E!
b10010100100010000000101011 E"
1E#
b10000000000000001000000100000 F!
b100 F"
b10000000000000001000000000000 J!
b0 J"
b10000000000000001000000100000 K!
b10000000000000001000000000000 O
b10000000000000001000000000000 P!
b111 Q
1R
b0 R"
1R$
1S!
b11 S$
b1000 T
b111 T!
b0 T$
1U!
b1 V
b110 V!
b10010100100010001100101011 V"
1X"
b10000000000000001000000000000 [!
b110 ["
b10000000000000001000000100000 \!
b10000000000000001000000000000 \"
b10 ]!
b10000000000000001000000100000 ]"
b110 ^!
b10000000000000001000000000000 a"
b10000000000000001000000100000 b"
b0 c
b10010100100010001100101011 e
b10010100100010001100101011 f"
b1000000000000 g
b111 i
b10010100100010001100101011 i#
b1 j!
1j"
b111 j#
b110 n"
b10000000000000001000000000000 o"
b10000000000000001000000100000 p"
b10000000000000001000000000000 t"
b10000000000000001000000100000 u"
zx#
b10000000000000001000000000000 y"
xy#
1{
b10000000000000001000000000000 |"
b10000000000000001000000100000 }"
b10 ~"

#80000
0!
0>

#90000
1!
b0 !#
b0 ##
b1 $
b10010100100010000000101011 %
b0 (
b0 ("
b0 )"
b1 ,!
b1000 -!
b11 -"
b0 /!
00
b0 0!
b1 1!
b1000 2!
b0 3!
b0 4!
05!
b1 5"
b111 6
b1000 6"
b0 6#
b1 9"
b0 :#
b0 ;!
b1000 ;"
b0 <!
1>
b0 >"
b0 ?"
b10010100100010000000101011 A!
b0 A"
b100 B!
b0 B"
b0 D!
b1 E"
1E#
b1000 F"
b0 G"
b0 H"
0I"
b1 O"
b0 P"
b0 Q"
b0 S"
b0 T"
b0 V!
b10010100100010000000101011 V"
b100 W"
b0 ["
b0 ^!
b0 b!
b0 c!
b10010100100010000000101011 f"
b100 h"
b0 n"

#100000
0!
0>

#110000
1!
b0 ""
b0 "#
bx #
b0 $#
b1 %
b0 %"
b0 %#
b111 &
b0 &#
b0 '
b0 '#
b11111111111111111111111111111111 )#
0*
b0 *#
b0 ,#
b100 -"
b0 -#
1.#
b1000 /
1/#
10#
01
b0 1#
b0 2
b0 2#
b0 3
b1 3#
b0 4#
b0 5#
07
b0 7#
b0 8#
09#
b0 9$
bx ;$
1>
b1000 @$
b1 A!
b1000 B!
0C!
b0 C$
b0 E!
0E#
b0 F!
b0 J!
b0 K!
b0 O
b0 P!
b0 Q
0R
0R$
0S!
b10 S$
b0 T!
b1 T$
0U!
bx V
b1 V"
b1000 W"
0X"
b0 [!
b0 \!
b0 \"
b0 ]!
b0 ]"
b0 a"
b0 b"
b1000 c
bx e
b1 f"
b0 g
b1000 h"
bx i
bx i#
b0 j!
0j"
bx j#
b0 o"
b0 p"
b0 t"
b0 u"
b0 y"
0{
b0 |"
b0 }"
b0 ~"

#120000
0!
0>

#130000
1!
bx $
b1100 $"
b1100 +!
bx ,!
b101 -"
b1100 /
bx 1!
bx 5"
bx 9"
bx ;$
1>
b1100 @$
bx E"
bx O"
bx P"
bx Q"
bx R"
bx S"
b1100 T
bx T"
b1100 c

#140000
0!
0>

#150000
1!
bx "#
bx ##
b10000 $"
bx %
bx '#
bx )#
b10000 +!
b1100 -!
b110 -"
b10000 /
b1100 2!
bx 3#
bx 4#
bx 5#
b1100 6"
bx 6#
bx 7#
b1100 ;"
bx ;$
1>
b10000 @$
bx A!
b1100 F"
b10000 T
bx V"
bx ]!
b10000 c
bx f"
bx ~"

#160000
0!
0>

#170000
1!
b10100 $"
b10100 +!
b10000 -!
b111 -"
b10100 /
b10000 2!
b10000 6"
b10000 ;"
bx ;$
1>
b10100 @$
b1100 B!
b10000 F"
b10100 T
b1100 W"
b10100 c
b1100 h"

#180000
0!
0>

#190000
1!
b11000 $"
b11000 +!
b10100 -!
b1000 -"
b11000 /
b10100 2!
b10100 6"
b10100 ;"
bx ;$
1>
b11000 @$
b10000 B!
b10100 F"
b11000 T
b10000 W"
b11000 c
b10000 h"

#200000
0!
0>

#210000
1!
b11100 $"
b11100 +!
b11000 -!
b1001 -"
b11100 /
b11000 2!
b11000 6"
b11000 ;"
bx ;$
1>
b11100 @$
b10100 B!
b11000 F"
b11100 T
b10100 W"
b11100 c
b10100 h"

#220000
0!
0>

#230000
1!
b100000 $"
b100000 +!
b11100 -!
b1010 -"
b100000 /
b11100 2!
b11100 6"
b11100 ;"
bx ;$
1>
b100000 @$
b11000 B!
b11100 F"
b100000 T
b11000 W"
b100000 c
b11000 h"

#240000
0!
0>

#250000
1!
b100100 $"
b100100 +!
b100000 -!
b1011 -"
b100100 /
b100000 2!
b100000 6"
b100000 ;"
bx ;$
1>
b100100 @$
b11100 B!
b100000 F"
b100100 T
b11100 W"
b100100 c
b11100 h"

#260000
0!
0>

#270000
1!
b101000 $"
b101000 +!
b100100 -!
b1100 -"
b101000 /
b100100 2!
b100100 6"
b100100 ;"
bx ;$
1>
b101000 @$
b100000 B!
b100100 F"
b101000 T
b100000 W"
b101000 c
b100000 h"

#280000
0!
0>

#290000
1!
b101100 $"
b101100 +!
b101000 -!
b1101 -"
b101100 /
b101000 2!
b101000 6"
b101000 ;"
bx ;$
1>
b101100 @$
b100100 B!
b101000 F"
b101100 T
b100100 W"
b101100 c
b100100 h"

#300000
0!
0>

#310000
1!
b110000 $"
b110000 +!
b101100 -!
b1110 -"
b110000 /
b101100 2!
b101100 6"
b101100 ;"
bx ;$
1>
b110000 @$
b101000 B!
b101100 F"
b110000 T
b101000 W"
b110000 c
b101000 h"

#320000
0!
0>

#330000
1!
b110100 $"
b110100 +!
b110000 -!
b1111 -"
b110100 /
b110000 2!
b110000 6"
b110000 ;"
bx ;$
1>
b110100 @$
b101100 B!
b110000 F"
b110100 T
b101100 W"
b110100 c
b101100 h"

#340000
0!
0>

#350000
1!
b111000 $"
b111000 +!
b110100 -!
b10000 -"
b111000 /
b110100 2!
b110100 6"
b110100 ;"
bx ;$
1>
b111000 @$
b110000 B!
b110100 F"
b111000 T
b110000 W"
b111000 c
b110000 h"

#360000
0!
0>

#370000
1!
b111100 $"
b111100 +!
b111000 -!
b10001 -"
b111100 /
b111000 2!
b111000 6"
b111000 ;"
bx ;$
1>
b111100 @$
b110100 B!
b111000 F"
b111100 T
b110100 W"
b111100 c
b110100 h"

#380000
0!
0>

#390000
1!
b1000000 $"
b1000000 +!
b111100 -!
b10010 -"
b1000000 /
b111100 2!
b111100 6"
b111100 ;"
bx ;$
1>
b1000000 @$
b111000 B!
b111100 F"
b1000000 T
b111000 W"
b1000000 c
b111000 h"

#400000
0!
0>

#410000
1!
b1000100 $"
b1000100 +!
b1000000 -!
b10011 -"
b1000100 /
b1000000 2!
b1000000 6"
b1000000 ;"
bx ;$
1>
b1000100 @$
b111100 B!
b1000000 F"
b1000100 T
b111100 W"
b1000100 c
b111100 h"

#420000
0!
0>

#430000
1!
b1001000 $"
b1001000 +!
b1000100 -!
b10100 -"
b1001000 /
b1000100 2!
b1000100 6"
b1000100 ;"
bx ;$
1>
b1001000 @$
b1000000 B!
b1000100 F"
b1001000 T
b1000000 W"
b1001000 c
b1000000 h"

#440000
0!
0>

#450000
1!
b1001100 $"
b1001100 +!
b1001000 -!
b10101 -"
b1001100 /
b1001000 2!
b1001000 6"
b1001000 ;"
bx ;$
1>
b1001100 @$
b1000100 B!
b1001000 F"
b1001100 T
b1000100 W"
b1001100 c
b1000100 h"

#460000
0!
0>

#470000
1!
b1010000 $"
b1010000 +!
b1001100 -!
b10110 -"
b1010000 /
b1001100 2!
b1001100 6"
b1001100 ;"
bx ;$
1>
b1010000 @$
b1001000 B!
b1001100 F"
b1010000 T
b1001000 W"
b1010000 c
b1001000 h"

#480000
0!
0>

#490000
1!
b1010100 $"
b1010100 +!
b1010000 -!
b10111 -"
b1010100 /
b1010000 2!
b1010000 6"
b1010000 ;"
bx ;$
1>
b1010100 @$
b1001100 B!
b1010000 F"
b1010100 T
b1001100 W"
b1010100 c
b1001100 h"

#500000
0!
0>

#510000
1!
b1011000 $"
b1011000 +!
b1010100 -!
b11000 -"
b1011000 /
b1010100 2!
b1010100 6"
b1010100 ;"
bx ;$
1>
b1011000 @$
b1010000 B!
b1010100 F"
b1011000 T
b1010000 W"
b1011000 c
b1010000 h"

#520000
0!
0>

#530000
1!
b1011100 $"
b1011100 +!
b1011000 -!
b11001 -"
b1011100 /
b1011000 2!
b1011000 6"
b1011000 ;"
bx ;$
1>
b1011100 @$
b1010100 B!
b1011000 F"
b1011100 T
b1010100 W"
b1011100 c
b1010100 h"

#540000
0!
0>

#550000
1!
b1100000 $"
b1100000 +!
b1011100 -!
b11010 -"
b1100000 /
b1011100 2!
b1011100 6"
b1011100 ;"
bx ;$
1>
b1100000 @$
b1011000 B!
b1011100 F"
b1100000 T
b1011000 W"
b1100000 c
b1011000 h"

#560000
0!
0>

#570000
1!
b1100100 $"
b1100100 +!
b1100000 -!
b11011 -"
b1100100 /
b1100000 2!
b1100000 6"
b1100000 ;"
bx ;$
1>
b1100100 @$
b1011100 B!
b1100000 F"
b1100100 T
b1011100 W"
b1100100 c
b1011100 h"

#580000
0!
0>

#590000
1!
b1101000 $"
b1101000 +!
b1100100 -!
b11100 -"
b1101000 /
b1100100 2!
b1100100 6"
b1100100 ;"
bx ;$
1>
b1101000 @$
b1100000 B!
b1100100 F"
b1101000 T
b1100000 W"
b1101000 c
b1100000 h"

#600000
0!
0>

#610000
1!
b1101100 $"
b1101100 +!
b1101000 -!
b11101 -"
b1101100 /
b1101000 2!
b1101000 6"
b1101000 ;"
bx ;$
1>
b1101100 @$
b1100100 B!
b1101000 F"
b1101100 T
b1100100 W"
b1101100 c
b1100100 h"

#620000
0!
0>

#630000
1!
b1110000 $"
b1110000 +!
b1101100 -!
b11110 -"
b1110000 /
b1101100 2!
b1101100 6"
b1101100 ;"
bx ;$
1>
b1110000 @$
b1101000 B!
b1101100 F"
b1110000 T
b1101000 W"
b1110000 c
b1101000 h"

#640000
0!
0>

#650000
1!
b1110100 $"
b1110100 +!
b1110000 -!
b11111 -"
b1110100 /
b1110000 2!
b1110000 6"
b1110000 ;"
bx ;$
1>
b1110100 @$
b1101100 B!
b1110000 F"
b1110100 T
b1101100 W"
b1110100 c
b1101100 h"

#660000
0!
0>

#670000
1!
b1111000 $"
b1111000 +!
b1110100 -!
b100000 -"
b1111000 /
b1110100 2!
b1110100 6"
b1110100 ;"
bx ;$
1>
b1111000 @$
b1110000 B!
b1110100 F"
b1111000 T
b1110000 W"
b1111000 c
b1110000 h"

#680000
0!
0>

#690000
1!
b1111100 $"
b1111100 +!
b1111000 -!
b100001 -"
b1111100 /
b1111000 2!
b1111000 6"
b1111000 ;"
bx ;$
1>
b1111100 @$
b1110100 B!
b1111000 F"
b1111100 T
b1110100 W"
b1111100 c
b1110100 h"

#700000
0!
0>

#710000
1!
b10000000 $"
b10000000 +!
b1111100 -!
b100010 -"
b10000000 /
b1111100 2!
b1111100 6"
b1111100 ;"
bx ;$
1>
b10000000 @$
b1111000 B!
b1111100 F"
b10000000 T
b1111000 W"
b10000000 c
b1111000 h"

#720000
0!
0>

#730000
1!
b10000100 $"
b10000100 +!
b10000000 -!
b100011 -"
b10000100 /
b10000000 2!
b10000000 6"
b10000000 ;"
bx ;$
1>
b10000100 @$
b1111100 B!
b10000000 F"
b10000100 T
b1111100 W"
b10000100 c
b1111100 h"

#740000
0!
0>

#750000
1!
b10001000 $"
b10001000 +!
b10000100 -!
b100100 -"
b10001000 /
b10000100 2!
b10000100 6"
b10000100 ;"
bx ;$
1>
b10001000 @$
b10000000 B!
b10000100 F"
b10001000 T
b10000000 W"
b10001000 c
b10000000 h"

#760000
0!
0>

#770000
1!
b10001100 $"
b10001100 +!
b10001000 -!
b100101 -"
b10001100 /
b10001000 2!
b10001000 6"
b10001000 ;"
bx ;$
1>
b10001100 @$
b10000100 B!
b10001000 F"
b10001100 T
b10000100 W"
b10001100 c
b10000100 h"

#780000
0!
0>

#790000
1!
b10010000 $"
b10010000 +!
b10001100 -!
b100110 -"
b10010000 /
b10001100 2!
b10001100 6"
b10001100 ;"
bx ;$
1>
b10010000 @$
b10001000 B!
b10001100 F"
b10010000 T
b10001000 W"
b10010000 c
b10001000 h"

#800000
0!
0>

#810000
1!
b10010100 $"
b10010100 +!
b10010000 -!
b100111 -"
b10010100 /
b10010000 2!
b10010000 6"
b10010000 ;"
bx ;$
1>
b10010100 @$
b10001100 B!
b10010000 F"
b10010100 T
b10001100 W"
b10010100 c
b10001100 h"

#820000
0!
0>

#830000
1!
b10011000 $"
b10011000 +!
b10010100 -!
b101000 -"
b10011000 /
b10010100 2!
b10010100 6"
b10010100 ;"
bx ;$
1>
b10011000 @$
b10010000 B!
b10010100 F"
b10011000 T
b10010000 W"
b10011000 c
b10010000 h"

#840000
0!
0>

#850000
1!
b10011100 $"
b10011100 +!
b10011000 -!
b101001 -"
b10011100 /
b10011000 2!
b10011000 6"
b10011000 ;"
bx ;$
1>
b10011100 @$
b10010100 B!
b10011000 F"
b10011100 T
b10010100 W"
b10011100 c
b10010100 h"

#860000
0!
0>

#870000
1!
b10100000 $"
b10100000 +!
b10011100 -!
b101010 -"
b10100000 /
b10011100 2!
b10011100 6"
b10011100 ;"
bx ;$
1>
b10100000 @$
b10011000 B!
b10011100 F"
b10100000 T
b10011000 W"
b10100000 c
b10011000 h"

#880000
0!
0>

#890000
1!
b10100100 $"
b10100100 +!
b10100000 -!
b101011 -"
b10100100 /
b10100000 2!
b10100000 6"
b10100000 ;"
bx ;$
1>
b10100100 @$
b10011100 B!
b10100000 F"
b10100100 T
b10011100 W"
b10100100 c
b10011100 h"

#900000
0!
0>

#910000
1!
b10101000 $"
b10101000 +!
b10100100 -!
b101100 -"
b10101000 /
b10100100 2!
b10100100 6"
b10100100 ;"
bx ;$
1>
b10101000 @$
b10100000 B!
b10100100 F"
b10101000 T
b10100000 W"
b10101000 c
b10100000 h"

#920000
0!
0>

#930000
1!
b10101100 $"
b10101100 +!
b10101000 -!
b101101 -"
b10101100 /
b10101000 2!
b10101000 6"
b10101000 ;"
bx ;$
1>
b10101100 @$
b10100100 B!
b10101000 F"
b10101100 T
b10100100 W"
b10101100 c
b10100100 h"

#940000
0!
0>

#950000
1!
b10110000 $"
b10110000 +!
b10101100 -!
b101110 -"
b10110000 /
b10101100 2!
b10101100 6"
b10101100 ;"
bx ;$
1>
b10110000 @$
b10101000 B!
b10101100 F"
b10110000 T
b10101000 W"
b10110000 c
b10101000 h"

#960000
0!
0>

#970000
1!
b10110100 $"
b10110100 +!
b10110000 -!
b101111 -"
b10110100 /
b10110000 2!
b10110000 6"
b10110000 ;"
bx ;$
1>
b10110100 @$
b10101100 B!
b10110000 F"
b10110100 T
b10101100 W"
b10110100 c
b10101100 h"

#980000
0!
0>

#990000
1!
b10111000 $"
b10111000 +!
b10110100 -!
b110000 -"
b10111000 /
b10110100 2!
b10110100 6"
b10110100 ;"
bx ;$
1>
b10111000 @$
b10110000 B!
b10110100 F"
b10111000 T
b10110000 W"
b10111000 c
b10110000 h"

#1000000
0!
0>
