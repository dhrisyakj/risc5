$date
   Wed May 21 20:11:34 2025
$end

$version
  2024.1
  $dumpfile ("tinyriscv_soc_tb.vcd") 
$end

$timescale
  1ps
$end

$scope module tinyriscv_soc_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$var wire 32 # if_inst_i [31:0] $end
$var wire 32 $ if_inst_d [31:0] $end
$var wire 32 % ex_inst_o [31:0] $end
$var wire 1 & holdEnable $end
$var wire 32 ' ie_reg_addr [31:0] $end
$var wire 32 ( ex_reg_addr [31:0] $end
$var wire 1 ) mac_done $end
$var wire 1 * mac_valid $end
$var wire 32 + mac_acc_out_o [31:0] $end
$var wire 32 , ie_acc [31:0] $end
$var wire 32 - ex_wdata [31:0] $end
$var wire 32 . id_r1 [31:0] $end
$var wire 32 / id_r2 [31:0] $end
$var wire 32 0 ie_r1 [31:0] $end
$var wire 32 1 ie_r2 [31:0] $end
$var wire 32 2 ex_reg_data_o [31:0] $end
$var wire 32 3 x3 [31:0] $end
$var wire 32 4 x26 [31:0] $end
$var wire 32 5 x25 [31:0] $end
$var wire 32 6 x27 [31:0] $end
$var wire 32 7 x4 [31:0] $end
$var wire 32 8 x5 [31:0] $end
$var wire 32 9 x6 [31:0] $end
$var integer 32 : r [31:0] $end
$scope module tinyriscv_soc_top_0 $end
$var wire 1 ; clk $end
$var wire 1 < rst $end
$var reg 1 = over $end
$var reg 1 > succ $end
$var wire 1 ? halted_ind $end
$var wire 1 @ uart_debug_pin $end
$var wire 1 A uart_tx_pin $end
$var wire 1 B uart_rx_pin $end
$var wire 2 C gpio [1:0] $end
$var wire 1 D jtag_TCK $end
$var wire 1 E jtag_TMS $end
$var wire 1 F jtag_TDI $end
$var wire 1 G jtag_TDO $end
$var wire 1 H spi_miso $end
$var wire 1 I spi_mosi $end
$var wire 1 J spi_ss $end
$var wire 1 K spi_clk $end
$var wire 32 L m0_addr_i [31:0] $end
$var wire 32 M m0_data_i [31:0] $end
$var wire 32 N m0_data_o [31:0] $end
$var wire 1 O m0_req_i $end
$var wire 1 P m0_we_i $end
$var wire 32 Q m1_addr_i [31:0] $end
$var wire 32 R m1_data_i [31:0] $end
$var wire 32 S m1_data_o [31:0] $end
$var wire 1 T m1_req_i $end
$var wire 1 U m1_we_i $end
$var wire 32 V m2_addr_i [31:0] $end
$var wire 32 W m2_data_i [31:0] $end
$var wire 32 X m2_data_o [31:0] $end
$var wire 1 Y m2_req_i $end
$var wire 1 Z m2_we_i $end
$var wire 32 [ m3_addr_i [31:0] $end
$var wire 32 \ m3_data_i [31:0] $end
$var wire 32 ] m3_data_o [31:0] $end
$var wire 1 ^ m3_req_i $end
$var wire 1 _ m3_we_i $end
$var wire 32 ` s0_addr_o [31:0] $end
$var wire 32 a s0_data_o [31:0] $end
$var wire 32 b s0_data_i [31:0] $end
$var wire 1 c s0_we_o $end
$var wire 32 d s1_addr_o [31:0] $end
$var wire 32 e s1_data_o [31:0] $end
$var wire 32 f s1_data_i [31:0] $end
$var wire 1 g s1_we_o $end
$var wire 32 h s2_addr_o [31:0] $end
$var wire 32 i s2_data_o [31:0] $end
$var wire 32 j s2_data_i [31:0] $end
$var wire 1 k s2_we_o $end
$var wire 32 l s3_addr_o [31:0] $end
$var wire 32 m s3_data_o [31:0] $end
$var wire 32 n s3_data_i [31:0] $end
$var wire 1 o s3_we_o $end
$var wire 32 p s4_addr_o [31:0] $end
$var wire 32 q s4_data_o [31:0] $end
$var wire 32 r s4_data_i [31:0] $end
$var wire 1 s s4_we_o $end
$var wire 32 t s5_addr_o [31:0] $end
$var wire 32 u s5_data_o [31:0] $end
$var wire 32 v s5_data_i [31:0] $end
$var wire 1 w s5_we_o $end
$var wire 1 x rib_hold_flag_o $end
$var wire 1 y jtag_halt_req_o $end
$var wire 1 z jtag_reset_req_o $end
$var wire 5 { jtag_reg_addr_o [4:0] $end
$var wire 32 | jtag_reg_data_o [31:0] $end
$var wire 1 } jtag_reg_we_o $end
$var wire 32 ~ jtag_reg_data_i [31:0] $end
$var wire 8 !! int_flag [7:0] $end
$var wire 1 "! timer0_int $end
$var wire 2 #! io_in [1:0] $end
$var wire 32 $! gpio_ctrl [31:0] $end
$var wire 32 %! gpio_data [31:0] $end
$scope module u_tinyriscv $end
$var wire 1 ; clk $end
$var wire 1 < rst $end
$var wire 32 L rib_ex_addr_o [31:0] $end
$var wire 32 N rib_ex_data_i [31:0] $end
$var wire 32 M rib_ex_data_o [31:0] $end
$var wire 1 O rib_ex_req_o $end
$var wire 1 P rib_ex_we_o $end
$var wire 32 Q rib_pc_addr_o [31:0] $end
$var wire 32 S rib_pc_data_i [31:0] $end
$var wire 5 { jtag_reg_addr_i [4:0] $end
$var wire 32 | jtag_reg_data_i [31:0] $end
$var wire 1 } jtag_reg_we_i $end
$var wire 32 ~ jtag_reg_data_o [31:0] $end
$var wire 1 x rib_hold_flag_i $end
$var wire 1 y jtag_halt_flag_i $end
$var wire 1 z jtag_reset_flag_i $end
$var wire 8 !! int_i [7:0] $end
$var wire 32 &! mac_acc_out_o [31:0] $end
$var wire 32 '! ie_acc_out_o [31:0] $end
$var wire 32 (! pc_pc_o [31:0] $end
$var wire 32 )! if_inst_o [31:0] $end
$var wire 32 *! if_inst_addr_o [31:0] $end
$var wire 8 +! if_int_flag_o [7:0] $end
$var wire 5 ,! id_reg1_raddr_o [4:0] $end
$var wire 5 -! id_reg2_raddr_o [4:0] $end
$var wire 32 .! id_inst_o [31:0] $end
$var wire 32 /! id_inst_addr_o [31:0] $end
$var wire 32 0! id_reg1_rdata_o [31:0] $end
$var wire 32 1! id_reg2_rdata_o [31:0] $end
$var wire 1 2! id_reg_we_o $end
$var wire 5 3! id_reg_waddr_o [4:0] $end
$var wire 32 4! id_csr_raddr_o [31:0] $end
$var wire 1 5! id_csr_we_o $end
$var wire 32 6! id_csr_rdata_o [31:0] $end
$var wire 32 7! id_csr_waddr_o [31:0] $end
$var wire 32 8! id_op1_o [31:0] $end
$var wire 32 9! id_op2_o [31:0] $end
$var wire 32 :! id_op1_jump_o [31:0] $end
$var wire 32 ;! id_op2_jump_o [31:0] $end
$var wire 1 <! id_is_mac_o $end
$var wire 1 =! mac_done $end
$var wire 32 >! ie_inst_o [31:0] $end
$var wire 32 ?! ie_inst_addr_o [31:0] $end
$var wire 1 @! ie_reg_we_o $end
$var wire 5 A! ie_reg_waddr_o [4:0] $end
$var wire 32 B! ie_reg1_rdata_o [31:0] $end
$var wire 32 C! ie_reg2_rdata_o [31:0] $end
$var wire 1 D! ie_csr_we_o $end
$var wire 32 E! ie_csr_waddr_o [31:0] $end
$var wire 32 F! ie_csr_rdata_o [31:0] $end
$var wire 32 G! ie_op1_o [31:0] $end
$var wire 32 H! ie_op2_o [31:0] $end
$var wire 32 I! ie_op1_jump_o [31:0] $end
$var wire 32 J! ie_op2_jump_o [31:0] $end
$var wire 1 K! ie_is_mac_o $end
$var wire 32 L! ex_mem_wdata_o [31:0] $end
$var wire 32 M! ex_mem_raddr_o [31:0] $end
$var wire 32 N! ex_mem_waddr_o [31:0] $end
$var wire 1 O! ex_mem_we_o $end
$var wire 1 P! ex_mem_req_o $end
$var wire 32 Q! ex_reg_wdata_o [31:0] $end
$var wire 1 R! ex_reg_we_o $end
$var wire 5 S! ex_reg_waddr_o [4:0] $end
$var wire 1 T! ex_hold_flag_o $end
$var wire 1 U! ex_jump_flag_o $end
$var wire 32 V! ex_jump_addr_o [31:0] $end
$var wire 1 W! ex_div_start_o $end
$var wire 32 X! ex_div_dividend_o [31:0] $end
$var wire 32 Y! ex_div_divisor_o [31:0] $end
$var wire 3 Z! ex_div_op_o [2:0] $end
$var wire 5 [! ex_div_reg_waddr_o [4:0] $end
$var wire 32 \! ex_csr_wdata_o [31:0] $end
$var wire 1 ]! ex_csr_we_o $end
$var wire 32 ^! ex_csr_waddr_o [31:0] $end
$var wire 32 _! regs_rdata1_o [31:0] $end
$var wire 32 `! regs_rdata2_o [31:0] $end
$var wire 32 a! csr_data_o [31:0] $end
$var wire 32 b! csr_clint_data_o [31:0] $end
$var wire 1 c! csr_global_int_en_o $end
$var wire 32 d! csr_clint_csr_mtvec [31:0] $end
$var wire 32 e! csr_clint_csr_mepc [31:0] $end
$var wire 32 f! csr_clint_csr_mstatus [31:0] $end
$var wire 3 g! ctrl_hold_flag_o [2:0] $end
$var wire 1 h! ctrl_jump_flag_o $end
$var wire 32 i! ctrl_jump_addr_o [31:0] $end
$var wire 32 j! div_result_o [31:0] $end
$var wire 1 k! div_ready_o $end
$var wire 1 l! div_busy_o $end
$var wire 5 m! div_reg_waddr_o [4:0] $end
$var wire 1 n! clint_we_o $end
$var wire 32 o! clint_waddr_o [31:0] $end
$var wire 32 p! clint_raddr_o [31:0] $end
$var wire 32 q! clint_data_o [31:0] $end
$var wire 32 r! clint_int_addr_o [31:0] $end
$var wire 1 s! clint_int_assert_o $end
$var wire 1 t! clint_hold_flag_o $end
$scope module u_mac $end
$var wire 1 ; clk $end
$var wire 1 < acc_rst $end
$var wire 1 K! valid $end
$var wire 32 B! a [31:0] $end
$var wire 32 C! b [31:0] $end
$var reg 32 u! acc [31:0] $end
$var wire 33 v! product [32:0] $end
$var reg 32 w! result [31:0] $end
$upscope $end
$scope module u_pc_reg $end
$var wire 1 ; clk $end
$var wire 1 < rst $end
$var wire 1 h! jump_flag_i $end
$var wire 32 i! jump_addr_i [31:0] $end
$var wire 3 g! hold_flag_i [2:0] $end
$var wire 1 z jtag_reset_flag_i $end
$var reg 32 x! pc_o [31:0] $end
$upscope $end
$scope module u_ctrl $end
$var wire 1 < rst $end
$var wire 1 U! jump_flag_i $end
$var wire 32 V! jump_addr_i [31:0] $end
$var wire 1 T! hold_flag_ex_i $end
$var wire 1 x hold_flag_rib_i $end
$var wire 1 y jtag_halt_flag_i $end
$var wire 1 t! hold_flag_clint_i $end
$var reg 3 y! hold_flag_o [2:0] $end
$var reg 1 z! jump_flag_o $end
$var reg 32 {! jump_addr_o [31:0] $end
$upscope $end
$scope module u_regs $end
$var wire 1 ; clk $end
$var wire 1 < rst $end
$var wire 1 R! we_i $end
$var wire 5 S! waddr_i [4:0] $end
$var wire 32 Q! wdata_i [31:0] $end
$var wire 1 } jtag_we_i $end
$var wire 5 { jtag_addr_i [4:0] $end
$var wire 32 | jtag_data_i [31:0] $end
$var wire 5 ,! raddr1_i [4:0] $end
$var reg 32 |! rdata1_o [31:0] $end
$var wire 5 -! raddr2_i [4:0] $end
$var reg 32 }! rdata2_o [31:0] $end
$var reg 32 ~! jtag_data_o [31:0] $end
$upscope $end
$scope module u_csr_reg $end
$var wire 1 ; clk $end
$var wire 1 < rst $end
$var wire 1 ]! we_i $end
$var wire 32 4! raddr_i [31:0] $end
$var wire 32 ^! waddr_i [31:0] $end
$var wire 32 \! data_i [31:0] $end
$var wire 1 n! clint_we_i $end
$var wire 32 p! clint_raddr_i [31:0] $end
$var wire 32 o! clint_waddr_i [31:0] $end
$var wire 32 q! clint_data_i [31:0] $end
$var wire 1 c! global_int_en_o $end
$var reg 32 !" clint_data_o [31:0] $end
$var wire 32 d! clint_csr_mtvec [31:0] $end
$var wire 32 e! clint_csr_mepc [31:0] $end
$var wire 32 f! clint_csr_mstatus [31:0] $end
$var reg 32 "" data_o [31:0] $end
$var reg 64 #" cycle [63:0] $end
$var reg 32 $" mtvec [31:0] $end
$var reg 32 %" mcause [31:0] $end
$var reg 32 &" mepc [31:0] $end
$var reg 32 '" mie [31:0] $end
$var reg 32 (" mstatus [31:0] $end
$var reg 32 )" mscratch [31:0] $end
$upscope $end
$scope module u_if_id $end
$var wire 1 ; clk $end
$var wire 1 < rst $end
$var wire 32 S inst_i [31:0] $end
$var wire 32 (! inst_addr_i [31:0] $end
$var wire 3 g! hold_flag_i [2:0] $end
$var wire 8 !! int_flag_i [7:0] $end
$var wire 8 +! int_flag_o [7:0] $end
$var wire 32 )! inst_o [31:0] $end
$var wire 32 *! inst_addr_o [31:0] $end
$var wire 1 *" hold_en $end
$var wire 32 +" inst [31:0] $end
$var wire 32 ," inst_addr [31:0] $end
$var wire 8 -" int_flag [7:0] $end
$scope module inst_ff $end
$var wire 1 ; clk $end
$var wire 1 < rst $end
$var wire 1 *" hold_en $end
$var wire 32 ." def_val [31:0] $end
$var wire 32 S din [31:0] $end
$var wire 32 +" qout [31:0] $end
$var reg 32 /" qout_r [31:0] $end
$upscope $end
$scope module inst_addr_ff $end
$var wire 1 ; clk $end
$var wire 1 < rst $end
$var wire 1 *" hold_en $end
$var wire 32 0" def_val [31:0] $end
$var wire 32 (! din [31:0] $end
$var wire 32 ," qout [31:0] $end
$var reg 32 1" qout_r [31:0] $end
$upscope $end
$scope module int_ff $end
$var wire 1 ; clk $end
$var wire 1 < rst $end
$var wire 1 *" hold_en $end
$var wire 8 2" def_val [7:0] $end
$var wire 8 !! din [7:0] $end
$var wire 8 -" qout [7:0] $end
$var reg 8 3" qout_r [7:0] $end
$upscope $end
$upscope $end
$scope module u_id $end
$var wire 1 < rst $end
$var wire 32 )! inst_i [31:0] $end
$var wire 32 *! inst_addr_i [31:0] $end
$var wire 32 _! reg1_rdata_i [31:0] $end
$var wire 32 `! reg2_rdata_i [31:0] $end
$var wire 32 a! csr_rdata_i [31:0] $end
$var wire 1 U! ex_jump_flag_i $end
$var reg 5 4" reg1_raddr_o [4:0] $end
$var reg 5 5" reg2_raddr_o [4:0] $end
$var reg 32 6" csr_raddr_o [31:0] $end
$var reg 32 7" op1_o [31:0] $end
$var reg 32 8" op2_o [31:0] $end
$var reg 32 9" op1_jump_o [31:0] $end
$var reg 32 :" op2_jump_o [31:0] $end
$var reg 32 ;" inst_o [31:0] $end
$var reg 32 <" inst_addr_o [31:0] $end
$var reg 32 =" reg1_rdata_o [31:0] $end
$var reg 32 >" reg2_rdata_o [31:0] $end
$var reg 1 ?" reg_we_o $end
$var reg 5 @" reg_waddr_o [4:0] $end
$var reg 1 A" csr_we_o $end
$var reg 32 B" csr_rdata_o [31:0] $end
$var reg 32 C" csr_waddr_o [31:0] $end
$var reg 1 D" is_mac_o $end
$var wire 7 E" opcode [6:0] $end
$var wire 3 F" funct3 [2:0] $end
$var wire 7 G" funct7 [6:0] $end
$var wire 5 H" rd [4:0] $end
$var wire 5 I" rs1 [4:0] $end
$var wire 5 J" rs2 [4:0] $end
$upscope $end
$scope module u_id_ex $end
$var wire 1 ; clk $end
$var wire 1 < rst $end
$var wire 32 .! inst_i [31:0] $end
$var wire 32 /! inst_addr_i [31:0] $end
$var wire 1 2! reg_we_i $end
$var wire 5 3! reg_waddr_i [4:0] $end
$var wire 32 0! reg1_rdata_i [31:0] $end
$var wire 32 1! reg2_rdata_i [31:0] $end
$var wire 1 5! csr_we_i $end
$var wire 32 7! csr_waddr_i [31:0] $end
$var wire 32 6! csr_rdata_i [31:0] $end
$var wire 32 8! op1_i [31:0] $end
$var wire 32 9! op2_i [31:0] $end
$var wire 32 :! op1_jump_i [31:0] $end
$var wire 32 ;! op2_jump_i [31:0] $end
$var wire 1 <! is_mac_i $end
$var wire 32 &! acc_out_i [31:0] $end
$var wire 3 g! hold_flag_i [2:0] $end
$var wire 1 K! is_mac_o $end
$var wire 32 '! acc_out_o [31:0] $end
$var wire 32 G! op1_o [31:0] $end
$var wire 32 H! op2_o [31:0] $end
$var wire 32 I! op1_jump_o [31:0] $end
$var wire 32 J! op2_jump_o [31:0] $end
$var wire 32 >! inst_o [31:0] $end
$var wire 32 ?! inst_addr_o [31:0] $end
$var wire 1 @! reg_we_o $end
$var wire 5 A! reg_waddr_o [4:0] $end
$var wire 32 B! reg1_rdata_o [31:0] $end
$var wire 32 C! reg2_rdata_o [31:0] $end
$var wire 1 D! csr_we_o $end
$var wire 32 E! csr_waddr_o [31:0] $end
$var wire 32 F! csr_rdata_o [31:0] $end
$var wire 1 K" hold_en $end
$var wire 32 L" inst [31:0] $end
$var wire 32 M" inst_addr [31:0] $end
$var wire 1 N" reg_we $end
$var wire 1 O" is_mac $end
$var wire 32 P" acc_out [31:0] $end
$var wire 5 Q" reg_waddr [4:0] $end
$var wire 32 R" reg1_rdata [31:0] $end
$var wire 32 S" reg2_rdata [31:0] $end
$var wire 1 T" csr_we $end
$var wire 32 U" csr_waddr [31:0] $end
$var wire 32 V" csr_rdata [31:0] $end
$var wire 32 W" op1 [31:0] $end
$var wire 32 X" op2 [31:0] $end
$var wire 32 Y" op1_jump [31:0] $end
$var wire 32 Z" op2_jump [31:0] $end
$scope module inst_ff $end
$var wire 1 ; clk $end
$var wire 1 < rst $end
$var wire 1 K" hold_en $end
$var wire 32 [" def_val [31:0] $end
$var wire 32 .! din [31:0] $end
$var wire 32 L" qout [31:0] $end
$var reg 32 \" qout_r [31:0] $end
$upscope $end
$scope module inst_addr_ff $end
$var wire 1 ; clk $end
$var wire 1 < rst $end
$var wire 1 K" hold_en $end
$var wire 32 ]" def_val [31:0] $end
$var wire 32 /! din [31:0] $end
$var wire 32 M" qout [31:0] $end
$var reg 32 ^" qout_r [31:0] $end
$upscope $end
$scope module reg_we_ff $end
$var wire 1 ; clk $end
$var wire 1 < rst $end
$var wire 1 K" hold_en $end
$var wire 1 _" def_val [0:0] $end
$var wire 1 2! din [0:0] $end
$var wire 1 N" qout [0:0] $end
$var reg 1 `" qout_r [0:0] $end
$upscope $end
$scope module is_mac_ff $end
$var wire 1 ; clk $end
$var wire 1 < rst $end
$var wire 1 K" hold_en $end
$var wire 1 _" def_val [0:0] $end
$var wire 1 <! din [0:0] $end
$var wire 1 O" qout [0:0] $end
$var reg 1 a" qout_r [0:0] $end
$upscope $end
$scope module acc_out_ff $end
$var wire 1 ; clk $end
$var wire 1 < rst $end
$var wire 1 K" hold_en $end
$var wire 32 ]" def_val [31:0] $end
$var wire 32 &! din [31:0] $end
$var wire 32 P" qout [31:0] $end
$var reg 32 b" qout_r [31:0] $end
$upscope $end
$scope module reg_waddr_ff $end
$var wire 1 ; clk $end
$var wire 1 < rst $end
$var wire 1 K" hold_en $end
$var wire 5 c" def_val [4:0] $end
$var wire 5 3! din [4:0] $end
$var wire 5 Q" qout [4:0] $end
$var reg 5 d" qout_r [4:0] $end
$upscope $end
$scope module reg1_rdata_ff $end
$var wire 1 ; clk $end
$var wire 1 < rst $end
$var wire 1 K" hold_en $end
$var wire 32 ]" def_val [31:0] $end
$var wire 32 0! din [31:0] $end
$var wire 32 R" qout [31:0] $end
$var reg 32 e" qout_r [31:0] $end
$upscope $end
$scope module reg2_rdata_ff $end
$var wire 1 ; clk $end
$var wire 1 < rst $end
$var wire 1 K" hold_en $end
$var wire 32 ]" def_val [31:0] $end
$var wire 32 1! din [31:0] $end
$var wire 32 S" qout [31:0] $end
$var reg 32 f" qout_r [31:0] $end
$upscope $end
$scope module csr_we_ff $end
$var wire 1 ; clk $end
$var wire 1 < rst $end
$var wire 1 K" hold_en $end
$var wire 1 _" def_val [0:0] $end
$var wire 1 5! din [0:0] $end
$var wire 1 T" qout [0:0] $end
$var reg 1 g" qout_r [0:0] $end
$upscope $end
$scope module csr_waddr_ff $end
$var wire 1 ; clk $end
$var wire 1 < rst $end
$var wire 1 K" hold_en $end
$var wire 32 ]" def_val [31:0] $end
$var wire 32 7! din [31:0] $end
$var wire 32 U" qout [31:0] $end
$var reg 32 h" qout_r [31:0] $end
$upscope $end
$scope module csr_rdata_ff $end
$var wire 1 ; clk $end
$var wire 1 < rst $end
$var wire 1 K" hold_en $end
$var wire 32 ]" def_val [31:0] $end
$var wire 32 6! din [31:0] $end
$var wire 32 V" qout [31:0] $end
$var reg 32 i" qout_r [31:0] $end
$upscope $end
$scope module op1_ff $end
$var wire 1 ; clk $end
$var wire 1 < rst $end
$var wire 1 K" hold_en $end
$var wire 32 ]" def_val [31:0] $end
$var wire 32 8! din [31:0] $end
$var wire 32 W" qout [31:0] $end
$var reg 32 j" qout_r [31:0] $end
$upscope $end
$scope module op2_ff $end
$var wire 1 ; clk $end
$var wire 1 < rst $end
$var wire 1 K" hold_en $end
$var wire 32 ]" def_val [31:0] $end
$var wire 32 9! din [31:0] $end
$var wire 32 X" qout [31:0] $end
$var reg 32 k" qout_r [31:0] $end
$upscope $end
$scope module op1_jump_ff $end
$var wire 1 ; clk $end
$var wire 1 < rst $end
$var wire 1 K" hold_en $end
$var wire 32 ]" def_val [31:0] $end
$var wire 32 :! din [31:0] $end
$var wire 32 Y" qout [31:0] $end
$var reg 32 l" qout_r [31:0] $end
$upscope $end
$scope module op2_jump_ff $end
$var wire 1 ; clk $end
$var wire 1 < rst $end
$var wire 1 K" hold_en $end
$var wire 32 ]" def_val [31:0] $end
$var wire 32 ;! din [31:0] $end
$var wire 32 Z" qout [31:0] $end
$var reg 32 m" qout_r [31:0] $end
$upscope $end
$upscope $end
$scope module u_ex $end
$var wire 1 < rst $end
$var wire 1 K! is_mac_i $end
$var wire 32 >! inst_i [31:0] $end
$var wire 32 ?! inst_addr_i [31:0] $end
$var wire 1 @! reg_we_i $end
$var wire 5 A! reg_waddr_i [4:0] $end
$var wire 32 B! reg1_rdata_i [31:0] $end
$var wire 32 C! reg2_rdata_i [31:0] $end
$var wire 1 D! csr_we_i $end
$var wire 32 E! csr_waddr_i [31:0] $end
$var wire 32 F! csr_rdata_i [31:0] $end
$var wire 1 s! int_assert_i $end
$var wire 32 r! int_addr_i [31:0] $end
$var wire 32 G! op1_i [31:0] $end
$var wire 32 H! op2_i [31:0] $end
$var wire 32 I! op1_jump_i [31:0] $end
$var wire 32 J! op2_jump_i [31:0] $end
$var wire 32 &! acc_out [31:0] $end
$var wire 32 N mem_rdata_i [31:0] $end
$var wire 1 k! div_ready_i $end
$var wire 32 j! div_result_i [31:0] $end
$var wire 1 l! div_busy_i $end
$var wire 5 m! div_reg_waddr_i [4:0] $end
$var reg 32 n" mem_wdata_o [31:0] $end
$var reg 32 o" mem_raddr_o [31:0] $end
$var reg 32 p" mem_waddr_o [31:0] $end
$var wire 1 O! mem_we_o $end
$var wire 1 P! mem_req_o $end
$var wire 32 Q! reg_wdata_o [31:0] $end
$var wire 1 R! reg_we_o $end
$var wire 5 S! reg_waddr_o [4:0] $end
$var reg 32 q" csr_wdata_o [31:0] $end
$var wire 1 ]! csr_we_o $end
$var wire 32 ^! csr_waddr_o [31:0] $end
$var wire 1 W! div_start_o $end
$var reg 32 r" div_dividend_o [31:0] $end
$var reg 32 s" div_divisor_o [31:0] $end
$var reg 3 t" div_op_o [2:0] $end
$var reg 5 u" div_reg_waddr_o [4:0] $end
$var wire 1 T! hold_flag_o $end
$var wire 1 U! jump_flag_o $end
$var wire 32 V! jump_addr_o [31:0] $end
$var wire 2 v" mem_raddr_index [1:0] $end
$var wire 2 w" mem_waddr_index [1:0] $end
$var wire 64 x" mul_temp [63:0] $end
$var wire 64 y" mul_temp_invert [63:0] $end
$var wire 32 z" sr_shift [31:0] $end
$var wire 32 {" sri_shift [31:0] $end
$var wire 32 |" sr_shift_mask [31:0] $end
$var wire 32 }" sri_shift_mask [31:0] $end
$var wire 32 ~" op1_add_op2_res [31:0] $end
$var wire 32 !# op1_jump_add_op2_jump_res [31:0] $end
$var wire 32 "# reg1_data_invert [31:0] $end
$var wire 32 ## reg2_data_invert [31:0] $end
$var wire 1 $# op1_ge_op2_signed $end
$var wire 1 %# op1_ge_op2_unsigned $end
$var wire 1 &# op1_eq_op2 $end
$var reg 32 '# mul_op1 [31:0] $end
$var reg 32 (# mul_op2 [31:0] $end
$var wire 7 )# opcode [6:0] $end
$var wire 3 *# funct3 [2:0] $end
$var wire 7 +# funct7 [6:0] $end
$var wire 5 ,# rd [4:0] $end
$var wire 5 -# uimm [4:0] $end
$var reg 32 .# reg_wdata [31:0] $end
$var reg 1 /# reg_we $end
$var reg 5 0# reg_waddr [4:0] $end
$var reg 32 1# div_wdata [31:0] $end
$var reg 1 2# div_we $end
$var reg 5 3# div_waddr [4:0] $end
$var reg 1 4# div_hold_flag $end
$var reg 1 5# div_jump_flag $end
$var reg 32 6# div_jump_addr [31:0] $end
$var reg 1 7# hold_flag $end
$var reg 1 8# jump_flag $end
$var reg 32 9# jump_addr [31:0] $end
$var reg 1 :# mem_we $end
$var reg 1 ;# mem_req $end
$var reg 1 <# div_start $end
$var wire 1 =# valid_mac $end
$upscope $end
$scope module u_div $end
$var wire 1 ; clk $end
$var wire 1 < rst $end
$var wire 32 X! dividend_i [31:0] $end
$var wire 32 Y! divisor_i [31:0] $end
$var wire 1 W! start_i $end
$var wire 3 Z! op_i [2:0] $end
$var wire 5 [! reg_waddr_i [4:0] $end
$var reg 32 ># result_o [31:0] $end
$var reg 1 ?# ready_o $end
$var reg 1 @# busy_o $end
$var reg 5 A# reg_waddr_o [4:0] $end
$var reg 32 B# dividend_r [31:0] $end
$var reg 32 C# divisor_r [31:0] $end
$var reg 3 D# op_r [2:0] $end
$var reg 4 E# state [3:0] $end
$var reg 32 F# count [31:0] $end
$var reg 32 G# div_result [31:0] $end
$var reg 32 H# div_remain [31:0] $end
$var reg 32 I# minuend [31:0] $end
$var reg 1 J# invert_result $end
$var wire 1 K# op_div $end
$var wire 1 L# op_divu $end
$var wire 1 M# op_rem $end
$var wire 1 N# op_remu $end
$var wire 32 O# dividend_invert [31:0] $end
$var wire 32 P# divisor_invert [31:0] $end
$var wire 1 Q# minuend_ge_divisor $end
$var wire 32 R# minuend_sub_res [31:0] $end
$var wire 32 S# div_result_tmp [31:0] $end
$var wire 32 T# minuend_tmp [31:0] $end
$upscope $end
$scope module u_clint $end
$var wire 1 ; clk $end
$var wire 1 < rst $end
$var wire 8 +! int_flag_i [7:0] $end
$var wire 32 .! inst_i [31:0] $end
$var wire 32 /! inst_addr_i [31:0] $end
$var wire 1 U! jump_flag_i $end
$var wire 32 V! jump_addr_i [31:0] $end
$var wire 1 W! div_started_i $end
$var wire 3 g! hold_flag_i [2:0] $end
$var wire 32 b! data_i [31:0] $end
$var wire 32 d! csr_mtvec [31:0] $end
$var wire 32 e! csr_mepc [31:0] $end
$var wire 32 f! csr_mstatus [31:0] $end
$var wire 1 c! global_int_en_i $end
$var wire 1 t! hold_flag_o $end
$var reg 1 U# we_o $end
$var reg 32 V# waddr_o [31:0] $end
$var reg 32 W# raddr_o [31:0] $end
$var reg 32 X# data_o [31:0] $end
$var reg 32 Y# int_addr_o [31:0] $end
$var reg 1 Z# int_assert_o $end
$var reg 4 [# int_state [3:0] $end
$var reg 5 \# csr_state [4:0] $end
$var reg 32 ]# inst_addr [31:0] $end
$var reg 32 ^# cause [31:0] $end
$upscope $end
$upscope $end
$scope module u_rom $end
$var wire 1 ; clk $end
$var wire 1 < rst $end
$var wire 1 c we_i $end
$var wire 32 ` addr_i [31:0] $end
$var wire 32 a data_i [31:0] $end
$var reg 32 _# data_o [31:0] $end
$upscope $end
$scope module u_ram $end
$var wire 1 ; clk $end
$var wire 1 < rst $end
$var wire 1 g we_i $end
$var wire 32 d addr_i [31:0] $end
$var wire 32 e data_i [31:0] $end
$var reg 32 `# data_o [31:0] $end
$upscope $end
$scope module timer_0 $end
$var wire 1 ; clk $end
$var wire 1 < rst $end
$var wire 32 i data_i [31:0] $end
$var wire 32 h addr_i [31:0] $end
$var wire 1 k we_i $end
$var reg 32 a# data_o [31:0] $end
$var wire 1 "! int_sig_o $end
$var reg 32 b# timer_ctrl [31:0] $end
$var reg 32 c# timer_count [31:0] $end
$var reg 32 d# timer_value [31:0] $end
$upscope $end
$scope module uart_0 $end
$var wire 1 ; clk $end
$var wire 1 < rst $end
$var wire 1 o we_i $end
$var wire 32 l addr_i [31:0] $end
$var wire 32 m data_i [31:0] $end
$var reg 32 e# data_o [31:0] $end
$var wire 1 A tx_pin $end
$var wire 1 B rx_pin $end
$var reg 1 f# tx_data_valid $end
$var reg 1 g# tx_data_ready $end
$var reg 4 h# state [3:0] $end
$var reg 16 i# cycle_cnt [15:0] $end
$var reg 4 j# bit_cnt [3:0] $end
$var reg 8 k# tx_data [7:0] $end
$var reg 1 l# tx_reg $end
$var reg 1 m# rx_q0 $end
$var reg 1 n# rx_q1 $end
$var wire 1 o# rx_negedge $end
$var reg 1 p# rx_start $end
$var reg 4 q# rx_clk_edge_cnt [3:0] $end
$var reg 1 r# rx_clk_edge_level $end
$var reg 1 s# rx_done $end
$var reg 16 t# rx_clk_cnt [15:0] $end
$var reg 16 u# rx_div_cnt [15:0] $end
$var reg 8 v# rx_data [7:0] $end
$var reg 1 w# rx_over $end
$var reg 32 x# uart_ctrl [31:0] $end
$var reg 32 y# uart_status [31:0] $end
$var reg 32 z# uart_baud [31:0] $end
$var reg 32 {# uart_rx [31:0] $end
$upscope $end
$scope module gpio_0 $end
$var wire 1 ; clk $end
$var wire 1 < rst $end
$var wire 1 s we_i $end
$var wire 32 p addr_i [31:0] $end
$var wire 32 q data_i [31:0] $end
$var reg 32 |# data_o [31:0] $end
$var wire 2 #! io_pin_i [1:0] $end
$var wire 32 $! reg_ctrl [31:0] $end
$var wire 32 %! reg_data [31:0] $end
$var reg 32 }# gpio_ctrl [31:0] $end
$var reg 32 ~# gpio_data [31:0] $end
$upscope $end
$scope module spi_0 $end
$var wire 1 ; clk $end
$var wire 1 < rst $end
$var wire 32 u data_i [31:0] $end
$var wire 32 t addr_i [31:0] $end
$var wire 1 w we_i $end
$var reg 32 !$ data_o [31:0] $end
$var reg 1 "$ spi_mosi $end
$var wire 1 H spi_miso $end
$var wire 1 J spi_ss $end
$var reg 1 #$ spi_clk $end
$var reg 32 $$ spi_ctrl [31:0] $end
$var reg 32 %$ spi_data [31:0] $end
$var reg 32 &$ spi_status [31:0] $end
$var reg 9 '$ clk_cnt [8:0] $end
$var reg 1 ($ en $end
$var reg 5 )$ spi_clk_edge_cnt [4:0] $end
$var reg 1 *$ spi_clk_edge_level $end
$var reg 8 +$ rdata [7:0] $end
$var reg 1 ,$ done $end
$var reg 4 -$ bit_index [3:0] $end
$var wire 9 .$ div_cnt [8:0] $end
$upscope $end
$scope module u_rib $end
$var wire 1 ; clk $end
$var wire 1 < rst $end
$var wire 32 L m0_addr_i [31:0] $end
$var wire 32 M m0_data_i [31:0] $end
$var reg 32 /$ m0_data_o [31:0] $end
$var wire 1 O m0_req_i $end
$var wire 1 P m0_we_i $end
$var wire 32 Q m1_addr_i [31:0] $end
$var wire 32 0$ m1_data_i [31:0] $end
$var reg 32 1$ m1_data_o [31:0] $end
$var wire 1 2$ m1_req_i $end
$var wire 1 3$ m1_we_i $end
$var wire 32 V m2_addr_i [31:0] $end
$var wire 32 W m2_data_i [31:0] $end
$var reg 32 4$ m2_data_o [31:0] $end
$var wire 1 Y m2_req_i $end
$var wire 1 Z m2_we_i $end
$var wire 32 [ m3_addr_i [31:0] $end
$var wire 32 \ m3_data_i [31:0] $end
$var reg 32 5$ m3_data_o [31:0] $end
$var wire 1 ^ m3_req_i $end
$var wire 1 _ m3_we_i $end
$var reg 32 6$ s0_addr_o [31:0] $end
$var reg 32 7$ s0_data_o [31:0] $end
$var wire 32 b s0_data_i [31:0] $end
$var reg 1 8$ s0_we_o $end
$var reg 32 9$ s1_addr_o [31:0] $end
$var reg 32 :$ s1_data_o [31:0] $end
$var wire 32 f s1_data_i [31:0] $end
$var reg 1 ;$ s1_we_o $end
$var reg 32 <$ s2_addr_o [31:0] $end
$var reg 32 =$ s2_data_o [31:0] $end
$var wire 32 j s2_data_i [31:0] $end
$var reg 1 >$ s2_we_o $end
$var reg 32 ?$ s3_addr_o [31:0] $end
$var reg 32 @$ s3_data_o [31:0] $end
$var wire 32 n s3_data_i [31:0] $end
$var reg 1 A$ s3_we_o $end
$var reg 32 B$ s4_addr_o [31:0] $end
$var reg 32 C$ s4_data_o [31:0] $end
$var wire 32 r s4_data_i [31:0] $end
$var reg 1 D$ s4_we_o $end
$var reg 32 E$ s5_addr_o [31:0] $end
$var reg 32 F$ s5_data_o [31:0] $end
$var wire 32 v s5_data_i [31:0] $end
$var reg 1 G$ s5_we_o $end
$var reg 1 H$ hold_flag_o $end
$var wire 4 I$ req [3:0] $end
$var reg 2 J$ grant [1:0] $end
$upscope $end
$scope module u_uart_debug $end
$var wire 1 ; clk $end
$var wire 1 < rst $end
$var wire 1 @ debug_en_i $end
$var wire 1 ^ req_o $end
$var reg 1 K$ mem_we_o $end
$var reg 32 L$ mem_addr_o [31:0] $end
$var reg 32 M$ mem_wdata_o [31:0] $end
$var wire 32 ] mem_rdata_i [31:0] $end
$var reg 14 N$ state [13:0] $end
$var reg 8 O$ rec_bytes_index [7:0] $end
$var reg 8 P$ need_to_rec_bytes [7:0] $end
$var reg 16 Q$ remain_packet_count [15:0] $end
$var reg 32 R$ fw_file_size [31:0] $end
$var reg 32 S$ write_mem_addr [31:0] $end
$var reg 32 T$ write_mem_data [31:0] $end
$var reg 8 U$ write_mem_byte_index0 [7:0] $end
$var reg 8 V$ write_mem_byte_index1 [7:0] $end
$var reg 8 W$ write_mem_byte_index2 [7:0] $end
$var reg 8 X$ write_mem_byte_index3 [7:0] $end
$var reg 16 Y$ crc_result [15:0] $end
$var reg 4 Z$ crc_bit_index [3:0] $end
$var reg 8 [$ crc_byte_index [7:0] $end
$upscope $end
$scope module u_jtag_top $end
$var wire 1 ; clk $end
$var wire 1 < jtag_rst_n $end
$var wire 1 D jtag_pin_TCK $end
$var wire 1 E jtag_pin_TMS $end
$var wire 1 F jtag_pin_TDI $end
$var wire 1 G jtag_pin_TDO $end
$var wire 1 } reg_we_o $end
$var wire 5 { reg_addr_o [4:0] $end
$var wire 32 | reg_wdata_o [31:0] $end
$var wire 32 ~ reg_rdata_i [31:0] $end
$var wire 1 Z mem_we_o $end
$var wire 32 V mem_addr_o [31:0] $end
$var wire 32 W mem_wdata_o [31:0] $end
$var wire 32 X mem_rdata_i [31:0] $end
$var wire 1 Y op_req_o $end
$var wire 1 y halt_req_o $end
$var wire 1 z reset_req_o $end
$var wire 1 \$ dtm_ack_o $end
$var wire 1 ]$ dtm_req_valid_o $end
$var wire 40 ^$ dtm_req_data_o [39:0] $end
$var wire 1 _$ dm_ack_o $end
$var wire 40 `$ dm_resp_data_o [39:0] $end
$var wire 1 a$ dm_resp_valid_o $end
$var wire 1 b$ dm_op_req_o $end
$var wire 1 c$ dm_halt_req_o $end
$var wire 1 d$ dm_reset_req_o $end
$scope module u_jtag_driver $end
$var wire 1 < rst_n $end
$var wire 1 D jtag_TCK $end
$var wire 1 F jtag_TDI $end
$var wire 1 E jtag_TMS $end
$var reg 1 e$ jtag_TDO $end
$var wire 1 a$ dm_resp_i $end
$var wire 40 `$ dm_resp_data_i [39:0] $end
$var wire 1 \$ dtm_ack_o $end
$var wire 1 _$ dm_ack_i $end
$var wire 1 ]$ dtm_req_valid_o $end
$var wire 40 ^$ dtm_req_data_o [39:0] $end
$var reg 5 f$ ir_reg [4:0] $end
$var reg 40 g$ shift_reg [39:0] $end
$var reg 4 h$ jtag_state [3:0] $end
$var wire 1 i$ is_busy $end
$var reg 1 j$ sticky_busy $end
$var reg 1 k$ dtm_req_valid $end
$var reg 40 l$ dtm_req_data [39:0] $end
$var reg 40 m$ dm_resp_data [39:0] $end
$var reg 1 n$ dm_is_busy $end
$var wire 6 o$ addr_bits [5:0] $end
$var wire 40 p$ busy_response [39:0] $end
$var wire 40 q$ none_busy_response [39:0] $end
$var wire 32 r$ idcode [31:0] $end
$var wire 32 s$ dtmcs [31:0] $end
$var wire 2 t$ dmi_stat [1:0] $end
$var wire 1 u$ dtm_reset $end
$var wire 1 v$ tx_idle $end
$var wire 1 w$ rx_valid $end
$var wire 40 x$ rx_data [39:0] $end
$var wire 1 y$ tx_valid $end
$var wire 40 z$ tx_data [39:0] $end
$scope module tx $end
$var wire 1 D clk $end
$var wire 1 < rst_n $end
$var wire 1 _$ ack_i $end
$var wire 1 y$ req_i $end
$var wire 40 z$ req_data_i [39:0] $end
$var wire 1 v$ idle_o $end
$var wire 1 ]$ req_o $end
$var wire 40 ^$ req_data_o [39:0] $end
$var reg 3 {$ state [2:0] $end
$var reg 3 |$ state_next [2:0] $end
$var reg 1 }$ ack_d $end
$var reg 1 ~$ ack $end
$var reg 1 !% req $end
$var reg 40 "% req_data [39:0] $end
$var reg 1 #% idle $end
$upscope $end
$scope module rx $end
$var wire 1 D clk $end
$var wire 1 < rst_n $end
$var wire 1 a$ req_i $end
$var wire 40 `$ req_data_i [39:0] $end
$var wire 1 \$ ack_o $end
$var wire 40 x$ recv_data_o [39:0] $end
$var wire 1 w$ recv_rdy_o $end
$var reg 2 $% state [1:0] $end
$var reg 2 %% state_next [1:0] $end
$var reg 1 &% req_d $end
$var reg 1 '% req $end
$var reg 40 (% recv_data [39:0] $end
$var reg 1 )% recv_rdy $end
$var reg 1 *% ack $end
$upscope $end
$upscope $end
$scope module u_jtag_dm $end
$var wire 1 ; clk $end
$var wire 1 < rst_n $end
$var wire 1 _$ dm_ack_o $end
$var wire 1 ]$ dtm_req_valid_i $end
$var wire 40 ^$ dtm_req_data_i [39:0] $end
$var wire 1 \$ dtm_ack_i $end
$var wire 40 `$ dm_resp_data_o [39:0] $end
$var wire 1 a$ dm_resp_valid_o $end
$var wire 1 } dm_reg_we_o $end
$var wire 5 { dm_reg_addr_o [4:0] $end
$var wire 32 | dm_reg_wdata_o [31:0] $end
$var wire 32 ~ dm_reg_rdata_i [31:0] $end
$var wire 1 Z dm_mem_we_o $end
$var wire 32 V dm_mem_addr_o [31:0] $end
$var wire 32 W dm_mem_wdata_o [31:0] $end
$var wire 32 X dm_mem_rdata_i [31:0] $end
$var wire 1 Y dm_op_req_o $end
$var wire 1 y dm_halt_req_o $end
$var wire 1 z dm_reset_req_o $end
$var reg 32 +% dcsr [31:0] $end
$var reg 32 ,% dmstatus [31:0] $end
$var reg 32 -% dmcontrol [31:0] $end
$var reg 32 .% hartinfo [31:0] $end
$var reg 32 /% abstractcs [31:0] $end
$var reg 32 0% data0 [31:0] $end
$var reg 32 1% sbcs [31:0] $end
$var reg 32 2% sbaddress0 [31:0] $end
$var reg 32 3% sbdata0 [31:0] $end
$var reg 32 4% command [31:0] $end
$var reg 32 5% read_data [31:0] $end
$var reg 1 6% dm_reg_we $end
$var reg 5 7% dm_reg_addr [4:0] $end
$var reg 32 8% dm_reg_wdata [31:0] $end
$var reg 1 9% dm_mem_we $end
$var reg 32 :% dm_mem_addr [31:0] $end
$var reg 32 ;% dm_mem_wdata [31:0] $end
$var reg 1 <% dm_halt_req $end
$var reg 1 =% dm_reset_req $end
$var reg 1 >% need_resp $end
$var reg 1 ?% is_read_reg $end
$var wire 1 @% rx_valid $end
$var wire 40 A% rx_data [39:0] $end
$var wire 32 B% sbaddress0_next [31:0] $end
$var wire 40 C% dm_resp_data [39:0] $end
$var wire 2 D% op [1:0] $end
$var wire 32 E% data [31:0] $end
$var wire 6 F% address [5:0] $end
$var wire 1 G% read_dmstatus $end
$var wire 1 H% tx_idle $end
$scope module tx $end
$var wire 1 ; clk $end
$var wire 1 < rst_n $end
$var wire 1 \$ ack_i $end
$var wire 1 I% req_i $end
$var wire 40 C% req_data_i [39:0] $end
$var wire 1 H% idle_o $end
$var wire 1 a$ req_o $end
$var wire 40 `$ req_data_o [39:0] $end
$var reg 3 J% state [2:0] $end
$var reg 3 K% state_next [2:0] $end
$var reg 1 L% ack_d $end
$var reg 1 M% ack $end
$var reg 1 N% req $end
$var reg 40 O% req_data [39:0] $end
$var reg 1 P% idle $end
$upscope $end
$scope module rx $end
$var wire 1 ; clk $end
$var wire 1 < rst_n $end
$var wire 1 ]$ req_i $end
$var wire 40 ^$ req_data_i [39:0] $end
$var wire 1 _$ ack_o $end
$var wire 40 A% recv_data_o [39:0] $end
$var wire 1 @% recv_rdy_o $end
$var reg 2 Q% state [1:0] $end
$var reg 2 R% state_next [1:0] $end
$var reg 1 S% req_d $end
$var reg 1 T% req $end
$var reg 40 U% recv_data [39:0] $end
$var reg 1 V% recv_rdy $end
$var reg 1 W% ack $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end

#0
$dumpvars
0!
b0x !!
bx !"
bx !#
b0 !$
0!%
0"
x"!
b0 ""
bx "#
x"$
b0 "%
b1 #
bx #!
bx #"
bx ##
x#$
1#%
bx $
bx $!
bx $"
x$#
bx $$
b1 $%
bx %
bx %!
bx %"
x%#
bx %$
b1 %%
x&
bx &!
bx &"
x&#
bx &$
0&%
b0xxxxx '
bx '!
bx '"
bx '#
bx '$
0'%
b0xxxxx (
bx (!
bx ("
bx (#
x($
b0 (%
z)
bx )!
bx )"
bx )#
bx )$
0)%
x*
bx *!
0*"
bx *#
x*$
0*%
bx +
bx +!
bx +"
bx +#
bx +$
b0 +%
bx ,
b0 ,!
bx ,"
bx ,#
x,$
b10000110000110010000010 ,%
bx -
b0 -!
bx -"
bx -#
bx -$
b0 -%
b0 .
bx .!
b1 ."
b0 .#
b0xxxxxxxx .$
b0 .%
b0 /
bx /!
bx /"
x/#
b0 /$
b1000000000000000000000011 /%
bx 0
b0 0!
b0 0"
bx 0#
b0 0$
b0 0%
bx 1
b0 1!
bx 1"
bx 1#
b1 1$
b100000000001000000010000000100 1%
bx 2
02!
b0 2"
x2#
12$
b0 2%
bx 3
b0 3!
bx 3"
bx 3#
03$
b0 3%
bx 4
b0 4!
b0 4"
x4#
b0 4$
b0 4%
bx 5
05!
b0 5"
x5#
b0 5$
b0 5%
bx 6
b0 6!
b0 6"
bx 6#
b0 6$
06%
b10 7
b0 7!
b0 7"
07#
b0 7$
b0 7%
b11 8
b0 8!
b0 8"
08#
08$
b0 8%
bx 9
b0 9!
b0 9"
b0 9#
b0 9$
09%
bx :
b0 :!
b0 :"
0:#
b0 :$
b0 :%
0;
b0 ;!
bx ;"
0;#
0;$
b0 ;%
0<
0<!
bx <"
x<#
b0 <$
0<%
x=
z=!
b0 ="
z=#
b0 =$
0=%
x>
bx >!
b0 >"
bx >#
0>$
0>%
1?
bx ?!
0?"
x?#
b0 ?$
0?%
0@
x@!
b0 @"
x@#
b0 @$
0@%
xA
bx A!
0A"
bx A#
0A$
b0 A%
zB
bx B!
b0 B"
bx B#
b0 B$
b100 B%
bx C
bx C!
b0 C"
bx C#
b0 C$
b0 C%
zD
xD!
0D"
bx D#
0D$
b0 D%
zE
bx E!
bx E"
bx E#
b0 E$
b0 E%
zF
bx F!
bx F"
bx F#
b0 F$
b0 F%
xG
bx G!
bx G"
bx G#
0G$
0G%
zH
bx H!
bx H"
bx H#
0H$
1H%
xI
bx I!
bx I"
bx I#
b10 I$
0I%
xJ
bx J!
bx J"
xJ#
b1 J$
b1 J%
xK
xK!
0K"
xK#
xK$
b1 K%
b0 L
b0 L!
bx L"
xL#
bx L$
0L%
b0 M
b0 M!
bx M"
xM#
bx M$
0M%
b0 N
b0 N!
xN"
xN#
bx N$
0N%
0O
0O!
xO"
bx O#
bx O$
b0 O%
0P
0P!
bx P"
bx P#
bx P$
1P%
bx Q
bx Q!
bx Q"
xQ#
bx Q$
b1 Q%
bz R
xR!
bx R"
bx R#
bx R$
b1 R%
b1 S
bx S!
bx S"
bx S#
bx S$
0S%
zT
xT!
xT"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx T#
bx T$
0T%
zU
xU!
bx U"
xU#
bx U$
b0 U%
b0 V
bx V!
bx V"
bx V#
bx V$
0V%
b0 W
xW!
bx W"
bx W#
bx W$
0W%
b0 X
bx X!
bx X"
bx X#
bx X$
0Y
bx Y!
bx Y"
bx Y#
bx Y$
0Z
bx Z!
bx Z"
xZ#
bx Z$
bx [
bx [!
b1 ["
b1 [#
bx [$
bx \
b0 \!
bx \"
bx \#
0\$
b0 ]
x]!
b0 ]"
bx ]#
0]$
0^
bx ^!
bx ^"
bx ^#
b0 ^$
x_
b0 _!
0_"
b0 _#
0_$
b0 `
b0 `!
x`"
b0 `#
b0 `$
b0 a
b0 a!
xa"
b0 a#
0a$
b0 b
bx b!
bx b"
bx b#
zb$
0c
xc!
b0 c"
bx c#
zc$
b0 d
bx d!
bx d"
bx d#
zd$
b0 e
bx e!
bx e"
b0 e#
xe$
b0 f
bx f!
bx f"
xf#
bx f$
0g
b0 g!
xg"
xg#
bx g$
b0 h
xh!
bx h"
bx h#
b0 h$
b0 i
bx i!
bx i"
bx i#
0i$
b0 j
bx j!
bx j"
bx j#
0j$
0k
xk!
bx k"
bx k#
0k$
b0 l
xl!
bx l"
xl#
b0 l$
b0 m
bx m!
bx m"
xm#
b0 m$
b0 n
xn!
b0 n"
xn#
0n$
0o
bx o!
b0 o"
xo#
b110 o$
b0 p
bx p!
b0 p"
xp#
b11 p$
b0 q
bx q!
b0 q"
bx q#
b0 q$
b0 r
bx r!
bx r"
xr#
b11110001000000000101001101111 r$
0s
xs!
bx s"
xs#
b101000001100001 s$
b0 t
xt!
bx t"
bx t#
b0 t$
b0 u
bx u!
bx u"
bx u#
xu$
b0 v
bx v!
bx v"
bx v#
1v$
0w
bx w!
bx w"
xw#
0w$
0x
bx x!
bx x"
bx x#
b0 x$
0y
b0 y!
bx y"
bx y#
0y$
0z
xz!
bx z"
bx z#
b0 z$
b0 {
bx {!
bx {"
bx {#
b1 {$
b0 |
b0 |!
bx |"
b0 |#
b1 |$
0}
b0 }!
bx }"
bx }#
0}$
b0 ~
b0 ~!
bx ~"
bx ~#
0~$
$end

#10000
1!
b0 !!
b0 !"
b0 !#
0"!
b0 "#
0"$
b0 #
bz #!
b0 #"
b0 ##
0#$
b1 $
b0 $!
b0 $"
1$#
b0 $$
b1 %
b0 %!
b0 %"
1%#
b0 %$
0&
b0 &!
b0 &"
1&#
b0 &$
b0 '
b0 '!
b0 '"
b0 '#
b0 '$
b0 (
b0 (!
b0 ("
b0 (#
0($
b1 )!
b0 )"
b1 )#
b0 )$
0*
b0 *!
b0 *#
0*$
b0 +
b0 +!
b1 +"
b0 +#
b0 +$
b0 ,
b0 ,"
b0 ,#
0,$
b0 -
b0 -"
b0 -#
b0 -$
b1 .!
b0 .$
b0 /!
b1 /"
0/#
b0 0
b0 0#
b0 1
b0 1"
b0 1#
b0 1$
b0 2
02#
b0 3"
b0 3#
04#
05#
b0 6#
1;
b1 ;"
b0 <"
0<#
1=
1>
b1 >!
b0 >#
b0 ?!
0?#
0@!
0@#
0A
b0 A!
b0 A#
b0 B!
b0 B#
bz C
b0 C!
b0 C#
0D!
b0 D#
b0 E!
b1 E"
b1 E#
b0 F!
b0 F"
b0 F#
b0 G!
b0 G"
b0 G#
b0 H!
b0 H"
b0 H#
0I
b0 I!
b0 I"
b0 I#
1J
b0 J!
b0 J"
0J#
0K
0K!
0K#
0K$
b1 L"
0L#
b0 L$
b0 M"
0M#
b0 M$
0N"
0N#
b1 N$
0O"
b0 O#
b0 O$
b0 P"
b0 P#
b0 P$
b0 Q
b0 Q!
b0 Q"
1Q#
b0 Q$
0R!
b0 R"
b0 R#
b0 R$
b0 S
b0 S!
b0 S"
b1 S#
b0 S$
0T!
0T"
b0 T#
b0 T$
0U!
b0 U"
0U#
b0 U$
b0 V!
b0 V"
b0 V#
b0 V$
0W!
b0 W"
b0 W$
b0 X!
b0 X"
b0 X#
b0 X$
b0 Y!
b0 Y"
b0 Y#
b0 Y$
b0 Z!
b0 Z"
0Z#
b0 Z$
b0 [
b0 [!
b0 [$
b0 \
b1 \"
b1 \#
0]!
b0 ]#
b0 ^!
b0 ^"
b0 ^#
0_
0`"
0a"
b0 b!
b0 b"
b0 b#
0c!
b0 c#
b0 d!
b0 d"
b0 d#
b0 e!
b0 e"
b0 f!
b0 f"
0f#
0g"
0g#
0h!
b0 h"
b1 h#
b0 i!
b0 i"
b0 i#
b0 j!
b0 j"
b0 j#
0k!
b0 k"
0l!
b0 l"
0l#
b0 m!
b0 m"
0m#
0n!
0n#
b0 o!
0o#
0p#
b0 q!
b0 q#
b0 r!
b0 r"
0r#
0s!
b0 s"
0t!
b0 t"
b0 t#
b0 u!
b0 u"
b0 u#
b0 v!
b0 v"
b0 v#
b0 w"
0w#
b0 x!
b0 x"
b0 x#
b0 y"
b0 y#
0z!
b0 z"
b110111000 z#
b0 {!
b0 {"
b0 {#
b11111111111111111111111111111111 |"
b11111111111111111111111111111111 }"
b0 }#
b0 ~"
b0 ~#

#20000
0!
0;

#30000
1!
1;

#40000
0!
1"
b10010000101101001100101011 #
b10010000101101001100101011 1$
0;
1<
b10010000101101001100101011 S
b10010000101101001100101011 _#
bx `#
b10010000101101001100101011 b
bx f

#50000
1!
b10000000000110001100101011 #
b1 #"
b10010000101101001100101011 $
b100 (!
b10010000101101001100101011 )!
b10010000101101001100101011 +"
b101 ,!
b100 -!
b110 -$
b11 .
b10010000101101001100101011 .!
b10 /
b10010000101101001100101011 /"
b11 0!
b10 1!
b10000000000110001100101011 1$
12!
b110 3!
b101 4"
b100 5"
b100 6$
b11 7"
b11 8!
b10 8"
b10 9!
1;
b10010000101101001100101011 ;"
1<!
x=
b11 ="
x>
b10 >"
1?"
b110 @"
1A
1D"
b101011 E"
b101 F"
b1 G"
b110 H"
b101 I"
b100 J"
b100 Q
b10000000000110001100101011 S
b11 _!
b10000000000110001100101011 _#
b100 `
b10 `!
b10000000000110001100101011 b
1l#
zm#
b110111000 u#
b100 x!
b11 |!
b10 }!

#60000
0!
0;

#70000
1!
b11111111111111111111111111111101 "#
bx #
b10 #"
b11111111111111111111111111111110 ##
b10000000000110001100101011 $
b10010000101101001100101011 %
0&#
b110 '
b11 '#
b110 (
b1000 (!
b10 (#
b10000000000110001100101011 )!
b101011 )#
1*
b100 *!
b101 *#
b10000000000110001100101011 +"
b1 +#
b0 ,!
b100 ,"
b110 ,#
b0 -!
b101 -#
b0 .
b10000000000110001100101011 .!
b0 /
b100 /!
b10000000000110001100101011 /"
0/#
b11 0
b0 0!
b110 0#
b10 1
b0 1!
b100 1"
bx 1$
b0 4"
b0 5"
b1000 6$
b0 7"
b0 8!
b0 8"
b0 9!
1;
b10000000000110001100101011 ;"
0<!
b100 <"
b0 ="
b10010000101101001100101011 >!
b0 >"
1@!
b110 A!
b11 B!
b10 C!
0D"
b110 F"
b11 G!
b10 H!
b0 I"
b0 J"
1K!
b10010000101101001100101011 L"
1N"
1O"
b1000 Q
b110 Q"
b11 R"
bx S
b110 S!
b10 S"
b11 W"
b11 X!
b10 X"
b10 Y!
b101 Z!
b110 [!
b10010000101101001100101011 \"
b0 _!
bx _#
b1000 `
b0 `!
1`"
1a"
bx b
b110 d"
b11 e"
b10 f"
b11 j"
b10 k"
zn#
xo#
b11 r"
b10 s"
b101 t"
b110 u"
b110 v!
b11 v"
b1 w"
b1000 x!
b110 x"
b1111111111111111111111111111111111111111111111111111111111111010 y"
b0 |!
b111111111111111111111111111111 |"
b0 }!
b1111111111111111111111111111 }"
b101 ~"

#80000
0!
0;

#90000
1!
b0 "#
b11 #"
b0 ##
bx $
b10000000000110001100101011 %
b110 &!
1&#
b0 '#
b1100 (!
b0 (#
bx )!
0*
b1000 *!
b110 *#
b110 +
bx +"
b1000 ,"
b110 -
b0 -#
bx .!
b110 .#
b1000 /!
bx /"
1/#
b0 0
b0 1
b1000 1"
bx 1$
b110 2
02!
b0 3!
b1100 6$
1;
bx ;"
b1000 <"
b10000000000110001100101011 >!
b100 ?!
0?"
b0 @"
b0 B!
b0 C!
bx E"
bx F"
b0 G!
bx G"
b0 H!
bx H"
bx I"
bx J"
0K!
b10000000000110001100101011 L"
b100 M"
0O"
b1100 Q
b110 Q!
1R!
b0 R"
b0 S"
b0 W"
b0 X!
b0 X"
b0 Y!
b110 Z!
b10000000000110001100101011 \"
b100 ^"
b1100 `
0a"
b0 e"
b0 f"
b0 j"
b0 k"
b0 r"
b0 s"
b110 t"
b110 u!
b0 v!
b0 v"
b10 w"
b1100 x!
b0 x"
b0 y"
b11111111111111111111111111111111 |"
b11111111111111111111111111111111 }"
b0 ~"

#100000
0!
0;

#110000
1!
b100 #"
bx %
b0 '
b110 '!
b0 (
b10000 (!
bx )#
b1100 *!
bx *#
bx +#
b110 ,
b1100 ,"
bx ,#
b0 -
bx -#
b0 .#
b1100 /!
0/#
b0 0#
b1100 1"
bx 1$
b0 2
b10000 6$
b110 9
1;
b1100 <"
bx >!
b1000 ?!
0@!
b0 A!
bx L"
b1000 M"
0N"
b110 P"
b10000 Q
b0 Q!
b0 Q"
0R!
b0 S!
bx Z!
b0 [!
bx \"
b1000 ^"
b10000 `
0`"
b110 b"
b0 d"
bx t"
b0 u"
bx v"
bx w"
b10000 x!
bx {"
bx }"

#120000
0!
0;

#130000
1!
b101 #"
b10100 (!
b10000 *!
b10000 ,"
b10000 /!
b10000 1"
bx 1$
b10100 6$
1;
b10000 <"
b1100 ?!
b1100 M"
b10100 Q
b1100 ^"
b10100 `
b10100 x!

#140000
0!
0;

#150000
1!
b110 #"
b11000 (!
b10100 *!
b10100 ,"
b10100 /!
b10100 1"
bx 1$
b11000 6$
1;
b10100 <"
b10000 ?!
b10000 M"
b11000 Q
b10000 ^"
b11000 `
b11000 x!

#160000
0!
0;

#170000
1!
b111 #"
b11100 (!
b11000 *!
b11000 ,"
b11000 /!
b11000 1"
bx 1$
b11100 6$
1;
b11000 <"
b10100 ?!
b10100 M"
b11100 Q
b10100 ^"
b11100 `
b11100 x!

#180000
0!
0;

#190000
1!
b1000 #"
b100000 (!
b11100 *!
b11100 ,"
b11100 /!
b11100 1"
bx 1$
b100000 6$
1;
b11100 <"
b11000 ?!
b11000 M"
b100000 Q
b11000 ^"
b100000 `
b100000 x!

#200000
0!
0;

#210000
1!
b1001 #"
b100100 (!
b100000 *!
b100000 ,"
b100000 /!
b100000 1"
bx 1$
b100100 6$
1;
b100000 <"
b11100 ?!
b11100 M"
b100100 Q
b11100 ^"
b100100 `
b100100 x!

#220000
0!
0;

#230000
1!
b1010 #"
b101000 (!
b100100 *!
b100100 ,"
b100100 /!
b100100 1"
bx 1$
b101000 6$
1;
b100100 <"
b100000 ?!
b100000 M"
b101000 Q
b100000 ^"
b101000 `
b101000 x!

#240000
0!
0;

#250000
1!
b1011 #"
b101100 (!
b101000 *!
b101000 ,"
b101000 /!
b101000 1"
bx 1$
b101100 6$
1;
b101000 <"
b100100 ?!
b100100 M"
b101100 Q
b100100 ^"
b101100 `
b101100 x!

#260000
0!
0;

#270000
1!
b1100 #"
b110000 (!
b101100 *!
b101100 ,"
b101100 /!
b101100 1"
bx 1$
b110000 6$
1;
b101100 <"
b101000 ?!
b101000 M"
b110000 Q
b101000 ^"
b110000 `
b110000 x!

#280000
0!
0;

#290000
1!
b1101 #"
b110100 (!
b110000 *!
b110000 ,"
b110000 /!
b110000 1"
bx 1$
b110100 6$
1;
b110000 <"
b101100 ?!
b101100 M"
b110100 Q
b101100 ^"
b110100 `
b110100 x!

#300000
0!
0;

#310000
1!
b1110 #"
b111000 (!
b110100 *!
b110100 ,"
b110100 /!
b110100 1"
bx 1$
b111000 6$
1;
b110100 <"
b110000 ?!
b110000 M"
b111000 Q
b110000 ^"
b111000 `
b111000 x!

#320000
0!
0;

#330000
1!
b1111 #"
b111100 (!
b111000 *!
b111000 ,"
b111000 /!
b111000 1"
bx 1$
b111100 6$
1;
b111000 <"
b110100 ?!
b110100 M"
b111100 Q
b110100 ^"
b111100 `
b111100 x!

#340000
0!
0;

#350000
1!
b10000 #"
b1000000 (!
b111100 *!
b111100 ,"
b111100 /!
b111100 1"
bx 1$
b1000000 6$
1;
b111100 <"
b111000 ?!
b111000 M"
b1000000 Q
b111000 ^"
b1000000 `
b1000000 x!

#360000
0!
0;

#370000
1!
b10001 #"
b1000100 (!
b1000000 *!
b1000000 ,"
b1000000 /!
b1000000 1"
bx 1$
b1000100 6$
1;
b1000000 <"
b111100 ?!
b111100 M"
b1000100 Q
b111100 ^"
b1000100 `
b1000100 x!

#380000
0!
0;

#390000
1!
b10010 #"
b1001000 (!
b1000100 *!
b1000100 ,"
b1000100 /!
b1000100 1"
bx 1$
b1001000 6$
1;
b1000100 <"
b1000000 ?!
b1000000 M"
b1001000 Q
b1000000 ^"
b1001000 `
b1001000 x!

#400000
0!
0;

#410000
1!
b10011 #"
b1001100 (!
b1001000 *!
b1001000 ,"
b1001000 /!
b1001000 1"
bx 1$
b1001100 6$
1;
b1001000 <"
b1000100 ?!
b1000100 M"
b1001100 Q
b1000100 ^"
b1001100 `
b1001100 x!

#420000
0!
0;

#430000
1!
b10100 #"
b1010000 (!
b1001100 *!
b1001100 ,"
b1001100 /!
b1001100 1"
bx 1$
b1010000 6$
1;
b1001100 <"
b1001000 ?!
b1001000 M"
b1010000 Q
b1001000 ^"
b1010000 `
b1010000 x!

#440000
0!
0;

#450000
1!
b10101 #"
b1010100 (!
b1010000 *!
b1010000 ,"
b1010000 /!
b1010000 1"
bx 1$
b1010100 6$
1;
b1010000 <"
b1001100 ?!
b1001100 M"
b1010100 Q
b1001100 ^"
b1010100 `
b1010100 x!

#460000
0!
0;

#470000
1!
b10110 #"
b1011000 (!
b1010100 *!
b1010100 ,"
b1010100 /!
b1010100 1"
bx 1$
b1011000 6$
1;
b1010100 <"
b1010000 ?!
b1010000 M"
b1011000 Q
b1010000 ^"
b1011000 `
b1011000 x!

#480000
0!
0;

#490000
1!
b10111 #"
b1011100 (!
b1011000 *!
b1011000 ,"
b1011000 /!
b1011000 1"
bx 1$
b1011100 6$
1;
b1011000 <"
b1010100 ?!
b1010100 M"
b1011100 Q
b1010100 ^"
b1011100 `
b1011100 x!

#500000
0!
0;

#510000
1!
b11000 #"
b1100000 (!
b1011100 *!
b1011100 ,"
b1011100 /!
b1011100 1"
bx 1$
b1100000 6$
1;
b1011100 <"
b1011000 ?!
b1011000 M"
b1100000 Q
b1011000 ^"
b1100000 `
b1100000 x!

#520000
0!
0;

#530000
1!
b11001 #"
b1100100 (!
b1100000 *!
b1100000 ,"
b1100000 /!
b1100000 1"
bx 1$
b1100100 6$
1;
b1100000 <"
b1011100 ?!
b1011100 M"
b1100100 Q
b1011100 ^"
b1100100 `
b1100100 x!

#540000
0!
0;

#550000
1!
b11010 #"
b1101000 (!
b1100100 *!
b1100100 ,"
b1100100 /!
b1100100 1"
bx 1$
b1101000 6$
1;
b1100100 <"
b1100000 ?!
b1100000 M"
b1101000 Q
b1100000 ^"
b1101000 `
b1101000 x!

#560000
0!
0;

#570000
1!
b11011 #"
b1101100 (!
b1101000 *!
b1101000 ,"
b1101000 /!
b1101000 1"
bx 1$
b1101100 6$
1;
b1101000 <"
b1100100 ?!
b1100100 M"
b1101100 Q
b1100100 ^"
b1101100 `
b1101100 x!

#580000
0!
0;

#590000
1!
b11100 #"
b1110000 (!
b1101100 *!
b1101100 ,"
b1101100 /!
b1101100 1"
bx 1$
b1110000 6$
1;
b1101100 <"
b1101000 ?!
b1101000 M"
b1110000 Q
b1101000 ^"
b1110000 `
b1110000 x!

#600000
0!
0;

#610000
1!
b11101 #"
b1110100 (!
b1110000 *!
b1110000 ,"
b1110000 /!
b1110000 1"
bx 1$
b1110100 6$
1;
b1110000 <"
b1101100 ?!
b1101100 M"
b1110100 Q
b1101100 ^"
b1110100 `
b1110100 x!

#620000
0!
0;

#630000
1!
b11110 #"
b1111000 (!
b1110100 *!
b1110100 ,"
b1110100 /!
b1110100 1"
bx 1$
b1111000 6$
1;
b1110100 <"
b1110000 ?!
b1110000 M"
b1111000 Q
b1110000 ^"
b1111000 `
b1111000 x!

#640000
0!
0;

#650000
1!
b11111 #"
b1111100 (!
b1111000 *!
b1111000 ,"
b1111000 /!
b1111000 1"
bx 1$
b1111100 6$
1;
b1111000 <"
b1110100 ?!
b1110100 M"
b1111100 Q
b1110100 ^"
b1111100 `
b1111100 x!

#660000
0!
0;

#670000
1!
b100000 #"
b10000000 (!
b1111100 *!
b1111100 ,"
b1111100 /!
b1111100 1"
bx 1$
b10000000 6$
1;
b1111100 <"
b1111000 ?!
b1111000 M"
b10000000 Q
b1111000 ^"
b10000000 `
b10000000 x!

#680000
0!
0;

#690000
1!
b100001 #"
b10000100 (!
b10000000 *!
b10000000 ,"
b10000000 /!
b10000000 1"
bx 1$
b10000100 6$
1;
b10000000 <"
b1111100 ?!
b1111100 M"
b10000100 Q
b1111100 ^"
b10000100 `
b10000100 x!

#700000
0!
0;

#710000
1!
b100010 #"
b10001000 (!
b10000100 *!
b10000100 ,"
b10000100 /!
b10000100 1"
bx 1$
b10001000 6$
1;
b10000100 <"
b10000000 ?!
b10000000 M"
b10001000 Q
b10000000 ^"
b10001000 `
b10001000 x!

#720000
0!
0;

#730000
1!
b100011 #"
b10001100 (!
b10001000 *!
b10001000 ,"
b10001000 /!
b10001000 1"
bx 1$
b10001100 6$
1;
b10001000 <"
b10000100 ?!
b10000100 M"
b10001100 Q
b10000100 ^"
b10001100 `
b10001100 x!

#740000
0!
0;

#750000
1!
b100100 #"
b10010000 (!
b10001100 *!
b10001100 ,"
b10001100 /!
b10001100 1"
bx 1$
b10010000 6$
1;
b10001100 <"
b10001000 ?!
b10001000 M"
b10010000 Q
b10001000 ^"
b10010000 `
b10010000 x!

#760000
0!
0;

#770000
1!
b100101 #"
b10010100 (!
b10010000 *!
b10010000 ,"
b10010000 /!
b10010000 1"
bx 1$
b10010100 6$
1;
b10010000 <"
b10001100 ?!
b10001100 M"
b10010100 Q
b10001100 ^"
b10010100 `
b10010100 x!

#780000
0!
0;

#790000
1!
b100110 #"
b10011000 (!
b10010100 *!
b10010100 ,"
b10010100 /!
b10010100 1"
bx 1$
b10011000 6$
1;
b10010100 <"
b10010000 ?!
b10010000 M"
b10011000 Q
b10010000 ^"
b10011000 `
b10011000 x!

#800000
0!
0;

#810000
1!
b100111 #"
b10011100 (!
b10011000 *!
b10011000 ,"
b10011000 /!
b10011000 1"
bx 1$
b10011100 6$
1;
b10011000 <"
b10010100 ?!
b10010100 M"
b10011100 Q
b10010100 ^"
b10011100 `
b10011100 x!

#820000
0!
0;

#830000
1!
b101000 #"
b10100000 (!
b10011100 *!
b10011100 ,"
b10011100 /!
b10011100 1"
bx 1$
b10100000 6$
1;
b10011100 <"
b10011000 ?!
b10011000 M"
b10100000 Q
b10011000 ^"
b10100000 `
b10100000 x!

#840000
0!
0;

#850000
1!
b101001 #"
b10100100 (!
b10100000 *!
b10100000 ,"
b10100000 /!
b10100000 1"
bx 1$
b10100100 6$
1;
b10100000 <"
b10011100 ?!
b10011100 M"
b10100100 Q
b10011100 ^"
b10100100 `
b10100100 x!

#860000
0!
0;

#870000
1!
b101010 #"
b10101000 (!
b10100100 *!
b10100100 ,"
b10100100 /!
b10100100 1"
bx 1$
b10101000 6$
1;
b10100100 <"
b10100000 ?!
b10100000 M"
b10101000 Q
b10100000 ^"
b10101000 `
b10101000 x!

#880000
0!
0;

#890000
1!
b101011 #"
b10101100 (!
b10101000 *!
b10101000 ,"
b10101000 /!
b10101000 1"
bx 1$
b10101100 6$
1;
b10101000 <"
b10100100 ?!
b10100100 M"
b10101100 Q
b10100100 ^"
b10101100 `
b10101100 x!

#900000
0!
0;

#910000
1!
b101100 #"
b10110000 (!
b10101100 *!
b10101100 ,"
b10101100 /!
b10101100 1"
bx 1$
b10110000 6$
1;
b10101100 <"
b10101000 ?!
b10101000 M"
b10110000 Q
b10101000 ^"
b10110000 `
b10110000 x!

#920000
0!
0;

#930000
1!
b101101 #"
b10110100 (!
b10110000 *!
b10110000 ,"
b10110000 /!
b10110000 1"
bx 1$
b10110100 6$
1;
b10110000 <"
b10101100 ?!
b10101100 M"
b10110100 Q
b10101100 ^"
b10110100 `
b10110100 x!

#940000
0!
0;

#950000
1!
b101110 #"
b10111000 (!
b10110100 *!
b10110100 ,"
b10110100 /!
b10110100 1"
bx 1$
b10111000 6$
1;
b10110100 <"
b10110000 ?!
b10110000 M"
b10111000 Q
b10110000 ^"
b10111000 `
b10111000 x!

#960000
0!
0;

#970000
1!
b101111 #"
b10111100 (!
b10111000 *!
b10111000 ,"
b10111000 /!
b10111000 1"
bx 1$
b10111100 6$
1;
b10111000 <"
b10110100 ?!
b10110100 M"
b10111100 Q
b10110100 ^"
b10111100 `
b10111100 x!

#980000
0!
0;

#990000
1!
b110000 #"
b11000000 (!
b10111100 *!
b10111100 ,"
b10111100 /!
b10111100 1"
bx 1$
b11000000 6$
1;
b10111100 <"
b10111000 ?!
b10111000 M"
b11000000 Q
b10111000 ^"
b11000000 `
b11000000 x!
