$date
   Tue May 13 19:15:33 2025
$end

$version
  2024.1
  $dumpfile ("tinyriscv_soc_tb.vcd") 
$end

$timescale
  1ps
$end

$scope module tinyriscv_soc_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$var wire 32 # if_inst_i [31:0] $end
$var wire 32 $ if_inst_d [31:0] $end
$var wire 32 % ex_inst_o [31:0] $end
$var wire 1 & holdEnable $end
$var wire 32 ' ie_reg_add [31:0] $end
$var wire 32 ( ex_reg_add [31:0] $end
$var wire 1 ) mac_valid $end
$var wire 32 * mac_acc_out_o [31:0] $end
$var wire 32 + ie_acc [31:0] $end
$var wire 32 , ex_wdata [31:0] $end
$var wire 32 - id_r1 [31:0] $end
$var wire 32 . id_r2 [31:0] $end
$var wire 32 / ie_r1 [31:0] $end
$var wire 32 0 ie_r2 [31:0] $end
$var wire 32 1 ex_reg_data_o [31:0] $end
$var wire 32 2 x3 [31:0] $end
$var wire 32 3 x26 [31:0] $end
$var wire 32 4 x25 [31:0] $end
$var wire 32 5 x27 [31:0] $end
$var wire 32 6 x4 [31:0] $end
$var wire 32 7 x5 [31:0] $end
$var wire 32 8 x6 [31:0] $end
$var integer 32 9 r [31:0] $end
$scope module tinyriscv_soc_top_0 $end
$var wire 1 : clk $end
$var wire 1 ; rst $end
$var reg 1 < over $end
$var reg 1 = succ $end
$var wire 1 > halted_ind $end
$var wire 1 ? uart_debug_pin $end
$var wire 1 @ uart_tx_pin $end
$var wire 1 A uart_rx_pin $end
$var wire 2 B gpio [1:0] $end
$var wire 1 C jtag_TCK $end
$var wire 1 D jtag_TMS $end
$var wire 1 E jtag_TDI $end
$var wire 1 F jtag_TDO $end
$var wire 1 G spi_miso $end
$var wire 1 H spi_mosi $end
$var wire 1 I spi_ss $end
$var wire 1 J spi_clk $end
$var wire 32 K m0_addr_i [31:0] $end
$var wire 32 L m0_data_i [31:0] $end
$var wire 32 M m0_data_o [31:0] $end
$var wire 1 N m0_req_i $end
$var wire 1 O m0_we_i $end
$var wire 32 P m1_addr_i [31:0] $end
$var wire 32 Q m1_data_i [31:0] $end
$var wire 32 R m1_data_o [31:0] $end
$var wire 1 S m1_req_i $end
$var wire 1 T m1_we_i $end
$var wire 32 U m2_addr_i [31:0] $end
$var wire 32 V m2_data_i [31:0] $end
$var wire 32 W m2_data_o [31:0] $end
$var wire 1 X m2_req_i $end
$var wire 1 Y m2_we_i $end
$var wire 32 Z m3_addr_i [31:0] $end
$var wire 32 [ m3_data_i [31:0] $end
$var wire 32 \ m3_data_o [31:0] $end
$var wire 1 ] m3_req_i $end
$var wire 1 ^ m3_we_i $end
$var wire 32 _ s0_addr_o [31:0] $end
$var wire 32 ` s0_data_o [31:0] $end
$var wire 32 a s0_data_i [31:0] $end
$var wire 1 b s0_we_o $end
$var wire 32 c s1_addr_o [31:0] $end
$var wire 32 d s1_data_o [31:0] $end
$var wire 32 e s1_data_i [31:0] $end
$var wire 1 f s1_we_o $end
$var wire 32 g s2_addr_o [31:0] $end
$var wire 32 h s2_data_o [31:0] $end
$var wire 32 i s2_data_i [31:0] $end
$var wire 1 j s2_we_o $end
$var wire 32 k s3_addr_o [31:0] $end
$var wire 32 l s3_data_o [31:0] $end
$var wire 32 m s3_data_i [31:0] $end
$var wire 1 n s3_we_o $end
$var wire 32 o s4_addr_o [31:0] $end
$var wire 32 p s4_data_o [31:0] $end
$var wire 32 q s4_data_i [31:0] $end
$var wire 1 r s4_we_o $end
$var wire 32 s s5_addr_o [31:0] $end
$var wire 32 t s5_data_o [31:0] $end
$var wire 32 u s5_data_i [31:0] $end
$var wire 1 v s5_we_o $end
$var wire 1 w rib_hold_flag_o $end
$var wire 1 x jtag_halt_req_o $end
$var wire 1 y jtag_reset_req_o $end
$var wire 5 z jtag_reg_addr_o [4:0] $end
$var wire 32 { jtag_reg_data_o [31:0] $end
$var wire 1 | jtag_reg_we_o $end
$var wire 32 } jtag_reg_data_i [31:0] $end
$var wire 8 ~ int_flag [7:0] $end
$var wire 1 !! timer0_int $end
$var wire 2 "! io_in [1:0] $end
$var wire 32 #! gpio_ctrl [31:0] $end
$var wire 32 $! gpio_data [31:0] $end
$scope module u_tinyriscv $end
$var wire 1 : clk $end
$var wire 1 ; rst $end
$var wire 32 K rib_ex_addr_o [31:0] $end
$var wire 32 M rib_ex_data_i [31:0] $end
$var wire 32 L rib_ex_data_o [31:0] $end
$var wire 1 N rib_ex_req_o $end
$var wire 1 O rib_ex_we_o $end
$var wire 32 P rib_pc_addr_o [31:0] $end
$var wire 32 R rib_pc_data_i [31:0] $end
$var wire 5 z jtag_reg_addr_i [4:0] $end
$var wire 32 { jtag_reg_data_i [31:0] $end
$var wire 1 | jtag_reg_we_i $end
$var wire 32 } jtag_reg_data_o [31:0] $end
$var wire 1 w rib_hold_flag_i $end
$var wire 1 x jtag_halt_flag_i $end
$var wire 1 y jtag_reset_flag_i $end
$var wire 8 ~ int_i [7:0] $end
$var wire 32 %! mac_acc_out_o [31:0] $end
$var wire 32 &! ie_acc_out_o [31:0] $end
$var wire 32 '! pc_pc_o [31:0] $end
$var wire 32 (! if_inst_o [31:0] $end
$var wire 32 )! if_inst_addr_o [31:0] $end
$var wire 8 *! if_int_flag_o [7:0] $end
$var wire 5 +! id_reg1_raddr_o [4:0] $end
$var wire 5 ,! id_reg2_raddr_o [4:0] $end
$var wire 32 -! id_inst_o [31:0] $end
$var wire 32 .! id_inst_addr_o [31:0] $end
$var wire 32 /! id_reg1_rdata_o [31:0] $end
$var wire 32 0! id_reg2_rdata_o [31:0] $end
$var wire 1 1! id_reg_we_o $end
$var wire 5 2! id_reg_waddr_o [4:0] $end
$var wire 32 3! id_csr_raddr_o [31:0] $end
$var wire 1 4! id_csr_we_o $end
$var wire 32 5! id_csr_rdata_o [31:0] $end
$var wire 32 6! id_csr_waddr_o [31:0] $end
$var wire 32 7! id_op1_o [31:0] $end
$var wire 32 8! id_op2_o [31:0] $end
$var wire 32 9! id_op1_jump_o [31:0] $end
$var wire 32 :! id_op2_jump_o [31:0] $end
$var wire 1 ;! id_is_mac_o $end
$var wire 32 <! mac_done [31:0] $end
$var wire 32 =! ie_inst_o [31:0] $end
$var wire 32 >! ie_inst_addr_o [31:0] $end
$var wire 1 ?! ie_reg_we_o $end
$var wire 5 @! ie_reg_waddr_o [4:0] $end
$var wire 32 A! ie_reg1_rdata_o [31:0] $end
$var wire 32 B! ie_reg2_rdata_o [31:0] $end
$var wire 1 C! ie_csr_we_o $end
$var wire 32 D! ie_csr_waddr_o [31:0] $end
$var wire 32 E! ie_csr_rdata_o [31:0] $end
$var wire 32 F! ie_op1_o [31:0] $end
$var wire 32 G! ie_op2_o [31:0] $end
$var wire 32 H! ie_op1_jump_o [31:0] $end
$var wire 32 I! ie_op2_jump_o [31:0] $end
$var wire 1 J! ie_is_mac_o $end
$var wire 32 K! ex_mem_wdata_o [31:0] $end
$var wire 32 L! ex_mem_raddr_o [31:0] $end
$var wire 32 M! ex_mem_waddr_o [31:0] $end
$var wire 1 N! ex_mem_we_o $end
$var wire 1 O! ex_mem_req_o $end
$var wire 32 P! ex_reg_wdata_o [31:0] $end
$var wire 1 Q! ex_reg_we_o $end
$var wire 5 R! ex_reg_waddr_o [4:0] $end
$var wire 1 S! ex_hold_flag_o $end
$var wire 1 T! ex_jump_flag_o $end
$var wire 32 U! ex_jump_addr_o [31:0] $end
$var wire 1 V! ex_div_start_o $end
$var wire 32 W! ex_div_dividend_o [31:0] $end
$var wire 32 X! ex_div_divisor_o [31:0] $end
$var wire 3 Y! ex_div_op_o [2:0] $end
$var wire 5 Z! ex_div_reg_waddr_o [4:0] $end
$var wire 32 [! ex_csr_wdata_o [31:0] $end
$var wire 1 \! ex_csr_we_o $end
$var wire 32 ]! ex_csr_waddr_o [31:0] $end
$var wire 32 ^! regs_rdata1_o [31:0] $end
$var wire 32 _! regs_rdata2_o [31:0] $end
$var wire 32 `! csr_data_o [31:0] $end
$var wire 32 a! csr_clint_data_o [31:0] $end
$var wire 1 b! csr_global_int_en_o $end
$var wire 32 c! csr_clint_csr_mtvec [31:0] $end
$var wire 32 d! csr_clint_csr_mepc [31:0] $end
$var wire 32 e! csr_clint_csr_mstatus [31:0] $end
$var wire 3 f! ctrl_hold_flag_o [2:0] $end
$var wire 1 g! ctrl_jump_flag_o $end
$var wire 32 h! ctrl_jump_addr_o [31:0] $end
$var wire 32 i! div_result_o [31:0] $end
$var wire 1 j! div_ready_o $end
$var wire 1 k! div_busy_o $end
$var wire 5 l! div_reg_waddr_o [4:0] $end
$var wire 1 m! clint_we_o $end
$var wire 32 n! clint_waddr_o [31:0] $end
$var wire 32 o! clint_raddr_o [31:0] $end
$var wire 32 p! clint_data_o [31:0] $end
$var wire 32 q! clint_int_addr_o [31:0] $end
$var wire 1 r! clint_int_assert_o $end
$var wire 1 s! clint_hold_flag_o $end
$scope module u_mac $end
$var wire 1 : clk $end
$var wire 1 ; acc_rst $end
$var wire 1 J! valid $end
$var wire 32 A! a [31:0] $end
$var wire 32 B! b [31:0] $end
$var reg 32 t! acc [31:0] $end
$var wire 33 u! product [32:0] $end
$upscope $end
$scope module u_pc_reg $end
$var wire 1 : clk $end
$var wire 1 ; rst $end
$var wire 1 g! jump_flag_i $end
$var wire 32 h! jump_addr_i [31:0] $end
$var wire 3 f! hold_flag_i [2:0] $end
$var wire 1 y jtag_reset_flag_i $end
$var reg 32 v! pc_o [31:0] $end
$upscope $end
$scope module u_ctrl $end
$var wire 1 ; rst $end
$var wire 1 T! jump_flag_i $end
$var wire 32 U! jump_addr_i [31:0] $end
$var wire 1 S! hold_flag_ex_i $end
$var wire 1 w hold_flag_rib_i $end
$var wire 1 x jtag_halt_flag_i $end
$var wire 1 s! hold_flag_clint_i $end
$var reg 3 w! hold_flag_o [2:0] $end
$var reg 1 x! jump_flag_o $end
$var reg 32 y! jump_addr_o [31:0] $end
$upscope $end
$scope module u_regs $end
$var wire 1 : clk $end
$var wire 1 ; rst $end
$var wire 1 Q! we_i $end
$var wire 5 R! waddr_i [4:0] $end
$var wire 32 P! wdata_i [31:0] $end
$var wire 1 | jtag_we_i $end
$var wire 5 z jtag_addr_i [4:0] $end
$var wire 32 { jtag_data_i [31:0] $end
$var wire 5 +! raddr1_i [4:0] $end
$var reg 32 z! rdata1_o [31:0] $end
$var wire 5 ,! raddr2_i [4:0] $end
$var reg 32 {! rdata2_o [31:0] $end
$var reg 32 |! jtag_data_o [31:0] $end
$upscope $end
$scope module u_csr_reg $end
$var wire 1 : clk $end
$var wire 1 ; rst $end
$var wire 1 \! we_i $end
$var wire 32 3! raddr_i [31:0] $end
$var wire 32 ]! waddr_i [31:0] $end
$var wire 32 [! data_i [31:0] $end
$var wire 1 m! clint_we_i $end
$var wire 32 o! clint_raddr_i [31:0] $end
$var wire 32 n! clint_waddr_i [31:0] $end
$var wire 32 p! clint_data_i [31:0] $end
$var wire 1 b! global_int_en_o $end
$var reg 32 }! clint_data_o [31:0] $end
$var wire 32 c! clint_csr_mtvec [31:0] $end
$var wire 32 d! clint_csr_mepc [31:0] $end
$var wire 32 e! clint_csr_mstatus [31:0] $end
$var reg 32 ~! data_o [31:0] $end
$var reg 64 !" cycle [63:0] $end
$var reg 32 "" mtvec [31:0] $end
$var reg 32 #" mcause [31:0] $end
$var reg 32 $" mepc [31:0] $end
$var reg 32 %" mie [31:0] $end
$var reg 32 &" mstatus [31:0] $end
$var reg 32 '" mscratch [31:0] $end
$upscope $end
$scope module u_if_id $end
$var wire 1 : clk $end
$var wire 1 ; rst $end
$var wire 32 R inst_i [31:0] $end
$var wire 32 '! inst_addr_i [31:0] $end
$var wire 3 f! hold_flag_i [2:0] $end
$var wire 8 ~ int_flag_i [7:0] $end
$var wire 8 *! int_flag_o [7:0] $end
$var wire 32 (! inst_o [31:0] $end
$var wire 32 )! inst_addr_o [31:0] $end
$var wire 1 (" hold_en $end
$var wire 32 )" inst [31:0] $end
$var wire 32 *" inst_addr [31:0] $end
$var wire 8 +" int_flag [7:0] $end
$scope module inst_ff $end
$var wire 1 : clk $end
$var wire 1 ; rst $end
$var wire 1 (" hold_en $end
$var wire 32 ," def_val [31:0] $end
$var wire 32 R din [31:0] $end
$var wire 32 )" qout [31:0] $end
$var reg 32 -" qout_r [31:0] $end
$upscope $end
$scope module inst_addr_ff $end
$var wire 1 : clk $end
$var wire 1 ; rst $end
$var wire 1 (" hold_en $end
$var wire 32 ." def_val [31:0] $end
$var wire 32 '! din [31:0] $end
$var wire 32 *" qout [31:0] $end
$var reg 32 /" qout_r [31:0] $end
$upscope $end
$scope module int_ff $end
$var wire 1 : clk $end
$var wire 1 ; rst $end
$var wire 1 (" hold_en $end
$var wire 8 0" def_val [7:0] $end
$var wire 8 ~ din [7:0] $end
$var wire 8 +" qout [7:0] $end
$var reg 8 1" qout_r [7:0] $end
$upscope $end
$upscope $end
$scope module u_id $end
$var wire 1 ; rst $end
$var wire 32 (! inst_i [31:0] $end
$var wire 32 )! inst_addr_i [31:0] $end
$var wire 32 ^! reg1_rdata_i [31:0] $end
$var wire 32 _! reg2_rdata_i [31:0] $end
$var wire 32 `! csr_rdata_i [31:0] $end
$var wire 1 T! ex_jump_flag_i $end
$var reg 5 2" reg1_raddr_o [4:0] $end
$var reg 5 3" reg2_raddr_o [4:0] $end
$var reg 32 4" csr_raddr_o [31:0] $end
$var reg 32 5" op1_o [31:0] $end
$var reg 32 6" op2_o [31:0] $end
$var reg 32 7" op1_jump_o [31:0] $end
$var reg 32 8" op2_jump_o [31:0] $end
$var reg 32 9" inst_o [31:0] $end
$var reg 32 :" inst_addr_o [31:0] $end
$var reg 32 ;" reg1_rdata_o [31:0] $end
$var reg 32 <" reg2_rdata_o [31:0] $end
$var reg 1 =" reg_we_o $end
$var reg 5 >" reg_waddr_o [4:0] $end
$var reg 1 ?" csr_we_o $end
$var reg 32 @" csr_rdata_o [31:0] $end
$var reg 32 A" csr_waddr_o [31:0] $end
$var reg 1 B" is_mac_o $end
$var wire 7 C" opcode [6:0] $end
$var wire 3 D" funct3 [2:0] $end
$var wire 7 E" funct7 [6:0] $end
$var wire 5 F" rd [4:0] $end
$var wire 5 G" rs1 [4:0] $end
$var wire 5 H" rs2 [4:0] $end
$upscope $end
$scope module u_id_ex $end
$var wire 1 : clk $end
$var wire 1 ; rst $end
$var wire 32 -! inst_i [31:0] $end
$var wire 32 .! inst_addr_i [31:0] $end
$var wire 1 1! reg_we_i $end
$var wire 5 2! reg_waddr_i [4:0] $end
$var wire 32 /! reg1_rdata_i [31:0] $end
$var wire 32 0! reg2_rdata_i [31:0] $end
$var wire 1 4! csr_we_i $end
$var wire 32 6! csr_waddr_i [31:0] $end
$var wire 32 5! csr_rdata_i [31:0] $end
$var wire 32 7! op1_i [31:0] $end
$var wire 32 8! op2_i [31:0] $end
$var wire 32 9! op1_jump_i [31:0] $end
$var wire 32 :! op2_jump_i [31:0] $end
$var wire 1 ;! is_mac_i $end
$var wire 32 %! acc_out_i [31:0] $end
$var wire 3 f! hold_flag_i [2:0] $end
$var wire 1 J! is_mac_o $end
$var wire 32 &! acc_out_o [31:0] $end
$var wire 32 F! op1_o [31:0] $end
$var wire 32 G! op2_o [31:0] $end
$var wire 32 H! op1_jump_o [31:0] $end
$var wire 32 I! op2_jump_o [31:0] $end
$var wire 32 =! inst_o [31:0] $end
$var wire 32 >! inst_addr_o [31:0] $end
$var wire 1 ?! reg_we_o $end
$var wire 5 @! reg_waddr_o [4:0] $end
$var wire 32 A! reg1_rdata_o [31:0] $end
$var wire 32 B! reg2_rdata_o [31:0] $end
$var wire 1 C! csr_we_o $end
$var wire 32 D! csr_waddr_o [31:0] $end
$var wire 32 E! csr_rdata_o [31:0] $end
$var wire 1 I" hold_en $end
$var wire 32 J" inst [31:0] $end
$var wire 32 K" inst_addr [31:0] $end
$var wire 1 L" reg_we $end
$var wire 1 M" is_mac $end
$var wire 32 N" acc_out [31:0] $end
$var wire 5 O" reg_waddr [4:0] $end
$var wire 32 P" reg1_rdata [31:0] $end
$var wire 32 Q" reg2_rdata [31:0] $end
$var wire 1 R" csr_we $end
$var wire 32 S" csr_waddr [31:0] $end
$var wire 32 T" csr_rdata [31:0] $end
$var wire 32 U" op1 [31:0] $end
$var wire 32 V" op2 [31:0] $end
$var wire 32 W" op1_jump [31:0] $end
$var wire 32 X" op2_jump [31:0] $end
$scope module inst_ff $end
$var wire 1 : clk $end
$var wire 1 ; rst $end
$var wire 1 I" hold_en $end
$var wire 32 Y" def_val [31:0] $end
$var wire 32 -! din [31:0] $end
$var wire 32 J" qout [31:0] $end
$var reg 32 Z" qout_r [31:0] $end
$upscope $end
$scope module inst_addr_ff $end
$var wire 1 : clk $end
$var wire 1 ; rst $end
$var wire 1 I" hold_en $end
$var wire 32 [" def_val [31:0] $end
$var wire 32 .! din [31:0] $end
$var wire 32 K" qout [31:0] $end
$var reg 32 \" qout_r [31:0] $end
$upscope $end
$scope module reg_we_ff $end
$var wire 1 : clk $end
$var wire 1 ; rst $end
$var wire 1 I" hold_en $end
$var wire 1 ]" def_val [0:0] $end
$var wire 1 1! din [0:0] $end
$var wire 1 L" qout [0:0] $end
$var reg 1 ^" qout_r [0:0] $end
$upscope $end
$scope module is_mac_ff $end
$var wire 1 : clk $end
$var wire 1 ; rst $end
$var wire 1 I" hold_en $end
$var wire 1 ]" def_val [0:0] $end
$var wire 1 ;! din [0:0] $end
$var wire 1 M" qout [0:0] $end
$var reg 1 _" qout_r [0:0] $end
$upscope $end
$scope module acc_out_ff $end
$var wire 1 : clk $end
$var wire 1 ; rst $end
$var wire 1 I" hold_en $end
$var wire 32 [" def_val [31:0] $end
$var wire 32 %! din [31:0] $end
$var wire 32 N" qout [31:0] $end
$var reg 32 `" qout_r [31:0] $end
$upscope $end
$scope module reg_waddr_ff $end
$var wire 1 : clk $end
$var wire 1 ; rst $end
$var wire 1 I" hold_en $end
$var wire 5 a" def_val [4:0] $end
$var wire 5 2! din [4:0] $end
$var wire 5 O" qout [4:0] $end
$var reg 5 b" qout_r [4:0] $end
$upscope $end
$scope module reg1_rdata_ff $end
$var wire 1 : clk $end
$var wire 1 ; rst $end
$var wire 1 I" hold_en $end
$var wire 32 [" def_val [31:0] $end
$var wire 32 /! din [31:0] $end
$var wire 32 P" qout [31:0] $end
$var reg 32 c" qout_r [31:0] $end
$upscope $end
$scope module reg2_rdata_ff $end
$var wire 1 : clk $end
$var wire 1 ; rst $end
$var wire 1 I" hold_en $end
$var wire 32 [" def_val [31:0] $end
$var wire 32 0! din [31:0] $end
$var wire 32 Q" qout [31:0] $end
$var reg 32 d" qout_r [31:0] $end
$upscope $end
$scope module csr_we_ff $end
$var wire 1 : clk $end
$var wire 1 ; rst $end
$var wire 1 I" hold_en $end
$var wire 1 ]" def_val [0:0] $end
$var wire 1 4! din [0:0] $end
$var wire 1 R" qout [0:0] $end
$var reg 1 e" qout_r [0:0] $end
$upscope $end
$scope module csr_waddr_ff $end
$var wire 1 : clk $end
$var wire 1 ; rst $end
$var wire 1 I" hold_en $end
$var wire 32 [" def_val [31:0] $end
$var wire 32 6! din [31:0] $end
$var wire 32 S" qout [31:0] $end
$var reg 32 f" qout_r [31:0] $end
$upscope $end
$scope module csr_rdata_ff $end
$var wire 1 : clk $end
$var wire 1 ; rst $end
$var wire 1 I" hold_en $end
$var wire 32 [" def_val [31:0] $end
$var wire 32 5! din [31:0] $end
$var wire 32 T" qout [31:0] $end
$var reg 32 g" qout_r [31:0] $end
$upscope $end
$scope module op1_ff $end
$var wire 1 : clk $end
$var wire 1 ; rst $end
$var wire 1 I" hold_en $end
$var wire 32 [" def_val [31:0] $end
$var wire 32 7! din [31:0] $end
$var wire 32 U" qout [31:0] $end
$var reg 32 h" qout_r [31:0] $end
$upscope $end
$scope module op2_ff $end
$var wire 1 : clk $end
$var wire 1 ; rst $end
$var wire 1 I" hold_en $end
$var wire 32 [" def_val [31:0] $end
$var wire 32 8! din [31:0] $end
$var wire 32 V" qout [31:0] $end
$var reg 32 i" qout_r [31:0] $end
$upscope $end
$scope module op1_jump_ff $end
$var wire 1 : clk $end
$var wire 1 ; rst $end
$var wire 1 I" hold_en $end
$var wire 32 [" def_val [31:0] $end
$var wire 32 9! din [31:0] $end
$var wire 32 W" qout [31:0] $end
$var reg 32 j" qout_r [31:0] $end
$upscope $end
$scope module op2_jump_ff $end
$var wire 1 : clk $end
$var wire 1 ; rst $end
$var wire 1 I" hold_en $end
$var wire 32 [" def_val [31:0] $end
$var wire 32 :! din [31:0] $end
$var wire 32 X" qout [31:0] $end
$var reg 32 k" qout_r [31:0] $end
$upscope $end
$upscope $end
$scope module u_ex $end
$var wire 1 ; rst $end
$var wire 1 J! is_mac_i $end
$var wire 32 =! inst_i [31:0] $end
$var wire 32 >! inst_addr_i [31:0] $end
$var wire 1 ?! reg_we_i $end
$var wire 5 @! reg_waddr_i [4:0] $end
$var wire 32 A! reg1_rdata_i [31:0] $end
$var wire 32 B! reg2_rdata_i [31:0] $end
$var wire 1 C! csr_we_i $end
$var wire 32 D! csr_waddr_i [31:0] $end
$var wire 32 E! csr_rdata_i [31:0] $end
$var wire 1 r! int_assert_i $end
$var wire 32 q! int_addr_i [31:0] $end
$var wire 32 F! op1_i [31:0] $end
$var wire 32 G! op2_i [31:0] $end
$var wire 32 H! op1_jump_i [31:0] $end
$var wire 32 I! op2_jump_i [31:0] $end
$var wire 32 %! acc_out [31:0] $end
$var wire 32 M mem_rdata_i [31:0] $end
$var wire 1 j! div_ready_i $end
$var wire 32 i! div_result_i [31:0] $end
$var wire 1 k! div_busy_i $end
$var wire 5 l! div_reg_waddr_i [4:0] $end
$var reg 32 l" mem_wdata_o [31:0] $end
$var reg 32 m" mem_raddr_o [31:0] $end
$var reg 32 n" mem_waddr_o [31:0] $end
$var wire 1 N! mem_we_o $end
$var wire 1 O! mem_req_o $end
$var wire 32 P! reg_wdata_o [31:0] $end
$var wire 1 Q! reg_we_o $end
$var wire 5 R! reg_waddr_o [4:0] $end
$var reg 32 o" csr_wdata_o [31:0] $end
$var wire 1 \! csr_we_o $end
$var wire 32 ]! csr_waddr_o [31:0] $end
$var wire 1 V! div_start_o $end
$var reg 32 p" div_dividend_o [31:0] $end
$var reg 32 q" div_divisor_o [31:0] $end
$var reg 3 r" div_op_o [2:0] $end
$var reg 5 s" div_reg_waddr_o [4:0] $end
$var wire 1 S! hold_flag_o $end
$var wire 1 T! jump_flag_o $end
$var wire 32 U! jump_addr_o [31:0] $end
$var wire 2 t" mem_raddr_index [1:0] $end
$var wire 2 u" mem_waddr_index [1:0] $end
$var wire 64 v" mul_temp [63:0] $end
$var wire 64 w" mul_temp_invert [63:0] $end
$var wire 32 x" sr_shift [31:0] $end
$var wire 32 y" sri_shift [31:0] $end
$var wire 32 z" sr_shift_mask [31:0] $end
$var wire 32 {" sri_shift_mask [31:0] $end
$var wire 32 |" op1_add_op2_res [31:0] $end
$var wire 32 }" op1_jump_add_op2_jump_res [31:0] $end
$var wire 32 ~" reg1_data_invert [31:0] $end
$var wire 32 !# reg2_data_invert [31:0] $end
$var wire 1 "# op1_ge_op2_signed $end
$var wire 1 ## op1_ge_op2_unsigned $end
$var wire 1 $# op1_eq_op2 $end
$var reg 32 %# mul_op1 [31:0] $end
$var reg 32 &# mul_op2 [31:0] $end
$var wire 7 '# opcode [6:0] $end
$var wire 3 (# funct3 [2:0] $end
$var wire 7 )# funct7 [6:0] $end
$var wire 5 *# rd [4:0] $end
$var wire 5 +# uimm [4:0] $end
$var reg 32 ,# reg_wdata [31:0] $end
$var reg 1 -# reg_we $end
$var reg 5 .# reg_waddr [4:0] $end
$var reg 32 /# div_wdata [31:0] $end
$var reg 1 0# div_we $end
$var reg 5 1# div_waddr [4:0] $end
$var reg 1 2# div_hold_flag $end
$var reg 1 3# div_jump_flag $end
$var reg 32 4# div_jump_addr [31:0] $end
$var reg 1 5# hold_flag $end
$var reg 1 6# jump_flag $end
$var reg 32 7# jump_addr [31:0] $end
$var reg 1 8# mem_we $end
$var reg 1 9# mem_req $end
$var reg 1 :# div_start $end
$var wire 1 ;# valid_mac $end
$upscope $end
$scope module u_div $end
$var wire 1 : clk $end
$var wire 1 ; rst $end
$var wire 32 W! dividend_i [31:0] $end
$var wire 32 X! divisor_i [31:0] $end
$var wire 1 V! start_i $end
$var wire 3 Y! op_i [2:0] $end
$var wire 5 Z! reg_waddr_i [4:0] $end
$var reg 32 <# result_o [31:0] $end
$var reg 1 =# ready_o $end
$var reg 1 ># busy_o $end
$var reg 5 ?# reg_waddr_o [4:0] $end
$var reg 32 @# dividend_r [31:0] $end
$var reg 32 A# divisor_r [31:0] $end
$var reg 3 B# op_r [2:0] $end
$var reg 4 C# state [3:0] $end
$var reg 32 D# count [31:0] $end
$var reg 32 E# div_result [31:0] $end
$var reg 32 F# div_remain [31:0] $end
$var reg 32 G# minuend [31:0] $end
$var reg 1 H# invert_result $end
$var wire 1 I# op_div $end
$var wire 1 J# op_divu $end
$var wire 1 K# op_rem $end
$var wire 1 L# op_remu $end
$var wire 32 M# dividend_invert [31:0] $end
$var wire 32 N# divisor_invert [31:0] $end
$var wire 1 O# minuend_ge_divisor $end
$var wire 32 P# minuend_sub_res [31:0] $end
$var wire 32 Q# div_result_tmp [31:0] $end
$var wire 32 R# minuend_tmp [31:0] $end
$upscope $end
$scope module u_clint $end
$var wire 1 : clk $end
$var wire 1 ; rst $end
$var wire 8 *! int_flag_i [7:0] $end
$var wire 32 -! inst_i [31:0] $end
$var wire 32 .! inst_addr_i [31:0] $end
$var wire 1 T! jump_flag_i $end
$var wire 32 U! jump_addr_i [31:0] $end
$var wire 1 V! div_started_i $end
$var wire 3 f! hold_flag_i [2:0] $end
$var wire 32 a! data_i [31:0] $end
$var wire 32 c! csr_mtvec [31:0] $end
$var wire 32 d! csr_mepc [31:0] $end
$var wire 32 e! csr_mstatus [31:0] $end
$var wire 1 b! global_int_en_i $end
$var wire 1 s! hold_flag_o $end
$var reg 1 S# we_o $end
$var reg 32 T# waddr_o [31:0] $end
$var reg 32 U# raddr_o [31:0] $end
$var reg 32 V# data_o [31:0] $end
$var reg 32 W# int_addr_o [31:0] $end
$var reg 1 X# int_assert_o $end
$var reg 4 Y# int_state [3:0] $end
$var reg 5 Z# csr_state [4:0] $end
$var reg 32 [# inst_addr [31:0] $end
$var reg 32 \# cause [31:0] $end
$upscope $end
$upscope $end
$scope module u_rom $end
$var wire 1 : clk $end
$var wire 1 ; rst $end
$var wire 1 b we_i $end
$var wire 32 _ addr_i [31:0] $end
$var wire 32 ` data_i [31:0] $end
$var reg 32 ]# data_o [31:0] $end
$upscope $end
$scope module u_ram $end
$var wire 1 : clk $end
$var wire 1 ; rst $end
$var wire 1 f we_i $end
$var wire 32 c addr_i [31:0] $end
$var wire 32 d data_i [31:0] $end
$var reg 32 ^# data_o [31:0] $end
$upscope $end
$scope module timer_0 $end
$var wire 1 : clk $end
$var wire 1 ; rst $end
$var wire 32 h data_i [31:0] $end
$var wire 32 g addr_i [31:0] $end
$var wire 1 j we_i $end
$var reg 32 _# data_o [31:0] $end
$var wire 1 !! int_sig_o $end
$var reg 32 `# timer_ctrl [31:0] $end
$var reg 32 a# timer_count [31:0] $end
$var reg 32 b# timer_value [31:0] $end
$upscope $end
$scope module uart_0 $end
$var wire 1 : clk $end
$var wire 1 ; rst $end
$var wire 1 n we_i $end
$var wire 32 k addr_i [31:0] $end
$var wire 32 l data_i [31:0] $end
$var reg 32 c# data_o [31:0] $end
$var wire 1 @ tx_pin $end
$var wire 1 A rx_pin $end
$var reg 1 d# tx_data_valid $end
$var reg 1 e# tx_data_ready $end
$var reg 4 f# state [3:0] $end
$var reg 16 g# cycle_cnt [15:0] $end
$var reg 4 h# bit_cnt [3:0] $end
$var reg 8 i# tx_data [7:0] $end
$var reg 1 j# tx_reg $end
$var reg 1 k# rx_q0 $end
$var reg 1 l# rx_q1 $end
$var wire 1 m# rx_negedge $end
$var reg 1 n# rx_start $end
$var reg 4 o# rx_clk_edge_cnt [3:0] $end
$var reg 1 p# rx_clk_edge_level $end
$var reg 1 q# rx_done $end
$var reg 16 r# rx_clk_cnt [15:0] $end
$var reg 16 s# rx_div_cnt [15:0] $end
$var reg 8 t# rx_data [7:0] $end
$var reg 1 u# rx_over $end
$var reg 32 v# uart_ctrl [31:0] $end
$var reg 32 w# uart_status [31:0] $end
$var reg 32 x# uart_baud [31:0] $end
$var reg 32 y# uart_rx [31:0] $end
$upscope $end
$scope module gpio_0 $end
$var wire 1 : clk $end
$var wire 1 ; rst $end
$var wire 1 r we_i $end
$var wire 32 o addr_i [31:0] $end
$var wire 32 p data_i [31:0] $end
$var reg 32 z# data_o [31:0] $end
$var wire 2 "! io_pin_i [1:0] $end
$var wire 32 #! reg_ctrl [31:0] $end
$var wire 32 $! reg_data [31:0] $end
$var reg 32 {# gpio_ctrl [31:0] $end
$var reg 32 |# gpio_data [31:0] $end
$upscope $end
$scope module spi_0 $end
$var wire 1 : clk $end
$var wire 1 ; rst $end
$var wire 32 t data_i [31:0] $end
$var wire 32 s addr_i [31:0] $end
$var wire 1 v we_i $end
$var reg 32 }# data_o [31:0] $end
$var reg 1 ~# spi_mosi $end
$var wire 1 G spi_miso $end
$var wire 1 I spi_ss $end
$var reg 1 !$ spi_clk $end
$var reg 32 "$ spi_ctrl [31:0] $end
$var reg 32 #$ spi_data [31:0] $end
$var reg 32 $$ spi_status [31:0] $end
$var reg 9 %$ clk_cnt [8:0] $end
$var reg 1 &$ en $end
$var reg 5 '$ spi_clk_edge_cnt [4:0] $end
$var reg 1 ($ spi_clk_edge_level $end
$var reg 8 )$ rdata [7:0] $end
$var reg 1 *$ done $end
$var reg 4 +$ bit_index [3:0] $end
$var wire 9 ,$ div_cnt [8:0] $end
$upscope $end
$scope module u_rib $end
$var wire 1 : clk $end
$var wire 1 ; rst $end
$var wire 32 K m0_addr_i [31:0] $end
$var wire 32 L m0_data_i [31:0] $end
$var reg 32 -$ m0_data_o [31:0] $end
$var wire 1 N m0_req_i $end
$var wire 1 O m0_we_i $end
$var wire 32 P m1_addr_i [31:0] $end
$var wire 32 .$ m1_data_i [31:0] $end
$var reg 32 /$ m1_data_o [31:0] $end
$var wire 1 0$ m1_req_i $end
$var wire 1 1$ m1_we_i $end
$var wire 32 U m2_addr_i [31:0] $end
$var wire 32 V m2_data_i [31:0] $end
$var reg 32 2$ m2_data_o [31:0] $end
$var wire 1 X m2_req_i $end
$var wire 1 Y m2_we_i $end
$var wire 32 Z m3_addr_i [31:0] $end
$var wire 32 [ m3_data_i [31:0] $end
$var reg 32 3$ m3_data_o [31:0] $end
$var wire 1 ] m3_req_i $end
$var wire 1 ^ m3_we_i $end
$var reg 32 4$ s0_addr_o [31:0] $end
$var reg 32 5$ s0_data_o [31:0] $end
$var wire 32 a s0_data_i [31:0] $end
$var reg 1 6$ s0_we_o $end
$var reg 32 7$ s1_addr_o [31:0] $end
$var reg 32 8$ s1_data_o [31:0] $end
$var wire 32 e s1_data_i [31:0] $end
$var reg 1 9$ s1_we_o $end
$var reg 32 :$ s2_addr_o [31:0] $end
$var reg 32 ;$ s2_data_o [31:0] $end
$var wire 32 i s2_data_i [31:0] $end
$var reg 1 <$ s2_we_o $end
$var reg 32 =$ s3_addr_o [31:0] $end
$var reg 32 >$ s3_data_o [31:0] $end
$var wire 32 m s3_data_i [31:0] $end
$var reg 1 ?$ s3_we_o $end
$var reg 32 @$ s4_addr_o [31:0] $end
$var reg 32 A$ s4_data_o [31:0] $end
$var wire 32 q s4_data_i [31:0] $end
$var reg 1 B$ s4_we_o $end
$var reg 32 C$ s5_addr_o [31:0] $end
$var reg 32 D$ s5_data_o [31:0] $end
$var wire 32 u s5_data_i [31:0] $end
$var reg 1 E$ s5_we_o $end
$var reg 1 F$ hold_flag_o $end
$var wire 4 G$ req [3:0] $end
$var reg 2 H$ grant [1:0] $end
$upscope $end
$scope module u_uart_debug $end
$var wire 1 : clk $end
$var wire 1 ; rst $end
$var wire 1 ? debug_en_i $end
$var wire 1 ] req_o $end
$var reg 1 I$ mem_we_o $end
$var reg 32 J$ mem_addr_o [31:0] $end
$var reg 32 K$ mem_wdata_o [31:0] $end
$var wire 32 \ mem_rdata_i [31:0] $end
$var reg 14 L$ state [13:0] $end
$var reg 8 M$ rec_bytes_index [7:0] $end
$var reg 8 N$ need_to_rec_bytes [7:0] $end
$var reg 16 O$ remain_packet_count [15:0] $end
$var reg 32 P$ fw_file_size [31:0] $end
$var reg 32 Q$ write_mem_addr [31:0] $end
$var reg 32 R$ write_mem_data [31:0] $end
$var reg 8 S$ write_mem_byte_index0 [7:0] $end
$var reg 8 T$ write_mem_byte_index1 [7:0] $end
$var reg 8 U$ write_mem_byte_index2 [7:0] $end
$var reg 8 V$ write_mem_byte_index3 [7:0] $end
$var reg 16 W$ crc_result [15:0] $end
$var reg 4 X$ crc_bit_index [3:0] $end
$var reg 8 Y$ crc_byte_index [7:0] $end
$upscope $end
$scope module u_jtag_top $end
$var wire 1 : clk $end
$var wire 1 ; jtag_rst_n $end
$var wire 1 C jtag_pin_TCK $end
$var wire 1 D jtag_pin_TMS $end
$var wire 1 E jtag_pin_TDI $end
$var wire 1 F jtag_pin_TDO $end
$var wire 1 | reg_we_o $end
$var wire 5 z reg_addr_o [4:0] $end
$var wire 32 { reg_wdata_o [31:0] $end
$var wire 32 } reg_rdata_i [31:0] $end
$var wire 1 Y mem_we_o $end
$var wire 32 U mem_addr_o [31:0] $end
$var wire 32 V mem_wdata_o [31:0] $end
$var wire 32 W mem_rdata_i [31:0] $end
$var wire 1 X op_req_o $end
$var wire 1 x halt_req_o $end
$var wire 1 y reset_req_o $end
$var wire 1 Z$ dtm_ack_o $end
$var wire 1 [$ dtm_req_valid_o $end
$var wire 40 \$ dtm_req_data_o [39:0] $end
$var wire 1 ]$ dm_ack_o $end
$var wire 40 ^$ dm_resp_data_o [39:0] $end
$var wire 1 _$ dm_resp_valid_o $end
$var wire 1 `$ dm_op_req_o $end
$var wire 1 a$ dm_halt_req_o $end
$var wire 1 b$ dm_reset_req_o $end
$scope module u_jtag_driver $end
$var wire 1 ; rst_n $end
$var wire 1 C jtag_TCK $end
$var wire 1 E jtag_TDI $end
$var wire 1 D jtag_TMS $end
$var reg 1 c$ jtag_TDO $end
$var wire 1 _$ dm_resp_i $end
$var wire 40 ^$ dm_resp_data_i [39:0] $end
$var wire 1 Z$ dtm_ack_o $end
$var wire 1 ]$ dm_ack_i $end
$var wire 1 [$ dtm_req_valid_o $end
$var wire 40 \$ dtm_req_data_o [39:0] $end
$var reg 5 d$ ir_reg [4:0] $end
$var reg 40 e$ shift_reg [39:0] $end
$var reg 4 f$ jtag_state [3:0] $end
$var wire 1 g$ is_busy $end
$var reg 1 h$ sticky_busy $end
$var reg 1 i$ dtm_req_valid $end
$var reg 40 j$ dtm_req_data [39:0] $end
$var reg 40 k$ dm_resp_data [39:0] $end
$var reg 1 l$ dm_is_busy $end
$var wire 6 m$ addr_bits [5:0] $end
$var wire 40 n$ busy_response [39:0] $end
$var wire 40 o$ none_busy_response [39:0] $end
$var wire 32 p$ idcode [31:0] $end
$var wire 32 q$ dtmcs [31:0] $end
$var wire 2 r$ dmi_stat [1:0] $end
$var wire 1 s$ dtm_reset $end
$var wire 1 t$ tx_idle $end
$var wire 1 u$ rx_valid $end
$var wire 40 v$ rx_data [39:0] $end
$var wire 1 w$ tx_valid $end
$var wire 40 x$ tx_data [39:0] $end
$scope module tx $end
$var wire 1 C clk $end
$var wire 1 ; rst_n $end
$var wire 1 ]$ ack_i $end
$var wire 1 w$ req_i $end
$var wire 40 x$ req_data_i [39:0] $end
$var wire 1 t$ idle_o $end
$var wire 1 [$ req_o $end
$var wire 40 \$ req_data_o [39:0] $end
$var reg 3 y$ state [2:0] $end
$var reg 3 z$ state_next [2:0] $end
$var reg 1 {$ ack_d $end
$var reg 1 |$ ack $end
$var reg 1 }$ req $end
$var reg 40 ~$ req_data [39:0] $end
$var reg 1 !% idle $end
$upscope $end
$scope module rx $end
$var wire 1 C clk $end
$var wire 1 ; rst_n $end
$var wire 1 _$ req_i $end
$var wire 40 ^$ req_data_i [39:0] $end
$var wire 1 Z$ ack_o $end
$var wire 40 v$ recv_data_o [39:0] $end
$var wire 1 u$ recv_rdy_o $end
$var reg 2 "% state [1:0] $end
$var reg 2 #% state_next [1:0] $end
$var reg 1 $% req_d $end
$var reg 1 %% req $end
$var reg 40 &% recv_data [39:0] $end
$var reg 1 '% recv_rdy $end
$var reg 1 (% ack $end
$upscope $end
$upscope $end
$scope module u_jtag_dm $end
$var wire 1 : clk $end
$var wire 1 ; rst_n $end
$var wire 1 ]$ dm_ack_o $end
$var wire 1 [$ dtm_req_valid_i $end
$var wire 40 \$ dtm_req_data_i [39:0] $end
$var wire 1 Z$ dtm_ack_i $end
$var wire 40 ^$ dm_resp_data_o [39:0] $end
$var wire 1 _$ dm_resp_valid_o $end
$var wire 1 | dm_reg_we_o $end
$var wire 5 z dm_reg_addr_o [4:0] $end
$var wire 32 { dm_reg_wdata_o [31:0] $end
$var wire 32 } dm_reg_rdata_i [31:0] $end
$var wire 1 Y dm_mem_we_o $end
$var wire 32 U dm_mem_addr_o [31:0] $end
$var wire 32 V dm_mem_wdata_o [31:0] $end
$var wire 32 W dm_mem_rdata_i [31:0] $end
$var wire 1 X dm_op_req_o $end
$var wire 1 x dm_halt_req_o $end
$var wire 1 y dm_reset_req_o $end
$var reg 32 )% dcsr [31:0] $end
$var reg 32 *% dmstatus [31:0] $end
$var reg 32 +% dmcontrol [31:0] $end
$var reg 32 ,% hartinfo [31:0] $end
$var reg 32 -% abstractcs [31:0] $end
$var reg 32 .% data0 [31:0] $end
$var reg 32 /% sbcs [31:0] $end
$var reg 32 0% sbaddress0 [31:0] $end
$var reg 32 1% sbdata0 [31:0] $end
$var reg 32 2% command [31:0] $end
$var reg 32 3% read_data [31:0] $end
$var reg 1 4% dm_reg_we $end
$var reg 5 5% dm_reg_addr [4:0] $end
$var reg 32 6% dm_reg_wdata [31:0] $end
$var reg 1 7% dm_mem_we $end
$var reg 32 8% dm_mem_addr [31:0] $end
$var reg 32 9% dm_mem_wdata [31:0] $end
$var reg 1 :% dm_halt_req $end
$var reg 1 ;% dm_reset_req $end
$var reg 1 <% need_resp $end
$var reg 1 =% is_read_reg $end
$var wire 1 >% rx_valid $end
$var wire 40 ?% rx_data [39:0] $end
$var wire 32 @% sbaddress0_next [31:0] $end
$var wire 40 A% dm_resp_data [39:0] $end
$var wire 2 B% op [1:0] $end
$var wire 32 C% data [31:0] $end
$var wire 6 D% address [5:0] $end
$var wire 1 E% read_dmstatus $end
$var wire 1 F% tx_idle $end
$scope module tx $end
$var wire 1 : clk $end
$var wire 1 ; rst_n $end
$var wire 1 Z$ ack_i $end
$var wire 1 G% req_i $end
$var wire 40 A% req_data_i [39:0] $end
$var wire 1 F% idle_o $end
$var wire 1 _$ req_o $end
$var wire 40 ^$ req_data_o [39:0] $end
$var reg 3 H% state [2:0] $end
$var reg 3 I% state_next [2:0] $end
$var reg 1 J% ack_d $end
$var reg 1 K% ack $end
$var reg 1 L% req $end
$var reg 40 M% req_data [39:0] $end
$var reg 1 N% idle $end
$upscope $end
$scope module rx $end
$var wire 1 : clk $end
$var wire 1 ; rst_n $end
$var wire 1 [$ req_i $end
$var wire 40 \$ req_data_i [39:0] $end
$var wire 1 ]$ ack_o $end
$var wire 40 ?% recv_data_o [39:0] $end
$var wire 1 >% recv_rdy_o $end
$var reg 2 O% state [1:0] $end
$var reg 2 P% state_next [1:0] $end
$var reg 1 Q% req_d $end
$var reg 1 R% req $end
$var reg 40 S% recv_data [39:0] $end
$var reg 1 T% recv_rdy $end
$var reg 1 U% ack $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end

#0
$dumpvars
0!
x!!
bx !"
bx !#
x!$
1!%
0"
bx "!
bx ""
x"#
bx "$
b1 "%
b1 #
bx #!
bx #"
x##
bx #$
b1 #%
bx $
bx $!
bx $"
x$#
bx $$
0$%
bx %
bx %!
bx %"
bx %#
bx %$
0%%
x&
bx &!
bx &"
bx &#
x&$
b0 &%
b0xxxxx '
bx '!
bx '"
bx '#
bx '$
0'%
b0xxxxx (
bx (!
0("
bx (#
x($
0(%
x)
bx )!
bx )"
bx )#
bx )$
b0 )%
bx *
bx *!
bx *"
bx *#
x*$
b10000110000110010000010 *%
bx +
b0 +!
bx +"
bx +#
bx +$
b0 +%
bx ,
b0 ,!
b1 ,"
b0 ,#
b0xxxxxxxx ,$
b0 ,%
b0 -
bx -!
bx -"
x-#
b0 -$
b1000000000000000000000011 -%
b0 .
bx .!
b0 ."
bx .#
b0 .$
b0 .%
bx /
b0 /!
bx /"
bx /#
b1 /$
b100000000001000000010000000100 /%
bx 0
b0 0!
b0 0"
x0#
10$
b0 0%
bx 1
01!
bx 1"
bx 1#
01$
b0 1%
bx 2
b0 2!
b0 2"
x2#
b0 2$
b0 2%
bx 3
b0 3!
b0 3"
x3#
b0 3$
b0 3%
bx 4
04!
b0 4"
bx 4#
b0 4$
04%
bx 5
b0 5!
b0 5"
05#
b0 5$
b0 5%
b10 6
b0 6!
b0 6"
06#
06$
b0 6%
b11 7
b0 7!
b0 7"
b0 7#
b0 7$
07%
bx 8
b0 8!
b0 8"
08#
b0 8$
b0 8%
bx 9
b0 9!
bx 9"
09#
09$
b0 9%
0:
b0 :!
bx :"
x:#
b0 :$
0:%
0;
0;!
b0 ;"
z;#
b0 ;$
0;%
x<
bz <!
b0 <"
bx <#
0<$
0<%
x=
bx =!
0="
x=#
b0 =$
0=%
1>
bx >!
b0 >"
x>#
b0 >$
0>%
0?
x?!
0?"
bx ?#
0?$
b0 ?%
x@
bx @!
b0 @"
bx @#
b0 @$
b100 @%
zA
bx A!
b0 A"
bx A#
b0 A$
b0 A%
bx B
bx B!
0B"
bx B#
0B$
b0 B%
zC
xC!
bx C"
bx C#
b0 C$
b0 C%
zD
bx D!
bx D"
bx D#
b0 D$
b0 D%
zE
bx E!
bx E"
bx E#
0E$
0E%
xF
bx F!
bx F"
bx F#
0F$
1F%
zG
bx G!
bx G"
bx G#
b10 G$
0G%
xH
bx H!
bx H"
xH#
b1 H$
b1 H%
xI
bx I!
0I"
xI#
xI$
b1 I%
xJ
xJ!
bx J"
xJ#
bx J$
0J%
b0 K
b0 K!
bx K"
xK#
bx K$
0K%
b0 L
b0 L!
xL"
xL#
bx L$
0L%
b0 M
b0 M!
xM"
bx M#
bx M$
b0 M%
0N
0N!
bx N"
bx N#
bx N$
1N%
0O
0O!
bx O"
xO#
bx O$
b1 O%
bx P
bx P!
bx P"
bx P#
bx P$
b1 P%
bz Q
xQ!
bx Q"
bx Q#
bx Q$
0Q%
b1 R
bx R!
xR"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx R#
bx R$
0R%
zS
xS!
bx S"
xS#
bx S$
b0 S%
zT
xT!
bx T"
bx T#
bx T$
0T%
b0 U
bx U!
bx U"
bx U#
bx U$
0U%
b0 V
xV!
bx V"
bx V#
bx V$
b0 W
bx W!
bx W"
bx W#
bx W$
0X
bx X!
bx X"
xX#
bx X$
0Y
bx Y!
b1 Y"
b1 Y#
bx Y$
bx Z
bx Z!
bx Z"
bx Z#
0Z$
bx [
b0 [!
b0 ["
bx [#
0[$
b0 \
x\!
bx \"
bx \#
b0 \$
0]
bx ]!
0]"
b0 ]#
0]$
x^
b0 ^!
x^"
b0 ^#
b0 ^$
b0 _
b0 _!
x_"
b0 _#
0_$
b0 `
b0 `!
bx `"
bx `#
z`$
b0 a
bx a!
b0 a"
bx a#
za$
0b
xb!
bx b"
bx b#
zb$
b0 c
bx c!
bx c"
b0 c#
xc$
b0 d
bx d!
bx d"
xd#
bx d$
b0 e
bx e!
xe"
xe#
bx e$
0f
b0 f!
bx f"
bx f#
b0 f$
b0 g
xg!
bx g"
bx g#
0g$
b0 h
bx h!
bx h"
bx h#
0h$
b0 i
bx i!
bx i"
bx i#
0i$
0j
xj!
bx j"
xj#
b0 j$
b0 k
xk!
bx k"
xk#
b0 k$
b0 l
bx l!
b0 l"
xl#
0l$
b0 m
xm!
b0 m"
xm#
b110 m$
0n
bx n!
b0 n"
xn#
b11 n$
b0 o
bx o!
b0 o"
bx o#
b0 o$
b0 p
bx p!
bx p"
xp#
b11110001000000000101001101111 p$
b0 q
bx q!
bx q"
xq#
b101000001100001 q$
0r
xr!
bx r"
bx r#
b0 r$
b0 s
xs!
bx s"
bx s#
xs$
b0 t
bx t!
bx t"
bx t#
1t$
b0 u
bx u!
bx u"
xu#
0u$
0v
bx v!
bx v"
bx v#
b0 v$
0w
b0 w!
bx w"
bx w#
0w$
0x
xx!
bx x"
bx x#
b0 x$
0y
bx y!
bx y"
bx y#
b1 y$
b0 z
b0 z!
bx z"
b0 z#
b1 z$
b0 {
b0 {!
bx {"
bx {#
0{$
0|
b0 |!
bx |"
bx |#
0|$
b0 }
bx }!
bx }"
b0 }#
0}$
b0x ~
b0 ~!
bx ~"
x~#
b0 ~$
$end

#10000
1!
0!!
b0 !"
b0 !#
0!$
bz "!
b0 ""
1"#
b0 "$
b0 #
b0 #!
b0 #"
1##
b0 #$
b1 $
b0 $!
b0 $"
1$#
b0 $$
b1 %
b0 %!
b0 %"
b0 %#
b0 %$
0&
b0 &!
b0 &"
b0 &#
0&$
b0 '
b0 '!
b0 '"
b1 '#
b0 '$
b0 (
b1 (!
b0 (#
0($
0)
b0 )!
b1 )"
b0 )#
b0 )$
b0 *
b0 *!
b0 *"
b0 *#
0*$
b0 +
b0 +"
b0 +#
b0 +$
b0 ,
b0 ,$
b1 -!
b1 -"
0-#
b0 .!
b0 .#
b0 /
b0 /"
b0 /#
b0 /$
b0 0
00#
b0 1
b0 1"
b0 1#
02#
03#
b0 4#
b1 9"
1:
b0 :"
0:#
1<
b0 <#
1=
b1 =!
0=#
b0 >!
0>#
0?!
b0 ?#
0@
b0 @!
b0 @#
b0 A!
b0 A#
bz B
b0 B!
b0 B#
0C!
b1 C"
b1 C#
b0 D!
b0 D"
b0 D#
b0 E!
b0 E"
b0 E#
b0 F!
b0 F"
b0 F#
b0 G!
b0 G"
b0 G#
0H
b0 H!
b0 H"
0H#
1I
b0 I!
0I#
0I$
0J
0J!
b1 J"
0J#
b0 J$
b0 K"
0K#
b0 K$
0L"
0L#
b1 L$
0M"
b0 M#
b0 M$
b0 N"
b0 N#
b0 N$
b0 O"
1O#
b0 O$
b0 P
b0 P!
b0 P"
b0 P#
b0 P$
0Q!
b0 Q"
b1 Q#
b0 Q$
b0 R
b0 R!
0R"
b0 R#
b0 R$
0S!
b0 S"
0S#
b0 S$
0T!
b0 T"
b0 T#
b0 T$
b0 U!
b0 U"
b0 U$
0V!
b0 V"
b0 V#
b0 V$
b0 W!
b0 W"
b0 W#
b0 W$
b0 X!
b0 X"
0X#
b0 X$
b0 Y!
b0 Y$
b0 Z
b0 Z!
b1 Z"
b1 Z#
b0 [
b0 [#
0\!
b0 \"
b0 \#
b0 ]!
0^
0^"
0_"
b0 `"
b0 `#
b0 a!
b0 a#
0b!
b0 b"
b0 b#
b0 c!
b0 c"
b0 d!
b0 d"
0d#
b0 e!
0e"
0e#
b0 f"
b1 f#
0g!
b0 g"
b0 g#
b0 h!
b0 h"
b0 h#
b0 i!
b0 i"
0j!
b0 j"
0j#
0k!
b0 k"
0k#
b0 l!
0l#
0m!
0m#
b0 n!
0n#
b0 o#
b0 p!
b0 p"
0p#
b0 q!
b0 q"
0r!
b0 r"
b0 r#
0s!
b0 s"
b0 s#
b0 t!
b0 t"
b0 t#
b0 u!
b0 u"
0u#
b0 v!
b0 v"
b0 v#
b0 w"
b0 w#
0x!
b0 x"
b110111000 x#
b0 y!
b0 y"
b0 y#
b11111111111111111111111111111111 z"
b11111111111111111111111111111111 {"
b0 {#
b0 |"
b0 |#
b0 }!
b0 }"
b0 ~
b0 ~"
0~#

#20000
0!
0:

#30000
1!
1:

#40000
0!
1"
b10010000101101001100101011 #
b10010000101101001100101011 /$
0:
1;
b10010000101101001100101011 R
b10010000101101001100101011 ]#
bx ^#
b10010000101101001100101011 a
bx e

#50000
1!
b1 !"
b10000000000101001100101011 #
b10010000101101001100101011 $
b100 '!
b10010000101101001100101011 (!
b10010000101101001100101011 )"
b101 +!
b110 +$
b100 ,!
b11 -
b10010000101101001100101011 -!
b10010000101101001100101011 -"
b10 .
b11 /!
b10000000000101001100101011 /$
b10 0!
11!
b110 2!
b101 2"
b100 3"
b100 4$
b11 5"
b10 6"
b11 7!
b10 8!
b10010000101101001100101011 9"
1:
1;!
b11 ;"
x<
b10 <"
x=
1="
b110 >"
1@
1B"
b101011 C"
b101 D"
b1 E"
b110 F"
b101 G"
b100 H"
b100 P
b10000000000101001100101011 R
b10000000000101001100101011 ]#
b11 ^!
b100 _
b10 _!
b10000000000101001100101011 a
1j#
zk#
b110111000 s#
b100 v!
b11 z!
b10 {!

#60000
0!
0:

#70000
1!
b10 !"
b11111111111111111111111111111110 !#
b10010000101101001100101011 #
b10000000000101001100101011 $
0$#
b10010000101101001100101011 %
b11 %#
b10 &#
b110 '
b1000 '!
b101011 '#
b110 (
b10000000000101001100101011 (!
b101 (#
1)
b100 )!
b10000000000101001100101011 )"
b1 )#
b100 *"
b110 *#
b0 +!
b101 +#
b0 ,!
b0 -
b10000000000101001100101011 -!
b10000000000101001100101011 -"
1-#
b0 .
b100 .!
b110 .#
b11 /
b0 /!
b100 /"
b10010000101101001100101011 /$
b10 0
b0 0!
b0 2"
b0 3"
b1000 4$
b0 5"
b0 6"
b0 7!
b0 8!
b10000000000101001100101011 9"
1:
b100 :"
b0 ;"
b0 <"
b10010000101101001100101011 =!
1?!
b110 @!
b11 A!
b10 B!
1B"
b11 F!
b10 G!
b0 G"
b0 H"
1J!
b10010000101101001100101011 J"
1L"
1M"
b110 O"
b1000 P
b11 P"
1Q!
b10 Q"
b10010000101101001100101011 R
b110 R!
b11 U"
b10 V"
b11 W!
b10 X!
b101 Y!
b110 Z!
b10010000101101001100101011 Z"
b10010000101101001100101011 ]#
b0 ^!
1^"
b1000 _
b0 _!
1_"
b10010000101101001100101011 a
b110 b"
b11 c"
b10 d"
b11 h"
b10 i"
zl#
xm#
b11 p"
b10 q"
b101 r"
b110 s"
b11 t"
b110 u!
b1 u"
b1000 v!
b110 v"
b1111111111111111111111111111111111111111111111111111111111111010 w"
b0 z!
b111111111111111111111111111111 z"
b0 {!
b1111111111111111111111111111 {"
b101 |"
b11111111111111111111111111111101 ~"

#80000
0!
0:

#90000
1!
b11 !"
b0 !#
bx #
b10010000101101001100101011 $
1$#
b10000000000101001100101011 %
b110 %!
b0 %#
b0 &#
b1100 '!
b10010000101101001100101011 (!
b1000 )!
b10010000101101001100101011 )"
b110 *
b1000 *"
b101 +!
b0 +#
b110 ,
b100 ,!
b110 ,#
b11 -
b10010000101101001100101011 -!
b10010000101101001100101011 -"
b10 .
b1000 .!
b0 /
b11 /!
b1000 /"
bx /$
b0 0
b10 0!
b110 1
b101 2"
b100 3"
b1100 4$
b11 5"
b10 6"
b11 7!
b0 8
b10 8!
b10010000101101001100101011 9"
1:
b1000 :"
b11 ;"
b10 <"
b10000000000101001100101011 =!
b100 >!
b0 A!
b0 B!
1B"
b0 F!
b0 G!
b101 G"
b100 H"
b10000000000101001100101011 J"
b100 K"
b1100 P
b110 P!
b0 P"
b0 Q"
bx R
b0 U"
b0 V"
b0 W!
b0 X!
b10000000000101001100101011 Z"
b100 \"
bx ]#
b11 ^!
b1100 _
b10 _!
bx a
b0 c"
b0 d"
b0 h"
b0 i"
b0 p"
b0 q"
b110 t!
b0 t"
b0 u!
b10 u"
b1100 v!
b0 v"
b0 w"
b11 z!
b11111111111111111111111111111111 z"
b10 {!
b11111111111111111111111111111111 {"
b0 |"
b0 ~"

#100000
0!
0:

#110000
1!
b100 !"
b11111111111111111111111111111110 !#
bx $
0$#
b10010000101101001100101011 %
b11 %#
b110 &!
b10 &#
b10000 '!
bx (!
b1100 )!
bx )"
b1100 *"
b110 +
b0 +!
b101 +#
b0 ,!
b0 -
bx -!
bx -"
b0 .
b1100 .!
b11 /
b0 /!
b1100 /"
bx /$
b10 0
b0 0!
01!
b0 2!
b0 2"
b0 3"
b10000 4$
b0 5"
b0 6"
b0 7!
b110 8
b0 8!
bx 9"
1:
b1100 :"
0;!
b0 ;"
b0 <"
b10010000101101001100101011 =!
0="
b1000 >!
b0 >"
b11 A!
b10 B!
0B"
bx C"
bx D"
bx E"
b11 F!
bx F"
b10 G!
bx G"
bx H"
b10010000101101001100101011 J"
b1000 K"
b110 N"
b10000 P
b11 P"
b10 Q"
b11 U"
b10 V"
b11 W!
b10 X!
b10010000101101001100101011 Z"
b1000 \"
b0 ^!
b10000 _
b0 _!
b110 `"
b11 c"
b10 d"
b11 h"
b10 i"
b11 p"
b10 q"
b11 t"
b110 u!
b1 u"
b10000 v!
b110 v"
b1111111111111111111111111111111111111111111111111111111111111010 w"
b0 z!
b111111111111111111111111111111 z"
b0 {!
b1111111111111111111111111111 {"
b101 |"
b11111111111111111111111111111101 ~"

#120000
0!
0:

#130000
1!
b101 !"
b0 !#
1$#
bx %
b1100 %!
b0 %#
b0 &#
b0 '
b10100 '!
bx '#
b0 (
bx (#
0)
b10000 )!
bx )#
b1100 *
b10000 *"
bx *#
bx +#
b0 ,
b0 ,#
0-#
b10000 .!
b0 .#
b0 /
b10000 /"
bx /$
b0 0
b0 1
b10100 4$
1:
b10000 :"
bx =!
b1100 >!
0?!
b0 @!
b0 A!
b0 B!
b0 F!
b0 G!
0J!
bx J"
b1100 K"
0L"
0M"
b0 O"
b10100 P
b0 P!
b0 P"
0Q!
b0 Q"
b0 R!
b0 U"
b0 V"
b0 W!
b0 X!
bx Y!
b0 Z!
bx Z"
b1100 \"
0^"
b10100 _
0_"
b0 b"
b0 c"
b0 d"
b0 h"
b0 i"
b0 p"
b0 q"
bx r"
b0 s"
b1100 t!
bx t"
b0 u!
bx u"
b10100 v!
b0 v"
b0 w"
bx y"
b11111111111111111111111111111111 z"
bx {"
b0 |"
b0 ~"

#140000
0!
0:

#150000
1!
b110 !"
b1100 &!
b11000 '!
b10100 )!
b10100 *"
b1100 +
b10100 .!
b10100 /"
bx /$
b11000 4$
1:
b10100 :"
b10000 >!
b10000 K"
b1100 N"
b11000 P
b10000 \"
b11000 _
b1100 `"
b11000 v!

#160000
0!
0:

#170000
1!
b111 !"
b11100 '!
b11000 )!
b11000 *"
b11000 .!
b11000 /"
bx /$
b11100 4$
1:
b11000 :"
b10100 >!
b10100 K"
b11100 P
b10100 \"
b11100 _
b11100 v!

#180000
0!
0:

#190000
1!
b1000 !"
b100000 '!
b11100 )!
b11100 *"
b11100 .!
b11100 /"
bx /$
b100000 4$
1:
b11100 :"
b11000 >!
b11000 K"
b100000 P
b11000 \"
b100000 _
b100000 v!

#200000
0!
0:

#210000
1!
b1001 !"
b100100 '!
b100000 )!
b100000 *"
b100000 .!
b100000 /"
bx /$
b100100 4$
1:
b100000 :"
b11100 >!
b11100 K"
b100100 P
b11100 \"
b100100 _
b100100 v!

#220000
0!
0:

#230000
1!
b1010 !"
b101000 '!
b100100 )!
b100100 *"
b100100 .!
b100100 /"
bx /$
b101000 4$
1:
b100100 :"
b100000 >!
b100000 K"
b101000 P
b100000 \"
b101000 _
b101000 v!

#240000
0!
0:

#250000
1!
b1011 !"
b101100 '!
b101000 )!
b101000 *"
b101000 .!
b101000 /"
bx /$
b101100 4$
1:
b101000 :"
b100100 >!
b100100 K"
b101100 P
b100100 \"
b101100 _
b101100 v!

#260000
0!
0:

#270000
1!
b1100 !"
b110000 '!
b101100 )!
b101100 *"
b101100 .!
b101100 /"
bx /$
b110000 4$
1:
b101100 :"
b101000 >!
b101000 K"
b110000 P
b101000 \"
b110000 _
b110000 v!

#280000
0!
0:

#290000
1!
b1101 !"
b110100 '!
b110000 )!
b110000 *"
b110000 .!
b110000 /"
bx /$
b110100 4$
1:
b110000 :"
b101100 >!
b101100 K"
b110100 P
b101100 \"
b110100 _
b110100 v!

#300000
0!
0:

#310000
1!
b1110 !"
b111000 '!
b110100 )!
b110100 *"
b110100 .!
b110100 /"
bx /$
b111000 4$
1:
b110100 :"
b110000 >!
b110000 K"
b111000 P
b110000 \"
b111000 _
b111000 v!

#320000
0!
0:

#330000
1!
b1111 !"
b111100 '!
b111000 )!
b111000 *"
b111000 .!
b111000 /"
bx /$
b111100 4$
1:
b111000 :"
b110100 >!
b110100 K"
b111100 P
b110100 \"
b111100 _
b111100 v!

#340000
0!
0:

#350000
1!
b10000 !"
b1000000 '!
b111100 )!
b111100 *"
b111100 .!
b111100 /"
bx /$
b1000000 4$
1:
b111100 :"
b111000 >!
b111000 K"
b1000000 P
b111000 \"
b1000000 _
b1000000 v!

#360000
0!
0:

#370000
1!
b10001 !"
b1000100 '!
b1000000 )!
b1000000 *"
b1000000 .!
b1000000 /"
bx /$
b1000100 4$
1:
b1000000 :"
b111100 >!
b111100 K"
b1000100 P
b111100 \"
b1000100 _
b1000100 v!

#380000
0!
0:

#390000
1!
b10010 !"
b1001000 '!
b1000100 )!
b1000100 *"
b1000100 .!
b1000100 /"
bx /$
b1001000 4$
1:
b1000100 :"
b1000000 >!
b1000000 K"
b1001000 P
b1000000 \"
b1001000 _
b1001000 v!

#400000
0!
0:

#410000
1!
b10011 !"
b1001100 '!
b1001000 )!
b1001000 *"
b1001000 .!
b1001000 /"
bx /$
b1001100 4$
1:
b1001000 :"
b1000100 >!
b1000100 K"
b1001100 P
b1000100 \"
b1001100 _
b1001100 v!

#420000
0!
0:

#430000
1!
b10100 !"
b1010000 '!
b1001100 )!
b1001100 *"
b1001100 .!
b1001100 /"
bx /$
b1010000 4$
1:
b1001100 :"
b1001000 >!
b1001000 K"
b1010000 P
b1001000 \"
b1010000 _
b1010000 v!

#440000
0!
0:

#450000
1!
b10101 !"
b1010100 '!
b1010000 )!
b1010000 *"
b1010000 .!
b1010000 /"
bx /$
b1010100 4$
1:
b1010000 :"
b1001100 >!
b1001100 K"
b1010100 P
b1001100 \"
b1010100 _
b1010100 v!

#460000
0!
0:

#470000
1!
b10110 !"
b1011000 '!
b1010100 )!
b1010100 *"
b1010100 .!
b1010100 /"
bx /$
b1011000 4$
1:
b1010100 :"
b1010000 >!
b1010000 K"
b1011000 P
b1010000 \"
b1011000 _
b1011000 v!

#480000
0!
0:

#490000
1!
b10111 !"
b1011100 '!
b1011000 )!
b1011000 *"
b1011000 .!
b1011000 /"
bx /$
b1011100 4$
1:
b1011000 :"
b1010100 >!
b1010100 K"
b1011100 P
b1010100 \"
b1011100 _
b1011100 v!

#500000
0!
0:

#510000
1!
b11000 !"
b1100000 '!
b1011100 )!
b1011100 *"
b1011100 .!
b1011100 /"
bx /$
b1100000 4$
1:
b1011100 :"
b1011000 >!
b1011000 K"
b1100000 P
b1011000 \"
b1100000 _
b1100000 v!

#520000
0!
0:

#530000
1!
b11001 !"
b1100100 '!
b1100000 )!
b1100000 *"
b1100000 .!
b1100000 /"
bx /$
b1100100 4$
1:
b1100000 :"
b1011100 >!
b1011100 K"
b1100100 P
b1011100 \"
b1100100 _
b1100100 v!

#540000
0!
0:

#550000
1!
b11010 !"
b1101000 '!
b1100100 )!
b1100100 *"
b1100100 .!
b1100100 /"
bx /$
b1101000 4$
1:
b1100100 :"
b1100000 >!
b1100000 K"
b1101000 P
b1100000 \"
b1101000 _
b1101000 v!

#560000
0!
0:

#570000
1!
b11011 !"
b1101100 '!
b1101000 )!
b1101000 *"
b1101000 .!
b1101000 /"
bx /$
b1101100 4$
1:
b1101000 :"
b1100100 >!
b1100100 K"
b1101100 P
b1100100 \"
b1101100 _
b1101100 v!

#580000
0!
0:

#590000
1!
b11100 !"
b1110000 '!
b1101100 )!
b1101100 *"
b1101100 .!
b1101100 /"
bx /$
b1110000 4$
1:
b1101100 :"
b1101000 >!
b1101000 K"
b1110000 P
b1101000 \"
b1110000 _
b1110000 v!

#600000
0!
0:

#610000
1!
b11101 !"
b1110100 '!
b1110000 )!
b1110000 *"
b1110000 .!
b1110000 /"
bx /$
b1110100 4$
1:
b1110000 :"
b1101100 >!
b1101100 K"
b1110100 P
b1101100 \"
b1110100 _
b1110100 v!

#620000
0!
0:

#630000
1!
b11110 !"
b1111000 '!
b1110100 )!
b1110100 *"
b1110100 .!
b1110100 /"
bx /$
b1111000 4$
1:
b1110100 :"
b1110000 >!
b1110000 K"
b1111000 P
b1110000 \"
b1111000 _
b1111000 v!

#640000
0!
0:

#650000
1!
b11111 !"
b1111100 '!
b1111000 )!
b1111000 *"
b1111000 .!
b1111000 /"
bx /$
b1111100 4$
1:
b1111000 :"
b1110100 >!
b1110100 K"
b1111100 P
b1110100 \"
b1111100 _
b1111100 v!

#660000
0!
0:

#670000
1!
b100000 !"
b10000000 '!
b1111100 )!
b1111100 *"
b1111100 .!
b1111100 /"
bx /$
b10000000 4$
1:
b1111100 :"
b1111000 >!
b1111000 K"
b10000000 P
b1111000 \"
b10000000 _
b10000000 v!

#680000
0!
0:

#690000
1!
b100001 !"
b10000100 '!
b10000000 )!
b10000000 *"
b10000000 .!
b10000000 /"
bx /$
b10000100 4$
1:
b10000000 :"
b1111100 >!
b1111100 K"
b10000100 P
b1111100 \"
b10000100 _
b10000100 v!

#700000
0!
0:

#710000
1!
b100010 !"
b10001000 '!
b10000100 )!
b10000100 *"
b10000100 .!
b10000100 /"
bx /$
b10001000 4$
1:
b10000100 :"
b10000000 >!
b10000000 K"
b10001000 P
b10000000 \"
b10001000 _
b10001000 v!

#720000
0!
0:

#730000
1!
b100011 !"
b10001100 '!
b10001000 )!
b10001000 *"
b10001000 .!
b10001000 /"
bx /$
b10001100 4$
1:
b10001000 :"
b10000100 >!
b10000100 K"
b10001100 P
b10000100 \"
b10001100 _
b10001100 v!

#740000
0!
0:

#750000
1!
b100100 !"
b10010000 '!
b10001100 )!
b10001100 *"
b10001100 .!
b10001100 /"
bx /$
b10010000 4$
1:
b10001100 :"
b10001000 >!
b10001000 K"
b10010000 P
b10001000 \"
b10010000 _
b10010000 v!

#760000
0!
0:

#770000
1!
b100101 !"
b10010100 '!
b10010000 )!
b10010000 *"
b10010000 .!
b10010000 /"
bx /$
b10010100 4$
1:
b10010000 :"
b10001100 >!
b10001100 K"
b10010100 P
b10001100 \"
b10010100 _
b10010100 v!

#780000
0!
0:

#790000
1!
b100110 !"
b10011000 '!
b10010100 )!
b10010100 *"
b10010100 .!
b10010100 /"
bx /$
b10011000 4$
1:
b10010100 :"
b10010000 >!
b10010000 K"
b10011000 P
b10010000 \"
b10011000 _
b10011000 v!

#800000
0!
0:

#810000
1!
b100111 !"
b10011100 '!
b10011000 )!
b10011000 *"
b10011000 .!
b10011000 /"
bx /$
b10011100 4$
1:
b10011000 :"
b10010100 >!
b10010100 K"
b10011100 P
b10010100 \"
b10011100 _
b10011100 v!

#820000
0!
0:

#830000
1!
b101000 !"
b10100000 '!
b10011100 )!
b10011100 *"
b10011100 .!
b10011100 /"
bx /$
b10100000 4$
1:
b10011100 :"
b10011000 >!
b10011000 K"
b10100000 P
b10011000 \"
b10100000 _
b10100000 v!

#840000
0!
0:

#850000
1!
b101001 !"
b10100100 '!
b10100000 )!
b10100000 *"
b10100000 .!
b10100000 /"
bx /$
b10100100 4$
1:
b10100000 :"
b10011100 >!
b10011100 K"
b10100100 P
b10011100 \"
b10100100 _
b10100100 v!

#860000
0!
0:

#870000
1!
b101010 !"
b10101000 '!
b10100100 )!
b10100100 *"
b10100100 .!
b10100100 /"
bx /$
b10101000 4$
1:
b10100100 :"
b10100000 >!
b10100000 K"
b10101000 P
b10100000 \"
b10101000 _
b10101000 v!

#880000
0!
0:

#890000
1!
b101011 !"
b10101100 '!
b10101000 )!
b10101000 *"
b10101000 .!
b10101000 /"
bx /$
b10101100 4$
1:
b10101000 :"
b10100100 >!
b10100100 K"
b10101100 P
b10100100 \"
b10101100 _
b10101100 v!

#900000
0!
0:

#910000
1!
b101100 !"
b10110000 '!
b10101100 )!
b10101100 *"
b10101100 .!
b10101100 /"
bx /$
b10110000 4$
1:
b10101100 :"
b10101000 >!
b10101000 K"
b10110000 P
b10101000 \"
b10110000 _
b10110000 v!

#920000
0!
0:

#930000
1!
b101101 !"
b10110100 '!
b10110000 )!
b10110000 *"
b10110000 .!
b10110000 /"
bx /$
b10110100 4$
1:
b10110000 :"
b10101100 >!
b10101100 K"
b10110100 P
b10101100 \"
b10110100 _
b10110100 v!

#940000
0!
0:

#950000
1!
b101110 !"
b10111000 '!
b10110100 )!
b10110100 *"
b10110100 .!
b10110100 /"
bx /$
b10111000 4$
1:
b10110100 :"
b10110000 >!
b10110000 K"
b10111000 P
b10110000 \"
b10111000 _
b10111000 v!

#960000
0!
0:

#970000
1!
b101111 !"
b10111100 '!
b10111000 )!
b10111000 *"
b10111000 .!
b10111000 /"
bx /$
b10111100 4$
1:
b10111000 :"
b10110100 >!
b10110100 K"
b10111100 P
b10110100 \"
b10111100 _
b10111100 v!

#980000
0!
0:

#990000
1!
b110000 !"
b11000000 '!
b10111100 )!
b10111100 *"
b10111100 .!
b10111100 /"
bx /$
b11000000 4$
1:
b10111100 :"
b10111000 >!
b10111000 K"
b11000000 P
b10111000 \"
b11000000 _
b11000000 v!

#1000000
0!
0:
