$date
   Fri May 23 12:46:43 2025
$end

$version
  2024.1
  $dumpfile ("tinyriscv_soc_tb.vcd") 
$end

$timescale
  1ps
$end

$scope module tinyriscv_soc_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$var wire 32 # mac_reg [31:0] $end
$var wire 32 $ if_inst_i [31:0] $end
$var wire 32 % if_inst_d [31:0] $end
$var wire 32 & ex_inst_o [31:0] $end
$var wire 1 ' holdEnable $end
$var wire 32 ( ie_reg_addr [31:0] $end
$var wire 32 ) ex_reg_addr [31:0] $end
$var wire 1 * mac_done $end
$var wire 1 + mac_valid $end
$var wire 32 , mac_acc_out_o [31:0] $end
$var wire 32 - ie_acc [31:0] $end
$var wire 32 . ex_wdata [31:0] $end
$var wire 32 / id_r1 [31:0] $end
$var wire 32 0 id_r2 [31:0] $end
$var wire 32 1 ie_r1 [31:0] $end
$var wire 32 2 ie_r2 [31:0] $end
$var wire 32 3 ex_reg_data_o [31:0] $end
$var wire 32 4 x3 [31:0] $end
$var wire 32 5 x26 [31:0] $end
$var wire 32 6 x25 [31:0] $end
$var wire 32 7 x27 [31:0] $end
$var wire 32 8 x4 [31:0] $end
$var wire 32 9 x5 [31:0] $end
$var wire 32 : x6 [31:0] $end
$var integer 32 ; r [31:0] $end
$scope module tinyriscv_soc_top_0 $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var reg 1 > over $end
$var reg 1 ? succ $end
$var wire 1 @ halted_ind $end
$var wire 1 A uart_debug_pin $end
$var wire 1 B uart_tx_pin $end
$var wire 1 C uart_rx_pin $end
$var wire 2 D gpio [1:0] $end
$var wire 1 E jtag_TCK $end
$var wire 1 F jtag_TMS $end
$var wire 1 G jtag_TDI $end
$var wire 1 H jtag_TDO $end
$var wire 1 I spi_miso $end
$var wire 1 J spi_mosi $end
$var wire 1 K spi_ss $end
$var wire 1 L spi_clk $end
$var wire 32 M m0_addr_i [31:0] $end
$var wire 32 N m0_data_i [31:0] $end
$var wire 32 O m0_data_o [31:0] $end
$var wire 1 P m0_req_i $end
$var wire 1 Q m0_we_i $end
$var wire 32 R m1_addr_i [31:0] $end
$var wire 32 S m1_data_i [31:0] $end
$var wire 32 T m1_data_o [31:0] $end
$var wire 1 U m1_req_i $end
$var wire 1 V m1_we_i $end
$var wire 32 W m2_addr_i [31:0] $end
$var wire 32 X m2_data_i [31:0] $end
$var wire 32 Y m2_data_o [31:0] $end
$var wire 1 Z m2_req_i $end
$var wire 1 [ m2_we_i $end
$var wire 32 \ m3_addr_i [31:0] $end
$var wire 32 ] m3_data_i [31:0] $end
$var wire 32 ^ m3_data_o [31:0] $end
$var wire 1 _ m3_req_i $end
$var wire 1 ` m3_we_i $end
$var wire 32 a s0_addr_o [31:0] $end
$var wire 32 b s0_data_o [31:0] $end
$var wire 32 c s0_data_i [31:0] $end
$var wire 1 d s0_we_o $end
$var wire 32 e s1_addr_o [31:0] $end
$var wire 32 f s1_data_o [31:0] $end
$var wire 32 g s1_data_i [31:0] $end
$var wire 1 h s1_we_o $end
$var wire 32 i s2_addr_o [31:0] $end
$var wire 32 j s2_data_o [31:0] $end
$var wire 32 k s2_data_i [31:0] $end
$var wire 1 l s2_we_o $end
$var wire 32 m s3_addr_o [31:0] $end
$var wire 32 n s3_data_o [31:0] $end
$var wire 32 o s3_data_i [31:0] $end
$var wire 1 p s3_we_o $end
$var wire 32 q s4_addr_o [31:0] $end
$var wire 32 r s4_data_o [31:0] $end
$var wire 32 s s4_data_i [31:0] $end
$var wire 1 t s4_we_o $end
$var wire 32 u s5_addr_o [31:0] $end
$var wire 32 v s5_data_o [31:0] $end
$var wire 32 w s5_data_i [31:0] $end
$var wire 1 x s5_we_o $end
$var wire 1 y rib_hold_flag_o $end
$var wire 1 z jtag_halt_req_o $end
$var wire 1 { jtag_reset_req_o $end
$var wire 5 | jtag_reg_addr_o [4:0] $end
$var wire 32 } jtag_reg_data_o [31:0] $end
$var wire 1 ~ jtag_reg_we_o $end
$var wire 32 !! jtag_reg_data_i [31:0] $end
$var wire 8 "! int_flag [7:0] $end
$var wire 1 #! timer0_int $end
$var wire 2 $! io_in [1:0] $end
$var wire 32 %! gpio_ctrl [31:0] $end
$var wire 32 &! gpio_data [31:0] $end
$scope module u_tinyriscv $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var wire 32 M rib_ex_addr_o [31:0] $end
$var wire 32 O rib_ex_data_i [31:0] $end
$var wire 32 N rib_ex_data_o [31:0] $end
$var wire 1 P rib_ex_req_o $end
$var wire 1 Q rib_ex_we_o $end
$var wire 32 R rib_pc_addr_o [31:0] $end
$var wire 32 T rib_pc_data_i [31:0] $end
$var wire 5 | jtag_reg_addr_i [4:0] $end
$var wire 32 } jtag_reg_data_i [31:0] $end
$var wire 1 ~ jtag_reg_we_i $end
$var wire 32 !! jtag_reg_data_o [31:0] $end
$var wire 1 y rib_hold_flag_i $end
$var wire 1 z jtag_halt_flag_i $end
$var wire 1 { jtag_reset_flag_i $end
$var wire 8 "! int_i [7:0] $end
$var wire 32 '! mac_acc_out_o [31:0] $end
$var wire 32 (! ie_acc_out_o [31:0] $end
$var wire 32 )! pc_pc_o [31:0] $end
$var wire 32 *! if_inst_o [31:0] $end
$var wire 32 +! if_inst_addr_o [31:0] $end
$var wire 8 ,! if_int_flag_o [7:0] $end
$var wire 5 -! id_reg1_raddr_o [4:0] $end
$var wire 5 .! id_reg2_raddr_o [4:0] $end
$var wire 32 /! id_inst_o [31:0] $end
$var wire 32 0! id_inst_addr_o [31:0] $end
$var wire 32 1! id_reg1_rdata_o [31:0] $end
$var wire 32 2! id_reg2_rdata_o [31:0] $end
$var wire 1 3! id_reg_we_o $end
$var wire 5 4! id_reg_waddr_o [4:0] $end
$var wire 32 5! id_csr_raddr_o [31:0] $end
$var wire 1 6! id_csr_we_o $end
$var wire 32 7! id_csr_rdata_o [31:0] $end
$var wire 32 8! id_csr_waddr_o [31:0] $end
$var wire 32 9! id_op1_o [31:0] $end
$var wire 32 :! id_op2_o [31:0] $end
$var wire 32 ;! id_op1_jump_o [31:0] $end
$var wire 32 <! id_op2_jump_o [31:0] $end
$var wire 1 =! id_is_mac_o $end
$var wire 1 >! mac_done $end
$var wire 32 ?! ie_inst_o [31:0] $end
$var wire 32 @! ie_inst_addr_o [31:0] $end
$var wire 1 A! ie_reg_we_o $end
$var wire 5 B! ie_reg_waddr_o [4:0] $end
$var wire 32 C! ie_reg1_rdata_o [31:0] $end
$var wire 32 D! ie_reg2_rdata_o [31:0] $end
$var wire 1 E! ie_csr_we_o $end
$var wire 32 F! ie_csr_waddr_o [31:0] $end
$var wire 32 G! ie_csr_rdata_o [31:0] $end
$var wire 32 H! ie_op1_o [31:0] $end
$var wire 32 I! ie_op2_o [31:0] $end
$var wire 32 J! ie_op1_jump_o [31:0] $end
$var wire 32 K! ie_op2_jump_o [31:0] $end
$var wire 1 L! ie_is_mac_o $end
$var wire 32 M! ex_mem_wdata_o [31:0] $end
$var wire 32 N! ex_mem_raddr_o [31:0] $end
$var wire 32 O! ex_mem_waddr_o [31:0] $end
$var wire 1 P! ex_mem_we_o $end
$var wire 1 Q! ex_mem_req_o $end
$var wire 32 R! ex_reg_wdata_o [31:0] $end
$var wire 1 S! ex_reg_we_o $end
$var wire 5 T! ex_reg_waddr_o [4:0] $end
$var wire 1 U! ex_hold_flag_o $end
$var wire 1 V! ex_jump_flag_o $end
$var wire 32 W! ex_jump_addr_o [31:0] $end
$var wire 1 X! ex_div_start_o $end
$var wire 32 Y! ex_div_dividend_o [31:0] $end
$var wire 32 Z! ex_div_divisor_o [31:0] $end
$var wire 3 [! ex_div_op_o [2:0] $end
$var wire 5 \! ex_div_reg_waddr_o [4:0] $end
$var wire 32 ]! ex_csr_wdata_o [31:0] $end
$var wire 1 ^! ex_csr_we_o $end
$var wire 32 _! ex_csr_waddr_o [31:0] $end
$var wire 32 `! regs_rdata1_o [31:0] $end
$var wire 32 a! regs_rdata2_o [31:0] $end
$var wire 32 b! csr_data_o [31:0] $end
$var wire 32 c! csr_clint_data_o [31:0] $end
$var wire 1 d! csr_global_int_en_o $end
$var wire 32 e! csr_clint_csr_mtvec [31:0] $end
$var wire 32 f! csr_clint_csr_mepc [31:0] $end
$var wire 32 g! csr_clint_csr_mstatus [31:0] $end
$var wire 3 h! ctrl_hold_flag_o [2:0] $end
$var wire 1 i! ctrl_jump_flag_o $end
$var wire 32 j! ctrl_jump_addr_o [31:0] $end
$var wire 32 k! div_result_o [31:0] $end
$var wire 1 l! div_ready_o $end
$var wire 1 m! div_busy_o $end
$var wire 5 n! div_reg_waddr_o [4:0] $end
$var wire 1 o! clint_we_o $end
$var wire 32 p! clint_waddr_o [31:0] $end
$var wire 32 q! clint_raddr_o [31:0] $end
$var wire 32 r! clint_data_o [31:0] $end
$var wire 32 s! clint_int_addr_o [31:0] $end
$var wire 1 t! clint_int_assert_o $end
$var wire 1 u! clint_hold_flag_o $end
$scope module mreg $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var wire 1 S! we1_i $end
$var wire 5 T! w1addr_i [4:0] $end
$var wire 32 R! w1data_i [31:0] $end
$var wire 1 v! we2_i $end
$var wire 5 w! w2addr_i [4:0] $end
$var wire 32 x! w2data_i [31:0] $end
$var wire 5 y! raddr1_i [4:0] $end
$var reg 32 z! rdata1_o [31:0] $end
$var wire 5 {! raddr2_i [4:0] $end
$var reg 32 |! rdata2_o [31:0] $end
$upscope $end
$scope module u_mac $end
$var wire 1 < clk $end
$var wire 1 = acc_rst $end
$var wire 1 L! valid $end
$var wire 32 C! a [31:0] $end
$var wire 32 D! b [31:0] $end
$var reg 32 }! acc [31:0] $end
$var wire 33 ~! product [32:0] $end
$var reg 32 !" result [31:0] $end
$upscope $end
$scope module u_pc_reg $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var wire 1 i! jump_flag_i $end
$var wire 32 j! jump_addr_i [31:0] $end
$var wire 3 h! hold_flag_i [2:0] $end
$var wire 1 { jtag_reset_flag_i $end
$var reg 32 "" pc_o [31:0] $end
$upscope $end
$scope module u_ctrl $end
$var wire 1 = rst $end
$var wire 1 V! jump_flag_i $end
$var wire 32 W! jump_addr_i [31:0] $end
$var wire 1 U! hold_flag_ex_i $end
$var wire 1 y hold_flag_rib_i $end
$var wire 1 z jtag_halt_flag_i $end
$var wire 1 u! hold_flag_clint_i $end
$var reg 3 #" hold_flag_o [2:0] $end
$var reg 1 $" jump_flag_o $end
$var reg 32 %" jump_addr_o [31:0] $end
$upscope $end
$scope module u_regs $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var wire 1 S! we_i $end
$var wire 5 T! waddr_i [4:0] $end
$var wire 32 R! wdata_i [31:0] $end
$var wire 1 ~ jtag_we_i $end
$var wire 5 | jtag_addr_i [4:0] $end
$var wire 32 } jtag_data_i [31:0] $end
$var wire 5 -! raddr1_i [4:0] $end
$var reg 32 &" rdata1_o [31:0] $end
$var wire 5 .! raddr2_i [4:0] $end
$var reg 32 '" rdata2_o [31:0] $end
$var reg 32 (" jtag_data_o [31:0] $end
$upscope $end
$scope module u_csr_reg $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var wire 1 ^! we_i $end
$var wire 32 5! raddr_i [31:0] $end
$var wire 32 _! waddr_i [31:0] $end
$var wire 32 ]! data_i [31:0] $end
$var wire 1 o! clint_we_i $end
$var wire 32 q! clint_raddr_i [31:0] $end
$var wire 32 p! clint_waddr_i [31:0] $end
$var wire 32 r! clint_data_i [31:0] $end
$var wire 1 d! global_int_en_o $end
$var reg 32 )" clint_data_o [31:0] $end
$var wire 32 e! clint_csr_mtvec [31:0] $end
$var wire 32 f! clint_csr_mepc [31:0] $end
$var wire 32 g! clint_csr_mstatus [31:0] $end
$var reg 32 *" data_o [31:0] $end
$var reg 64 +" cycle [63:0] $end
$var reg 32 ," mtvec [31:0] $end
$var reg 32 -" mcause [31:0] $end
$var reg 32 ." mepc [31:0] $end
$var reg 32 /" mie [31:0] $end
$var reg 32 0" mstatus [31:0] $end
$var reg 32 1" mscratch [31:0] $end
$upscope $end
$scope module u_if_id $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var wire 32 T inst_i [31:0] $end
$var wire 32 )! inst_addr_i [31:0] $end
$var wire 3 h! hold_flag_i [2:0] $end
$var wire 8 "! int_flag_i [7:0] $end
$var wire 8 ,! int_flag_o [7:0] $end
$var wire 32 *! inst_o [31:0] $end
$var wire 32 +! inst_addr_o [31:0] $end
$var wire 1 2" hold_en $end
$var wire 32 3" inst [31:0] $end
$var wire 32 4" inst_addr [31:0] $end
$var wire 8 5" int_flag [7:0] $end
$scope module inst_ff $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var wire 1 2" hold_en $end
$var wire 32 6" def_val [31:0] $end
$var wire 32 T din [31:0] $end
$var wire 32 3" qout [31:0] $end
$var reg 32 7" qout_r [31:0] $end
$upscope $end
$scope module inst_addr_ff $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var wire 1 2" hold_en $end
$var wire 32 8" def_val [31:0] $end
$var wire 32 )! din [31:0] $end
$var wire 32 4" qout [31:0] $end
$var reg 32 9" qout_r [31:0] $end
$upscope $end
$scope module int_ff $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var wire 1 2" hold_en $end
$var wire 8 :" def_val [7:0] $end
$var wire 8 "! din [7:0] $end
$var wire 8 5" qout [7:0] $end
$var reg 8 ;" qout_r [7:0] $end
$upscope $end
$upscope $end
$scope module u_id $end
$var wire 1 = rst $end
$var wire 32 *! inst_i [31:0] $end
$var wire 32 +! inst_addr_i [31:0] $end
$var wire 32 `! reg1_rdata_i [31:0] $end
$var wire 32 a! reg2_rdata_i [31:0] $end
$var wire 32 b! csr_rdata_i [31:0] $end
$var wire 1 V! ex_jump_flag_i $end
$var reg 5 <" reg1_raddr_o [4:0] $end
$var reg 5 =" reg2_raddr_o [4:0] $end
$var reg 32 >" csr_raddr_o [31:0] $end
$var reg 32 ?" op1_o [31:0] $end
$var reg 32 @" op2_o [31:0] $end
$var reg 32 A" op1_jump_o [31:0] $end
$var reg 32 B" op2_jump_o [31:0] $end
$var reg 32 C" inst_o [31:0] $end
$var reg 32 D" inst_addr_o [31:0] $end
$var reg 32 E" reg1_rdata_o [31:0] $end
$var reg 32 F" reg2_rdata_o [31:0] $end
$var reg 1 G" reg_we_o $end
$var reg 5 H" reg_waddr_o [4:0] $end
$var reg 1 I" csr_we_o $end
$var reg 32 J" csr_rdata_o [31:0] $end
$var reg 32 K" csr_waddr_o [31:0] $end
$var reg 1 L" is_mac_o $end
$var wire 7 M" opcode [6:0] $end
$var wire 3 N" funct3 [2:0] $end
$var wire 7 O" funct7 [6:0] $end
$var wire 5 P" rd [4:0] $end
$var wire 5 Q" rs1 [4:0] $end
$var wire 5 R" rs2 [4:0] $end
$upscope $end
$scope module u_id_ex $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var wire 32 /! inst_i [31:0] $end
$var wire 32 0! inst_addr_i [31:0] $end
$var wire 1 3! reg_we_i $end
$var wire 5 4! reg_waddr_i [4:0] $end
$var wire 32 1! reg1_rdata_i [31:0] $end
$var wire 32 2! reg2_rdata_i [31:0] $end
$var wire 1 6! csr_we_i $end
$var wire 32 8! csr_waddr_i [31:0] $end
$var wire 32 7! csr_rdata_i [31:0] $end
$var wire 32 9! op1_i [31:0] $end
$var wire 32 :! op2_i [31:0] $end
$var wire 32 ;! op1_jump_i [31:0] $end
$var wire 32 <! op2_jump_i [31:0] $end
$var wire 1 =! is_mac_i $end
$var wire 32 '! acc_out_i [31:0] $end
$var wire 3 h! hold_flag_i [2:0] $end
$var wire 1 L! is_mac_o $end
$var wire 32 (! acc_out_o [31:0] $end
$var wire 32 H! op1_o [31:0] $end
$var wire 32 I! op2_o [31:0] $end
$var wire 32 J! op1_jump_o [31:0] $end
$var wire 32 K! op2_jump_o [31:0] $end
$var wire 32 ?! inst_o [31:0] $end
$var wire 32 @! inst_addr_o [31:0] $end
$var wire 1 A! reg_we_o $end
$var wire 5 B! reg_waddr_o [4:0] $end
$var wire 32 C! reg1_rdata_o [31:0] $end
$var wire 32 D! reg2_rdata_o [31:0] $end
$var wire 1 E! csr_we_o $end
$var wire 32 F! csr_waddr_o [31:0] $end
$var wire 32 G! csr_rdata_o [31:0] $end
$var wire 1 S" hold_en $end
$var wire 32 T" inst [31:0] $end
$var wire 32 U" inst_addr [31:0] $end
$var wire 1 V" reg_we $end
$var wire 1 W" is_mac $end
$var wire 32 X" acc_out [31:0] $end
$var wire 5 Y" reg_waddr [4:0] $end
$var wire 32 Z" reg1_rdata [31:0] $end
$var wire 32 [" reg2_rdata [31:0] $end
$var wire 1 \" csr_we $end
$var wire 32 ]" csr_waddr [31:0] $end
$var wire 32 ^" csr_rdata [31:0] $end
$var wire 32 _" op1 [31:0] $end
$var wire 32 `" op2 [31:0] $end
$var wire 32 a" op1_jump [31:0] $end
$var wire 32 b" op2_jump [31:0] $end
$scope module inst_ff $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var wire 1 S" hold_en $end
$var wire 32 c" def_val [31:0] $end
$var wire 32 /! din [31:0] $end
$var wire 32 T" qout [31:0] $end
$var reg 32 d" qout_r [31:0] $end
$upscope $end
$scope module inst_addr_ff $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var wire 1 S" hold_en $end
$var wire 32 e" def_val [31:0] $end
$var wire 32 0! din [31:0] $end
$var wire 32 U" qout [31:0] $end
$var reg 32 f" qout_r [31:0] $end
$upscope $end
$scope module reg_we_ff $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var wire 1 S" hold_en $end
$var wire 1 g" def_val [0:0] $end
$var wire 1 3! din [0:0] $end
$var wire 1 V" qout [0:0] $end
$var reg 1 h" qout_r [0:0] $end
$upscope $end
$scope module is_mac_ff $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var wire 1 S" hold_en $end
$var wire 1 g" def_val [0:0] $end
$var wire 1 =! din [0:0] $end
$var wire 1 W" qout [0:0] $end
$var reg 1 i" qout_r [0:0] $end
$upscope $end
$scope module acc_out_ff $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var wire 1 S" hold_en $end
$var wire 32 e" def_val [31:0] $end
$var wire 32 '! din [31:0] $end
$var wire 32 X" qout [31:0] $end
$var reg 32 j" qout_r [31:0] $end
$upscope $end
$scope module reg_waddr_ff $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var wire 1 S" hold_en $end
$var wire 5 k" def_val [4:0] $end
$var wire 5 4! din [4:0] $end
$var wire 5 Y" qout [4:0] $end
$var reg 5 l" qout_r [4:0] $end
$upscope $end
$scope module reg1_rdata_ff $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var wire 1 S" hold_en $end
$var wire 32 e" def_val [31:0] $end
$var wire 32 1! din [31:0] $end
$var wire 32 Z" qout [31:0] $end
$var reg 32 m" qout_r [31:0] $end
$upscope $end
$scope module reg2_rdata_ff $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var wire 1 S" hold_en $end
$var wire 32 e" def_val [31:0] $end
$var wire 32 2! din [31:0] $end
$var wire 32 [" qout [31:0] $end
$var reg 32 n" qout_r [31:0] $end
$upscope $end
$scope module csr_we_ff $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var wire 1 S" hold_en $end
$var wire 1 g" def_val [0:0] $end
$var wire 1 6! din [0:0] $end
$var wire 1 \" qout [0:0] $end
$var reg 1 o" qout_r [0:0] $end
$upscope $end
$scope module csr_waddr_ff $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var wire 1 S" hold_en $end
$var wire 32 e" def_val [31:0] $end
$var wire 32 8! din [31:0] $end
$var wire 32 ]" qout [31:0] $end
$var reg 32 p" qout_r [31:0] $end
$upscope $end
$scope module csr_rdata_ff $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var wire 1 S" hold_en $end
$var wire 32 e" def_val [31:0] $end
$var wire 32 7! din [31:0] $end
$var wire 32 ^" qout [31:0] $end
$var reg 32 q" qout_r [31:0] $end
$upscope $end
$scope module op1_ff $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var wire 1 S" hold_en $end
$var wire 32 e" def_val [31:0] $end
$var wire 32 9! din [31:0] $end
$var wire 32 _" qout [31:0] $end
$var reg 32 r" qout_r [31:0] $end
$upscope $end
$scope module op2_ff $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var wire 1 S" hold_en $end
$var wire 32 e" def_val [31:0] $end
$var wire 32 :! din [31:0] $end
$var wire 32 `" qout [31:0] $end
$var reg 32 s" qout_r [31:0] $end
$upscope $end
$scope module op1_jump_ff $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var wire 1 S" hold_en $end
$var wire 32 e" def_val [31:0] $end
$var wire 32 ;! din [31:0] $end
$var wire 32 a" qout [31:0] $end
$var reg 32 t" qout_r [31:0] $end
$upscope $end
$scope module op2_jump_ff $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var wire 1 S" hold_en $end
$var wire 32 e" def_val [31:0] $end
$var wire 32 <! din [31:0] $end
$var wire 32 b" qout [31:0] $end
$var reg 32 u" qout_r [31:0] $end
$upscope $end
$upscope $end
$scope module u_ex $end
$var wire 1 = rst $end
$var wire 1 L! is_mac_i $end
$var wire 32 ?! inst_i [31:0] $end
$var wire 32 @! inst_addr_i [31:0] $end
$var wire 1 A! reg_we_i $end
$var wire 5 B! reg_waddr_i [4:0] $end
$var wire 32 C! reg1_rdata_i [31:0] $end
$var wire 32 D! reg2_rdata_i [31:0] $end
$var wire 1 E! csr_we_i $end
$var wire 32 F! csr_waddr_i [31:0] $end
$var wire 32 G! csr_rdata_i [31:0] $end
$var wire 1 t! int_assert_i $end
$var wire 32 s! int_addr_i [31:0] $end
$var wire 32 H! op1_i [31:0] $end
$var wire 32 I! op2_i [31:0] $end
$var wire 32 J! op1_jump_i [31:0] $end
$var wire 32 K! op2_jump_i [31:0] $end
$var wire 32 '! acc_out [31:0] $end
$var wire 32 O mem_rdata_i [31:0] $end
$var wire 1 l! div_ready_i $end
$var wire 32 k! div_result_i [31:0] $end
$var wire 1 m! div_busy_i $end
$var wire 5 n! div_reg_waddr_i [4:0] $end
$var reg 32 v" mem_wdata_o [31:0] $end
$var reg 32 w" mem_raddr_o [31:0] $end
$var reg 32 x" mem_waddr_o [31:0] $end
$var wire 1 P! mem_we_o $end
$var wire 1 Q! mem_req_o $end
$var wire 32 R! reg_wdata_o [31:0] $end
$var wire 1 S! reg_we_o $end
$var wire 5 T! reg_waddr_o [4:0] $end
$var reg 32 y" csr_wdata_o [31:0] $end
$var wire 1 ^! csr_we_o $end
$var wire 32 _! csr_waddr_o [31:0] $end
$var wire 1 X! div_start_o $end
$var reg 32 z" div_dividend_o [31:0] $end
$var reg 32 {" div_divisor_o [31:0] $end
$var reg 3 |" div_op_o [2:0] $end
$var reg 5 }" div_reg_waddr_o [4:0] $end
$var wire 1 U! hold_flag_o $end
$var wire 1 V! jump_flag_o $end
$var wire 32 W! jump_addr_o [31:0] $end
$var wire 2 ~" mem_raddr_index [1:0] $end
$var wire 2 !# mem_waddr_index [1:0] $end
$var wire 64 "# mul_temp [63:0] $end
$var wire 64 ## mul_temp_invert [63:0] $end
$var wire 32 $# sr_shift [31:0] $end
$var wire 32 %# sri_shift [31:0] $end
$var wire 32 &# sr_shift_mask [31:0] $end
$var wire 32 '# sri_shift_mask [31:0] $end
$var wire 32 (# op1_add_op2_res [31:0] $end
$var wire 32 )# op1_jump_add_op2_jump_res [31:0] $end
$var wire 32 *# reg1_data_invert [31:0] $end
$var wire 32 +# reg2_data_invert [31:0] $end
$var wire 1 ,# op1_ge_op2_signed $end
$var wire 1 -# op1_ge_op2_unsigned $end
$var wire 1 .# op1_eq_op2 $end
$var reg 32 /# mul_op1 [31:0] $end
$var reg 32 0# mul_op2 [31:0] $end
$var wire 7 1# opcode [6:0] $end
$var wire 3 2# funct3 [2:0] $end
$var wire 7 3# funct7 [6:0] $end
$var wire 5 4# rd [4:0] $end
$var wire 5 5# uimm [4:0] $end
$var reg 32 6# reg_wdata [31:0] $end
$var reg 1 7# reg_we $end
$var reg 5 8# reg_waddr [4:0] $end
$var reg 32 9# div_wdata [31:0] $end
$var reg 1 :# div_we $end
$var reg 5 ;# div_waddr [4:0] $end
$var reg 1 <# div_hold_flag $end
$var reg 1 =# div_jump_flag $end
$var reg 32 ># div_jump_addr [31:0] $end
$var reg 1 ?# hold_flag $end
$var reg 1 @# jump_flag $end
$var reg 32 A# jump_addr [31:0] $end
$var reg 1 B# mem_we $end
$var reg 1 C# mem_req $end
$var reg 1 D# div_start $end
$var wire 1 E# valid_mac $end
$upscope $end
$scope module u_div $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var wire 32 Y! dividend_i [31:0] $end
$var wire 32 Z! divisor_i [31:0] $end
$var wire 1 X! start_i $end
$var wire 3 [! op_i [2:0] $end
$var wire 5 \! reg_waddr_i [4:0] $end
$var reg 32 F# result_o [31:0] $end
$var reg 1 G# ready_o $end
$var reg 1 H# busy_o $end
$var reg 5 I# reg_waddr_o [4:0] $end
$var reg 32 J# dividend_r [31:0] $end
$var reg 32 K# divisor_r [31:0] $end
$var reg 3 L# op_r [2:0] $end
$var reg 4 M# state [3:0] $end
$var reg 32 N# count [31:0] $end
$var reg 32 O# div_result [31:0] $end
$var reg 32 P# div_remain [31:0] $end
$var reg 32 Q# minuend [31:0] $end
$var reg 1 R# invert_result $end
$var wire 1 S# op_div $end
$var wire 1 T# op_divu $end
$var wire 1 U# op_rem $end
$var wire 1 V# op_remu $end
$var wire 32 W# dividend_invert [31:0] $end
$var wire 32 X# divisor_invert [31:0] $end
$var wire 1 Y# minuend_ge_divisor $end
$var wire 32 Z# minuend_sub_res [31:0] $end
$var wire 32 [# div_result_tmp [31:0] $end
$var wire 32 \# minuend_tmp [31:0] $end
$upscope $end
$scope module u_clint $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var wire 8 ,! int_flag_i [7:0] $end
$var wire 32 /! inst_i [31:0] $end
$var wire 32 0! inst_addr_i [31:0] $end
$var wire 1 V! jump_flag_i $end
$var wire 32 W! jump_addr_i [31:0] $end
$var wire 1 X! div_started_i $end
$var wire 3 h! hold_flag_i [2:0] $end
$var wire 32 c! data_i [31:0] $end
$var wire 32 e! csr_mtvec [31:0] $end
$var wire 32 f! csr_mepc [31:0] $end
$var wire 32 g! csr_mstatus [31:0] $end
$var wire 1 d! global_int_en_i $end
$var wire 1 u! hold_flag_o $end
$var reg 1 ]# we_o $end
$var reg 32 ^# waddr_o [31:0] $end
$var reg 32 _# raddr_o [31:0] $end
$var reg 32 `# data_o [31:0] $end
$var reg 32 a# int_addr_o [31:0] $end
$var reg 1 b# int_assert_o $end
$var reg 4 c# int_state [3:0] $end
$var reg 5 d# csr_state [4:0] $end
$var reg 32 e# inst_addr [31:0] $end
$var reg 32 f# cause [31:0] $end
$upscope $end
$upscope $end
$scope module u_rom $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var wire 1 d we_i $end
$var wire 32 a addr_i [31:0] $end
$var wire 32 b data_i [31:0] $end
$var reg 32 g# data_o [31:0] $end
$upscope $end
$scope module u_ram $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var wire 1 h we_i $end
$var wire 32 e addr_i [31:0] $end
$var wire 32 f data_i [31:0] $end
$var reg 32 h# data_o [31:0] $end
$upscope $end
$scope module timer_0 $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var wire 32 j data_i [31:0] $end
$var wire 32 i addr_i [31:0] $end
$var wire 1 l we_i $end
$var reg 32 i# data_o [31:0] $end
$var wire 1 #! int_sig_o $end
$var reg 32 j# timer_ctrl [31:0] $end
$var reg 32 k# timer_count [31:0] $end
$var reg 32 l# timer_value [31:0] $end
$upscope $end
$scope module uart_0 $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var wire 1 p we_i $end
$var wire 32 m addr_i [31:0] $end
$var wire 32 n data_i [31:0] $end
$var reg 32 m# data_o [31:0] $end
$var wire 1 B tx_pin $end
$var wire 1 C rx_pin $end
$var reg 1 n# tx_data_valid $end
$var reg 1 o# tx_data_ready $end
$var reg 4 p# state [3:0] $end
$var reg 16 q# cycle_cnt [15:0] $end
$var reg 4 r# bit_cnt [3:0] $end
$var reg 8 s# tx_data [7:0] $end
$var reg 1 t# tx_reg $end
$var reg 1 u# rx_q0 $end
$var reg 1 v# rx_q1 $end
$var wire 1 w# rx_negedge $end
$var reg 1 x# rx_start $end
$var reg 4 y# rx_clk_edge_cnt [3:0] $end
$var reg 1 z# rx_clk_edge_level $end
$var reg 1 {# rx_done $end
$var reg 16 |# rx_clk_cnt [15:0] $end
$var reg 16 }# rx_div_cnt [15:0] $end
$var reg 8 ~# rx_data [7:0] $end
$var reg 1 !$ rx_over $end
$var reg 32 "$ uart_ctrl [31:0] $end
$var reg 32 #$ uart_status [31:0] $end
$var reg 32 $$ uart_baud [31:0] $end
$var reg 32 %$ uart_rx [31:0] $end
$upscope $end
$scope module gpio_0 $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var wire 1 t we_i $end
$var wire 32 q addr_i [31:0] $end
$var wire 32 r data_i [31:0] $end
$var reg 32 &$ data_o [31:0] $end
$var wire 2 $! io_pin_i [1:0] $end
$var wire 32 %! reg_ctrl [31:0] $end
$var wire 32 &! reg_data [31:0] $end
$var reg 32 '$ gpio_ctrl [31:0] $end
$var reg 32 ($ gpio_data [31:0] $end
$upscope $end
$scope module spi_0 $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var wire 32 v data_i [31:0] $end
$var wire 32 u addr_i [31:0] $end
$var wire 1 x we_i $end
$var reg 32 )$ data_o [31:0] $end
$var reg 1 *$ spi_mosi $end
$var wire 1 I spi_miso $end
$var wire 1 K spi_ss $end
$var reg 1 +$ spi_clk $end
$var reg 32 ,$ spi_ctrl [31:0] $end
$var reg 32 -$ spi_data [31:0] $end
$var reg 32 .$ spi_status [31:0] $end
$var reg 9 /$ clk_cnt [8:0] $end
$var reg 1 0$ en $end
$var reg 5 1$ spi_clk_edge_cnt [4:0] $end
$var reg 1 2$ spi_clk_edge_level $end
$var reg 8 3$ rdata [7:0] $end
$var reg 1 4$ done $end
$var reg 4 5$ bit_index [3:0] $end
$var wire 9 6$ div_cnt [8:0] $end
$upscope $end
$scope module u_rib $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var wire 32 M m0_addr_i [31:0] $end
$var wire 32 N m0_data_i [31:0] $end
$var reg 32 7$ m0_data_o [31:0] $end
$var wire 1 P m0_req_i $end
$var wire 1 Q m0_we_i $end
$var wire 32 R m1_addr_i [31:0] $end
$var wire 32 8$ m1_data_i [31:0] $end
$var reg 32 9$ m1_data_o [31:0] $end
$var wire 1 :$ m1_req_i $end
$var wire 1 ;$ m1_we_i $end
$var wire 32 W m2_addr_i [31:0] $end
$var wire 32 X m2_data_i [31:0] $end
$var reg 32 <$ m2_data_o [31:0] $end
$var wire 1 Z m2_req_i $end
$var wire 1 [ m2_we_i $end
$var wire 32 \ m3_addr_i [31:0] $end
$var wire 32 ] m3_data_i [31:0] $end
$var reg 32 =$ m3_data_o [31:0] $end
$var wire 1 _ m3_req_i $end
$var wire 1 ` m3_we_i $end
$var reg 32 >$ s0_addr_o [31:0] $end
$var reg 32 ?$ s0_data_o [31:0] $end
$var wire 32 c s0_data_i [31:0] $end
$var reg 1 @$ s0_we_o $end
$var reg 32 A$ s1_addr_o [31:0] $end
$var reg 32 B$ s1_data_o [31:0] $end
$var wire 32 g s1_data_i [31:0] $end
$var reg 1 C$ s1_we_o $end
$var reg 32 D$ s2_addr_o [31:0] $end
$var reg 32 E$ s2_data_o [31:0] $end
$var wire 32 k s2_data_i [31:0] $end
$var reg 1 F$ s2_we_o $end
$var reg 32 G$ s3_addr_o [31:0] $end
$var reg 32 H$ s3_data_o [31:0] $end
$var wire 32 o s3_data_i [31:0] $end
$var reg 1 I$ s3_we_o $end
$var reg 32 J$ s4_addr_o [31:0] $end
$var reg 32 K$ s4_data_o [31:0] $end
$var wire 32 s s4_data_i [31:0] $end
$var reg 1 L$ s4_we_o $end
$var reg 32 M$ s5_addr_o [31:0] $end
$var reg 32 N$ s5_data_o [31:0] $end
$var wire 32 w s5_data_i [31:0] $end
$var reg 1 O$ s5_we_o $end
$var reg 1 P$ hold_flag_o $end
$var wire 4 Q$ req [3:0] $end
$var reg 2 R$ grant [1:0] $end
$upscope $end
$scope module u_uart_debug $end
$var wire 1 < clk $end
$var wire 1 = rst $end
$var wire 1 A debug_en_i $end
$var wire 1 _ req_o $end
$var reg 1 S$ mem_we_o $end
$var reg 32 T$ mem_addr_o [31:0] $end
$var reg 32 U$ mem_wdata_o [31:0] $end
$var wire 32 ^ mem_rdata_i [31:0] $end
$var reg 14 V$ state [13:0] $end
$var reg 8 W$ rec_bytes_index [7:0] $end
$var reg 8 X$ need_to_rec_bytes [7:0] $end
$var reg 16 Y$ remain_packet_count [15:0] $end
$var reg 32 Z$ fw_file_size [31:0] $end
$var reg 32 [$ write_mem_addr [31:0] $end
$var reg 32 \$ write_mem_data [31:0] $end
$var reg 8 ]$ write_mem_byte_index0 [7:0] $end
$var reg 8 ^$ write_mem_byte_index1 [7:0] $end
$var reg 8 _$ write_mem_byte_index2 [7:0] $end
$var reg 8 `$ write_mem_byte_index3 [7:0] $end
$var reg 16 a$ crc_result [15:0] $end
$var reg 4 b$ crc_bit_index [3:0] $end
$var reg 8 c$ crc_byte_index [7:0] $end
$upscope $end
$scope module u_jtag_top $end
$var wire 1 < clk $end
$var wire 1 = jtag_rst_n $end
$var wire 1 E jtag_pin_TCK $end
$var wire 1 F jtag_pin_TMS $end
$var wire 1 G jtag_pin_TDI $end
$var wire 1 H jtag_pin_TDO $end
$var wire 1 ~ reg_we_o $end
$var wire 5 | reg_addr_o [4:0] $end
$var wire 32 } reg_wdata_o [31:0] $end
$var wire 32 !! reg_rdata_i [31:0] $end
$var wire 1 [ mem_we_o $end
$var wire 32 W mem_addr_o [31:0] $end
$var wire 32 X mem_wdata_o [31:0] $end
$var wire 32 Y mem_rdata_i [31:0] $end
$var wire 1 Z op_req_o $end
$var wire 1 z halt_req_o $end
$var wire 1 { reset_req_o $end
$var wire 1 d$ dtm_ack_o $end
$var wire 1 e$ dtm_req_valid_o $end
$var wire 40 f$ dtm_req_data_o [39:0] $end
$var wire 1 g$ dm_ack_o $end
$var wire 40 h$ dm_resp_data_o [39:0] $end
$var wire 1 i$ dm_resp_valid_o $end
$var wire 1 j$ dm_op_req_o $end
$var wire 1 k$ dm_halt_req_o $end
$var wire 1 l$ dm_reset_req_o $end
$scope module u_jtag_driver $end
$var wire 1 = rst_n $end
$var wire 1 E jtag_TCK $end
$var wire 1 G jtag_TDI $end
$var wire 1 F jtag_TMS $end
$var reg 1 m$ jtag_TDO $end
$var wire 1 i$ dm_resp_i $end
$var wire 40 h$ dm_resp_data_i [39:0] $end
$var wire 1 d$ dtm_ack_o $end
$var wire 1 g$ dm_ack_i $end
$var wire 1 e$ dtm_req_valid_o $end
$var wire 40 f$ dtm_req_data_o [39:0] $end
$var reg 5 n$ ir_reg [4:0] $end
$var reg 40 o$ shift_reg [39:0] $end
$var reg 4 p$ jtag_state [3:0] $end
$var wire 1 q$ is_busy $end
$var reg 1 r$ sticky_busy $end
$var reg 1 s$ dtm_req_valid $end
$var reg 40 t$ dtm_req_data [39:0] $end
$var reg 40 u$ dm_resp_data [39:0] $end
$var reg 1 v$ dm_is_busy $end
$var wire 6 w$ addr_bits [5:0] $end
$var wire 40 x$ busy_response [39:0] $end
$var wire 40 y$ none_busy_response [39:0] $end
$var wire 32 z$ idcode [31:0] $end
$var wire 32 {$ dtmcs [31:0] $end
$var wire 2 |$ dmi_stat [1:0] $end
$var wire 1 }$ dtm_reset $end
$var wire 1 ~$ tx_idle $end
$var wire 1 !% rx_valid $end
$var wire 40 "% rx_data [39:0] $end
$var wire 1 #% tx_valid $end
$var wire 40 $% tx_data [39:0] $end
$scope module tx $end
$var wire 1 E clk $end
$var wire 1 = rst_n $end
$var wire 1 g$ ack_i $end
$var wire 1 #% req_i $end
$var wire 40 $% req_data_i [39:0] $end
$var wire 1 ~$ idle_o $end
$var wire 1 e$ req_o $end
$var wire 40 f$ req_data_o [39:0] $end
$var reg 3 %% state [2:0] $end
$var reg 3 &% state_next [2:0] $end
$var reg 1 '% ack_d $end
$var reg 1 (% ack $end
$var reg 1 )% req $end
$var reg 40 *% req_data [39:0] $end
$var reg 1 +% idle $end
$upscope $end
$scope module rx $end
$var wire 1 E clk $end
$var wire 1 = rst_n $end
$var wire 1 i$ req_i $end
$var wire 40 h$ req_data_i [39:0] $end
$var wire 1 d$ ack_o $end
$var wire 40 "% recv_data_o [39:0] $end
$var wire 1 !% recv_rdy_o $end
$var reg 2 ,% state [1:0] $end
$var reg 2 -% state_next [1:0] $end
$var reg 1 .% req_d $end
$var reg 1 /% req $end
$var reg 40 0% recv_data [39:0] $end
$var reg 1 1% recv_rdy $end
$var reg 1 2% ack $end
$upscope $end
$upscope $end
$scope module u_jtag_dm $end
$var wire 1 < clk $end
$var wire 1 = rst_n $end
$var wire 1 g$ dm_ack_o $end
$var wire 1 e$ dtm_req_valid_i $end
$var wire 40 f$ dtm_req_data_i [39:0] $end
$var wire 1 d$ dtm_ack_i $end
$var wire 40 h$ dm_resp_data_o [39:0] $end
$var wire 1 i$ dm_resp_valid_o $end
$var wire 1 ~ dm_reg_we_o $end
$var wire 5 | dm_reg_addr_o [4:0] $end
$var wire 32 } dm_reg_wdata_o [31:0] $end
$var wire 32 !! dm_reg_rdata_i [31:0] $end
$var wire 1 [ dm_mem_we_o $end
$var wire 32 W dm_mem_addr_o [31:0] $end
$var wire 32 X dm_mem_wdata_o [31:0] $end
$var wire 32 Y dm_mem_rdata_i [31:0] $end
$var wire 1 Z dm_op_req_o $end
$var wire 1 z dm_halt_req_o $end
$var wire 1 { dm_reset_req_o $end
$var reg 32 3% dcsr [31:0] $end
$var reg 32 4% dmstatus [31:0] $end
$var reg 32 5% dmcontrol [31:0] $end
$var reg 32 6% hartinfo [31:0] $end
$var reg 32 7% abstractcs [31:0] $end
$var reg 32 8% data0 [31:0] $end
$var reg 32 9% sbcs [31:0] $end
$var reg 32 :% sbaddress0 [31:0] $end
$var reg 32 ;% sbdata0 [31:0] $end
$var reg 32 <% command [31:0] $end
$var reg 32 =% read_data [31:0] $end
$var reg 1 >% dm_reg_we $end
$var reg 5 ?% dm_reg_addr [4:0] $end
$var reg 32 @% dm_reg_wdata [31:0] $end
$var reg 1 A% dm_mem_we $end
$var reg 32 B% dm_mem_addr [31:0] $end
$var reg 32 C% dm_mem_wdata [31:0] $end
$var reg 1 D% dm_halt_req $end
$var reg 1 E% dm_reset_req $end
$var reg 1 F% need_resp $end
$var reg 1 G% is_read_reg $end
$var wire 1 H% rx_valid $end
$var wire 40 I% rx_data [39:0] $end
$var wire 32 J% sbaddress0_next [31:0] $end
$var wire 40 K% dm_resp_data [39:0] $end
$var wire 2 L% op [1:0] $end
$var wire 32 M% data [31:0] $end
$var wire 6 N% address [5:0] $end
$var wire 1 O% read_dmstatus $end
$var wire 1 P% tx_idle $end
$scope module tx $end
$var wire 1 < clk $end
$var wire 1 = rst_n $end
$var wire 1 d$ ack_i $end
$var wire 1 Q% req_i $end
$var wire 40 K% req_data_i [39:0] $end
$var wire 1 P% idle_o $end
$var wire 1 i$ req_o $end
$var wire 40 h$ req_data_o [39:0] $end
$var reg 3 R% state [2:0] $end
$var reg 3 S% state_next [2:0] $end
$var reg 1 T% ack_d $end
$var reg 1 U% ack $end
$var reg 1 V% req $end
$var reg 40 W% req_data [39:0] $end
$var reg 1 X% idle $end
$upscope $end
$scope module rx $end
$var wire 1 < clk $end
$var wire 1 = rst_n $end
$var wire 1 e$ req_i $end
$var wire 40 f$ req_data_i [39:0] $end
$var wire 1 g$ ack_o $end
$var wire 40 I% recv_data_o [39:0] $end
$var wire 1 H% recv_rdy_o $end
$var reg 2 Y% state [1:0] $end
$var reg 2 Z% state_next [1:0] $end
$var reg 1 [% req_d $end
$var reg 1 \% req $end
$var reg 40 ]% recv_data [39:0] $end
$var reg 1 ^% recv_rdy $end
$var reg 1 _% ack $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end

#0
$dumpvars
0!
b0 !!
bx !"
bx !#
x!$
0!%
0"
b0x "!
bx ""
bx "#
bx "$
b0 "%
bx #
x#!
b0 #"
bx ##
bx #$
0#%
b1 $
bx $!
x$"
bx $#
bx $$
b0 $%
bx %
bx %!
bx %"
bx %#
bx %$
b1 %%
bx &
bx &!
b0 &"
bx &#
b0 &$
b1 &%
x'
bx '!
b0 '"
bx '#
bx '$
0'%
b0xxxxx (
bx (!
b0 ("
bx (#
bx ($
0(%
b0xxxxx )
bx )!
bx )"
bx )#
b0 )$
0)%
z*
bx *!
b0 *"
bx *#
x*$
b0 *%
x+
bx +!
bx +"
bx +#
x+$
1+%
bx ,
bx ,!
bx ,"
x,#
bx ,$
b1 ,%
bx -
b0 -!
bx -"
x-#
bx -$
b1 -%
bx .
b0 .!
bx ."
x.#
bx .$
0.%
b0 /
bx /!
bx /"
bx /#
bx /$
0/%
b0 0
bx 0!
bx 0"
bx 0#
x0$
b0 0%
bx 1
b0 1!
bx 1"
bx 1#
bx 1$
01%
bx 2
b0 2!
02"
bx 2#
x2$
02%
bx 3
03!
bx 3"
bx 3#
bx 3$
b0 3%
bx 4
b0 4!
bx 4"
bx 4#
x4$
b10000110000110010000010 4%
bx 5
b0 5!
bx 5"
bx 5#
bx 5$
b0 5%
bx 6
06!
b1 6"
b0 6#
b0xxxxxxxx 6$
b0 6%
bx 7
b0 7!
bx 7"
x7#
b0 7$
b1000000000000000000000011 7%
b10 8
b0 8!
b0 8"
bx 8#
b0 8$
b0 8%
b11 9
b0 9!
bx 9"
bx 9#
b1 9$
b100000000001000000010000000100 9%
bx :
b0 :!
b0 :"
x:#
1:$
b0 :%
bx ;
b0 ;!
bx ;"
bx ;#
0;$
b0 ;%
0<
b0 <!
b0 <"
x<#
b0 <$
b0 <%
0=
0=!
b0 ="
x=#
b0 =$
b0 =%
x>
z>!
b0 >"
bx >#
b0 >$
0>%
x?
bx ?!
b0 ?"
0?#
b0 ?$
b0 ?%
1@
bx @!
b0 @"
0@#
0@$
b0 @%
0A
xA!
b0 A"
b0 A#
b0 A$
0A%
xB
bx B!
b0 B"
0B#
b0 B$
b0 B%
zC
bx C!
bx C"
0C#
0C$
b0 C%
bx D
bx D!
bx D"
xD#
b0 D$
0D%
zE
xE!
b0 E"
zE#
b0 E$
0E%
zF
bx F!
b0 F"
bx F#
0F$
0F%
zG
bx G!
0G"
xG#
b0 G$
0G%
xH
bx H!
b0 H"
xH#
b0 H$
0H%
zI
bx I!
0I"
bx I#
0I$
b0 I%
xJ
bx J!
b0 J"
bx J#
b0 J$
b100 J%
xK
bx K!
b0 K"
bx K#
b0 K$
b0 K%
xL
xL!
0L"
bx L#
0L$
b0 L%
b0 M
b0 M!
bx M"
bx M#
b0 M$
b0 M%
b0 N
b0 N!
bx N"
bx N#
b0 N$
b0 N%
b0 O
b0 O!
bx O"
bx O#
0O$
0O%
0P
0P!
bx P"
bx P#
0P$
1P%
0Q
0Q!
bx Q"
bx Q#
b10 Q$
0Q%
bx R
bx R!
bx R"
xR#
b1 R$
b1 R%
bz S
xS!
0S"
xS#
xS$
b1 S%
b1 T
bx T!
bx T"
xT#
bx T$
0T%
zU
xU!
bx U"
xU#
bx U$
0U%
zV
xV!
xV"
xV#
bx V$
0V%
b0 W
bx W!
xW"
bx W#
bx W$
b0 W%
b0 X
xX!
bx X"
bx X#
bx X$
1X%
b0 Y
bx Y!
bx Y"
xY#
bx Y$
b1 Y%
0Z
bx Z!
bx Z"
bx Z#
bx Z$
b1 Z%
0[
bx [!
bx ["
bx [#
bx [$
0[%
bx \
bx \!
x\"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx \#
bx \$
0\%
bx ]
b0 ]!
bx ]"
x]#
bx ]$
b0 ]%
b0 ^
x^!
bx ^"
bx ^#
bx ^$
0^%
0_
bx _!
bx _"
bx _#
bx _$
0_%
x`
b0 `!
bx `"
bx `#
bx `$
b0 a
b0 a!
bx a"
bx a#
bx a$
b0 b
b0 b!
bx b"
xb#
bx b$
b0 c
bx c!
b1 c"
b1 c#
bx c$
0d
xd!
bx d"
bx d#
0d$
b0 e
bx e!
b0 e"
bx e#
0e$
b0 f
bx f!
bx f"
bx f#
b0 f$
b0 g
bx g!
0g"
b0 g#
0g$
0h
b0 h!
xh"
b0 h#
b0 h$
b0 i
xi!
xi"
b0 i#
0i$
b0 j
bx j!
bx j"
bx j#
zj$
b0 k
bx k!
b0 k"
bx k#
zk$
0l
xl!
bx l"
bx l#
zl$
b0 m
xm!
bx m"
b0 m#
xm$
b0 n
bx n!
bx n"
xn#
bx n$
b0 o
xo!
xo"
xo#
bx o$
0p
bx p!
bx p"
bx p#
b0 p$
b0 q
bx q!
bx q"
bx q#
0q$
b0 r
bx r!
bx r"
bx r#
0r$
b0 s
bx s!
bx s"
bx s#
0s$
0t
xt!
bx t"
xt#
b0 t$
b0 u
xu!
bx u"
xu#
b0 u$
b0 v
zv!
b0 v"
xv#
0v$
b0 w
bz w!
b0 w"
xw#
b110 w$
0x
bz x!
b0 x"
xx#
b11 x$
0y
bz y!
b0 y"
bx y#
b0 y$
0z
bx z!
bx z"
xz#
b11110001000000000101001101111 z$
0{
bz {!
bx {"
x{#
b101000001100001 {$
b0 |
bx |!
bx |"
bx |#
b0 |$
b0 }
bx }!
bx }"
bx }#
x}$
0~
bx ~!
bx ~"
bx ~#
1~$
$end

#10000
1!
b0 !#
0!$
b0 "!
b0 ""
b0 "#
b0 "$
0#!
b0 ##
b0 #$
b0 $
bz $!
0$"
b0 $#
b110111000 $$
b1 %
b0 %!
b0 %"
b0 %#
b0 %$
b1 &
b0 &!
b11111111111111111111111111111111 &#
0'
b0 '!
b11111111111111111111111111111111 '#
b0 '$
b0 (
b0 (!
b0 (#
b0 ($
b0 )
b0 )!
b0 )"
b0 )#
b1 *!
b0 *#
0*$
0+
b0 +!
b0 +"
b0 +#
0+$
b0 ,
b0 ,!
b0 ,"
1,#
b0 ,$
b0 -
b0 -"
1-#
b0 -$
b0 .
b0 ."
1.#
b0 .$
b1 /!
b0 /"
b0 /#
b0 /$
b0 0!
b0 0"
b0 0#
00$
b0 1
b0 1"
b1 1#
b0 1$
b0 2
b0 2#
02$
b0 3
b1 3"
b0 3#
b0 3$
b0 4"
b0 4#
04$
b0 5"
b0 5#
b0 5$
b0 6$
b1 7"
07#
b0 8#
b0 9"
b0 9#
b0 9$
0:#
b0 ;"
b0 ;#
1<
0<#
0=#
1>
b0 >#
1?
b1 ?!
b0 @!
0A!
0B
b0 B!
b0 C!
b1 C"
bz D
b0 D!
b0 D"
0D#
0E!
b0 F!
b0 F#
b0 G!
0G#
b0 H!
0H#
b0 I!
b0 I#
0J
b0 J!
b0 J#
1K
b0 K!
b0 K#
0L
0L!
b0 L#
b1 M"
b1 M#
b0 N"
b0 N#
b0 O"
b0 O#
b0 P"
b0 P#
b0 Q"
b0 Q#
b0 R
b0 R!
b0 R"
0R#
0S!
0S#
0S$
b0 T
b0 T!
b1 T"
0T#
b0 T$
0U!
b0 U"
0U#
b0 U$
0V!
0V"
0V#
b1 V$
b0 W!
0W"
b0 W#
b0 W$
0X!
b0 X"
b0 X#
b0 X$
b0 Y!
b0 Y"
1Y#
b0 Y$
b0 Z!
b0 Z"
b0 Z#
b0 Z$
b0 [!
b0 ["
b1 [#
b0 [$
b0 \
b0 \!
0\"
b0 \#
b0 \$
b0 ]
b0 ]"
0]#
b0 ]$
0^!
b0 ^"
b0 ^#
b0 ^$
b0 _!
b0 _"
b0 _$
0`
b0 `"
b0 `#
b0 `$
b0 a"
b0 a#
b0 a$
b0 b"
0b#
b0 b$
b0 c!
b0 c$
0d!
b1 d"
b1 d#
b0 e!
b0 e#
b0 f!
b0 f"
b0 f#
b0 g!
0h"
0i!
0i"
b0 j!
b0 j"
b0 j#
b0 k!
b0 k#
0l!
b0 l"
b0 l#
0m!
b0 m"
b0 n!
b0 n"
0n#
0o!
0o"
0o#
b0 p!
b0 p"
b1 p#
b0 q"
b0 q#
b0 r!
b0 r"
b0 r#
b0 s!
b0 s"
0t!
b0 t"
0t#
0u!
b0 u"
0u#
0v#
0w#
0x#
b0 y#
b0 z"
0z#
b0 {"
b0 |"
b0 |#
b0 }!
b0 }"
b0 }#
b0 ~!
b0 ~"
b0 ~#

#20000
0!
0<

#30000
1!
1<

#40000
0!
1"
b1000100000010000000101011 $
b1000100000010000000101011 9$
0<
1=
b1000100000010000000101011 T
b1000100000010000000101011 c
bx g
b1000100000010000000101011 g#
bx h#

#50000
1!
b100 ""
bx $
b1000100000010000000101011 %
b100 )!
b1000100000010000000101011 *!
b1 +"
b1000100000010000000101011 /!
b1000100000010000000101011 3"
b110 5$
b1000100000010000000101011 7"
bx 9$
1<
x>
b100 >$
x?
1B
b1000100000010000000101011 C"
b101011 M"
b10 N"
b100 R
b10001 R"
bx T
b100 a
bx c
bx g#
1t#
zu#
b110111000 }#

#60000
0!
0<

#70000
1!
b1000 ""
bx %
b1000100000010000000101011 &
b111111111111111 '#
b1000 )!
bx *!
b100 +!
b10 +"
bx /!
b100 0!
b101011 1#
b10 2#
bx 3"
b100 4"
bx 7"
b100 9"
bx 9$
1<
b1000 >$
b1000100000010000000101011 ?!
bx C"
b100 D"
bx M"
bx N"
bx O"
bx P"
bx Q"
b1000 R
bx R"
b1000100000010000000101011 T"
b10 [!
b1000 a
b1000100000010000000101011 d"
zv#
xw#
b10 |"
b1 ~"

#80000
0!
0<

#90000
1!
bx !#
b1100 ""
bx %#
bx &
bx '#
b1100 )!
b1000 +!
b11 +"
b1000 0!
bx 1#
bx 2#
bx 3#
b1000 4"
bx 4#
bx 5#
b1000 9"
bx 9$
1<
b1100 >$
bx ?!
b100 @!
b1000 D"
b1100 R
bx T"
b100 U"
bx [!
b1100 a
bx d"
b100 f"
bx |"
bx ~"

#100000
0!
0<

#110000
1!
b10000 ""
b10000 )!
b1100 +!
b100 +"
b1100 0!
b1100 4"
b1100 9"
bx 9$
1<
b10000 >$
b1000 @!
b1100 D"
b10000 R
b1000 U"
b10000 a
b1000 f"

#120000
0!
0<

#130000
1!
b10100 ""
b10100 )!
b10000 +!
b101 +"
b10000 0!
b10000 4"
b10000 9"
bx 9$
1<
b10100 >$
b1100 @!
b10000 D"
b10100 R
b1100 U"
b10100 a
b1100 f"

#140000
0!
0<

#150000
1!
b11000 ""
b11000 )!
b10100 +!
b110 +"
b10100 0!
b10100 4"
b10100 9"
bx 9$
1<
b11000 >$
b10000 @!
b10100 D"
b11000 R
b10000 U"
b11000 a
b10000 f"

#160000
0!
0<

#170000
1!
b11100 ""
b11100 )!
b11000 +!
b111 +"
b11000 0!
b11000 4"
b11000 9"
bx 9$
1<
b11100 >$
b10100 @!
b11000 D"
b11100 R
b10100 U"
b11100 a
b10100 f"

#180000
0!
0<

#190000
1!
b100000 ""
b100000 )!
b11100 +!
b1000 +"
b11100 0!
b11100 4"
b11100 9"
bx 9$
1<
b100000 >$
b11000 @!
b11100 D"
b100000 R
b11000 U"
b100000 a
b11000 f"

#200000
0!
0<

#210000
1!
b100100 ""
b100100 )!
b100000 +!
b1001 +"
b100000 0!
b100000 4"
b100000 9"
bx 9$
1<
b100100 >$
b11100 @!
b100000 D"
b100100 R
b11100 U"
b100100 a
b11100 f"

#220000
0!
0<

#230000
1!
b101000 ""
b101000 )!
b100100 +!
b1010 +"
b100100 0!
b100100 4"
b100100 9"
bx 9$
1<
b101000 >$
b100000 @!
b100100 D"
b101000 R
b100000 U"
b101000 a
b100000 f"

#240000
0!
0<

#250000
1!
b101100 ""
b101100 )!
b101000 +!
b1011 +"
b101000 0!
b101000 4"
b101000 9"
bx 9$
1<
b101100 >$
b100100 @!
b101000 D"
b101100 R
b100100 U"
b101100 a
b100100 f"

#260000
0!
0<

#270000
1!
b110000 ""
b110000 )!
b101100 +!
b1100 +"
b101100 0!
b101100 4"
b101100 9"
bx 9$
1<
b110000 >$
b101000 @!
b101100 D"
b110000 R
b101000 U"
b110000 a
b101000 f"

#280000
0!
0<

#290000
1!
b110100 ""
b110100 )!
b110000 +!
b1101 +"
b110000 0!
b110000 4"
b110000 9"
bx 9$
1<
b110100 >$
b101100 @!
b110000 D"
b110100 R
b101100 U"
b110100 a
b101100 f"

#300000
0!
0<

#310000
1!
b111000 ""
b111000 )!
b110100 +!
b1110 +"
b110100 0!
b110100 4"
b110100 9"
bx 9$
1<
b111000 >$
b110000 @!
b110100 D"
b111000 R
b110000 U"
b111000 a
b110000 f"

#320000
0!
0<

#330000
1!
b111100 ""
b111100 )!
b111000 +!
b1111 +"
b111000 0!
b111000 4"
b111000 9"
bx 9$
1<
b111100 >$
b110100 @!
b111000 D"
b111100 R
b110100 U"
b111100 a
b110100 f"

#340000
0!
0<

#350000
1!
b1000000 ""
b1000000 )!
b111100 +!
b10000 +"
b111100 0!
b111100 4"
b111100 9"
bx 9$
1<
b1000000 >$
b111000 @!
b111100 D"
b1000000 R
b111000 U"
b1000000 a
b111000 f"

#360000
0!
0<

#370000
1!
b1000100 ""
b1000100 )!
b1000000 +!
b10001 +"
b1000000 0!
b1000000 4"
b1000000 9"
bx 9$
1<
b1000100 >$
b111100 @!
b1000000 D"
b1000100 R
b111100 U"
b1000100 a
b111100 f"

#380000
0!
0<

#390000
1!
b1001000 ""
b1001000 )!
b1000100 +!
b10010 +"
b1000100 0!
b1000100 4"
b1000100 9"
bx 9$
1<
b1001000 >$
b1000000 @!
b1000100 D"
b1001000 R
b1000000 U"
b1001000 a
b1000000 f"

#400000
0!
0<

#410000
1!
b1001100 ""
b1001100 )!
b1001000 +!
b10011 +"
b1001000 0!
b1001000 4"
b1001000 9"
bx 9$
1<
b1001100 >$
b1000100 @!
b1001000 D"
b1001100 R
b1000100 U"
b1001100 a
b1000100 f"

#420000
0!
0<

#430000
1!
b1010000 ""
b1010000 )!
b1001100 +!
b10100 +"
b1001100 0!
b1001100 4"
b1001100 9"
bx 9$
1<
b1010000 >$
b1001000 @!
b1001100 D"
b1010000 R
b1001000 U"
b1010000 a
b1001000 f"

#440000
0!
0<

#450000
1!
b1010100 ""
b1010100 )!
b1010000 +!
b10101 +"
b1010000 0!
b1010000 4"
b1010000 9"
bx 9$
1<
b1010100 >$
b1001100 @!
b1010000 D"
b1010100 R
b1001100 U"
b1010100 a
b1001100 f"

#460000
0!
0<

#470000
1!
b1011000 ""
b1011000 )!
b1010100 +!
b10110 +"
b1010100 0!
b1010100 4"
b1010100 9"
bx 9$
1<
b1011000 >$
b1010000 @!
b1010100 D"
b1011000 R
b1010000 U"
b1011000 a
b1010000 f"

#480000
0!
0<

#490000
1!
b1011100 ""
b1011100 )!
b1011000 +!
b10111 +"
b1011000 0!
b1011000 4"
b1011000 9"
bx 9$
1<
b1011100 >$
b1010100 @!
b1011000 D"
b1011100 R
b1010100 U"
b1011100 a
b1010100 f"

#500000
0!
0<

#510000
1!
b1100000 ""
b1100000 )!
b1011100 +!
b11000 +"
b1011100 0!
b1011100 4"
b1011100 9"
bx 9$
1<
b1100000 >$
b1011000 @!
b1011100 D"
b1100000 R
b1011000 U"
b1100000 a
b1011000 f"

#520000
0!
0<

#530000
1!
b1100100 ""
b1100100 )!
b1100000 +!
b11001 +"
b1100000 0!
b1100000 4"
b1100000 9"
bx 9$
1<
b1100100 >$
b1011100 @!
b1100000 D"
b1100100 R
b1011100 U"
b1100100 a
b1011100 f"

#540000
0!
0<

#550000
1!
b1101000 ""
b1101000 )!
b1100100 +!
b11010 +"
b1100100 0!
b1100100 4"
b1100100 9"
bx 9$
1<
b1101000 >$
b1100000 @!
b1100100 D"
b1101000 R
b1100000 U"
b1101000 a
b1100000 f"

#560000
0!
0<

#570000
1!
b1101100 ""
b1101100 )!
b1101000 +!
b11011 +"
b1101000 0!
b1101000 4"
b1101000 9"
bx 9$
1<
b1101100 >$
b1100100 @!
b1101000 D"
b1101100 R
b1100100 U"
b1101100 a
b1100100 f"

#580000
0!
0<

#590000
1!
b1110000 ""
b1110000 )!
b1101100 +!
b11100 +"
b1101100 0!
b1101100 4"
b1101100 9"
bx 9$
1<
b1110000 >$
b1101000 @!
b1101100 D"
b1110000 R
b1101000 U"
b1110000 a
b1101000 f"

#600000
0!
0<

#610000
1!
b1110100 ""
b1110100 )!
b1110000 +!
b11101 +"
b1110000 0!
b1110000 4"
b1110000 9"
bx 9$
1<
b1110100 >$
b1101100 @!
b1110000 D"
b1110100 R
b1101100 U"
b1110100 a
b1101100 f"

#620000
0!
0<

#630000
1!
b1111000 ""
b1111000 )!
b1110100 +!
b11110 +"
b1110100 0!
b1110100 4"
b1110100 9"
bx 9$
1<
b1111000 >$
b1110000 @!
b1110100 D"
b1111000 R
b1110000 U"
b1111000 a
b1110000 f"

#640000
0!
0<

#650000
1!
b1111100 ""
b1111100 )!
b1111000 +!
b11111 +"
b1111000 0!
b1111000 4"
b1111000 9"
bx 9$
1<
b1111100 >$
b1110100 @!
b1111000 D"
b1111100 R
b1110100 U"
b1111100 a
b1110100 f"

#660000
0!
0<

#670000
1!
b10000000 ""
b10000000 )!
b1111100 +!
b100000 +"
b1111100 0!
b1111100 4"
b1111100 9"
bx 9$
1<
b10000000 >$
b1111000 @!
b1111100 D"
b10000000 R
b1111000 U"
b10000000 a
b1111000 f"

#680000
0!
0<

#690000
1!
b10000100 ""
b10000100 )!
b10000000 +!
b100001 +"
b10000000 0!
b10000000 4"
b10000000 9"
bx 9$
1<
b10000100 >$
b1111100 @!
b10000000 D"
b10000100 R
b1111100 U"
b10000100 a
b1111100 f"

#700000
0!
0<

#710000
1!
b10001000 ""
b10001000 )!
b10000100 +!
b100010 +"
b10000100 0!
b10000100 4"
b10000100 9"
bx 9$
1<
b10001000 >$
b10000000 @!
b10000100 D"
b10001000 R
b10000000 U"
b10001000 a
b10000000 f"

#720000
0!
0<

#730000
1!
b10001100 ""
b10001100 )!
b10001000 +!
b100011 +"
b10001000 0!
b10001000 4"
b10001000 9"
bx 9$
1<
b10001100 >$
b10000100 @!
b10001000 D"
b10001100 R
b10000100 U"
b10001100 a
b10000100 f"

#740000
0!
0<

#750000
1!
b10010000 ""
b10010000 )!
b10001100 +!
b100100 +"
b10001100 0!
b10001100 4"
b10001100 9"
bx 9$
1<
b10010000 >$
b10001000 @!
b10001100 D"
b10010000 R
b10001000 U"
b10010000 a
b10001000 f"

#760000
0!
0<

#770000
1!
b10010100 ""
b10010100 )!
b10010000 +!
b100101 +"
b10010000 0!
b10010000 4"
b10010000 9"
bx 9$
1<
b10010100 >$
b10001100 @!
b10010000 D"
b10010100 R
b10001100 U"
b10010100 a
b10001100 f"

#780000
0!
0<

#790000
1!
b10011000 ""
b10011000 )!
b10010100 +!
b100110 +"
b10010100 0!
b10010100 4"
b10010100 9"
bx 9$
1<
b10011000 >$
b10010000 @!
b10010100 D"
b10011000 R
b10010000 U"
b10011000 a
b10010000 f"

#800000
0!
0<

#810000
1!
b10011100 ""
b10011100 )!
b10011000 +!
b100111 +"
b10011000 0!
b10011000 4"
b10011000 9"
bx 9$
1<
b10011100 >$
b10010100 @!
b10011000 D"
b10011100 R
b10010100 U"
b10011100 a
b10010100 f"

#820000
0!
0<

#830000
1!
b10100000 ""
b10100000 )!
b10011100 +!
b101000 +"
b10011100 0!
b10011100 4"
b10011100 9"
bx 9$
1<
b10100000 >$
b10011000 @!
b10011100 D"
b10100000 R
b10011000 U"
b10100000 a
b10011000 f"

#840000
0!
0<

#850000
1!
b10100100 ""
b10100100 )!
b10100000 +!
b101001 +"
b10100000 0!
b10100000 4"
b10100000 9"
bx 9$
1<
b10100100 >$
b10011100 @!
b10100000 D"
b10100100 R
b10011100 U"
b10100100 a
b10011100 f"

#860000
0!
0<

#870000
1!
b10101000 ""
b10101000 )!
b10100100 +!
b101010 +"
b10100100 0!
b10100100 4"
b10100100 9"
bx 9$
1<
b10101000 >$
b10100000 @!
b10100100 D"
b10101000 R
b10100000 U"
b10101000 a
b10100000 f"

#880000
0!
0<

#890000
1!
b10101100 ""
b10101100 )!
b10101000 +!
b101011 +"
b10101000 0!
b10101000 4"
b10101000 9"
bx 9$
1<
b10101100 >$
b10100100 @!
b10101000 D"
b10101100 R
b10100100 U"
b10101100 a
b10100100 f"

#900000
0!
0<

#910000
1!
b10110000 ""
b10110000 )!
b10101100 +!
b101100 +"
b10101100 0!
b10101100 4"
b10101100 9"
bx 9$
1<
b10110000 >$
b10101000 @!
b10101100 D"
b10110000 R
b10101000 U"
b10110000 a
b10101000 f"

#920000
0!
0<

#930000
1!
b10110100 ""
b10110100 )!
b10110000 +!
b101101 +"
b10110000 0!
b10110000 4"
b10110000 9"
bx 9$
1<
b10110100 >$
b10101100 @!
b10110000 D"
b10110100 R
b10101100 U"
b10110100 a
b10101100 f"

#940000
0!
0<

#950000
1!
b10111000 ""
b10111000 )!
b10110100 +!
b101110 +"
b10110100 0!
b10110100 4"
b10110100 9"
bx 9$
1<
b10111000 >$
b10110000 @!
b10110100 D"
b10111000 R
b10110000 U"
b10111000 a
b10110000 f"

#960000
0!
0<

#970000
1!
b10111100 ""
b10111100 )!
b10111000 +!
b101111 +"
b10111000 0!
b10111000 4"
b10111000 9"
bx 9$
1<
b10111100 >$
b10110100 @!
b10111000 D"
b10111100 R
b10110100 U"
b10111100 a
b10110100 f"

#980000
0!
0<

#990000
1!
b11000000 ""
b11000000 )!
b10111100 +!
b110000 +"
b10111100 0!
b10111100 4"
b10111100 9"
bx 9$
1<
b11000000 >$
b10111000 @!
b10111100 D"
b11000000 R
b10111000 U"
b11000000 a
b10111000 f"

#1000000
0!
0<
